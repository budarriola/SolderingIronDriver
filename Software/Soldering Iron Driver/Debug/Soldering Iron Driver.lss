
Soldering Iron Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b8  00800100  00002e40  00002ef4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e40  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000091  008001b8  008001b8  00002fac  2**0
                  ALLOC
  3 .eeprom       00000004  00810000  00810000  00002fac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         0000492c  00000000  00000000  00002fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00001007  00000000  00000000  000078dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  000088e3  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000148  00000000  00000000  00008912  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000026ad  00000000  00000000  00008a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000083f  00000000  00000000  0000b107  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000f9b  00000000  00000000  0000b946  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000004b8  00000000  00000000  0000c8e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000792  00000000  00000000  0000cd9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001c3b  00000000  00000000  0000d52e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000e8  00000000  00000000  0000f169  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 21 05 	jmp	0xa42	; 0xa42 <__ctors_end>
       4:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__bad_interrupt>
       8:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__bad_interrupt>
       c:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__bad_interrupt>
      10:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__bad_interrupt>
      14:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__bad_interrupt>
      18:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__bad_interrupt>
      1c:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__bad_interrupt>
      20:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__bad_interrupt>
      24:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__bad_interrupt>
      28:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__bad_interrupt>
      2c:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__bad_interrupt>
      30:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__bad_interrupt>
      34:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__bad_interrupt>
      38:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__bad_interrupt>
      3c:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__bad_interrupt>
      40:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__bad_interrupt>
      44:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__bad_interrupt>
      48:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__bad_interrupt>
      4c:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__bad_interrupt>
      50:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__bad_interrupt>
      54:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <__vector_21>
      58:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__bad_interrupt>
      5c:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__bad_interrupt>
      60:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__bad_interrupt>
      64:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9e8>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc18>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa36>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <lookuptable+0x7fa>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <lookuptable>:
      ea:	63 f8 4f f8 3c f8 28 f8 14 f8 00 f8 ed f7 d9 f7     c.O.<.(.........
      fa:	c6 f7 b2 f7 2b f9 16 f9 02 f9 ee f8 da f8 c6 f8     ....+...........
     10a:	b3 f8 9f f8 8b f8 77 f8 f5 f9 e0 f9 cc f9 b8 f9     ......w.........
     11a:	a4 f9 8f f9 7b f9 67 f9 53 f9 3f f9 c1 fa ad fa     ....{.g.S.?.....
     12a:	98 fa 84 fa 6f fa 5b fa 46 fa 32 fa 1d fa 09 fa     ....o.[.F.2.....
     13a:	91 fb 7c fb 67 fb 52 fb 3e fb 29 fb 14 fb ff fa     ..|.g.R.>.).....
     14a:	eb fa d6 fa 62 fc 4d fc 38 fc 23 fc 0e fc f9 fb     ....b.M.8.#.....
     15a:	e4 fb cf fb ba fb a6 fb 36 fd 21 fd 0c fd f6 fc     ........6.!.....
     16a:	e1 fc cc fc b7 fc a2 fc 8d fc 77 fc 4c fd 61 fd     ..........w.L.a.
     17a:	76 fd 8c fd a1 fd b6 fd cc fd e1 fd f7 fd 0c fe     v...............
     18a:	22 fe 37 fe 4d fe 63 fe 78 fe 8e fe a3 fe b9 fe     ".7.M.c.x.......
     19a:	cf fe e4 fe fa fe 10 ff 26 ff 3b ff 51 ff 67 ff     ........&.;.Q.g.
     1aa:	7d ff 93 ff a8 ff be ff d4 ff ea ff 00 00 16 00     }...............
     1ba:	2c 00 42 00 58 00 6e 00 84 00 9a 00 b0 00 c6 00     ,.B.X.n.........
     1ca:	dc 00 f2 00 08 01 1e 01 34 01 4a 01 61 01 77 01     ........4.J.a.w.
     1da:	8d 01 a3 01 b9 01 cf 01 e6 01 fc 01 12 02 28 02     ..............(.
     1ea:	3f 02 55 02 6b 02 82 02 98 02 ae 02 c5 02 db 02     ?.U.k...........
     1fa:	f1 02 08 03 1e 03 35 03 4b 03 61 03 78 03 8e 03     ......5.K.a.x...
     20a:	a5 03 bb 03 d2 03 e8 03 ff 03 15 04 2c 04 42 04     ............,.B.
     21a:	59 04 70 04 86 04 9d 04 b3 04 ca 04 e1 04 f7 04     Y.p.............
     22a:	0e 05 24 05 3b 05 52 05 68 05 7f 05 96 05 ad 05     ..$.;.R.h.......
     23a:	c3 05 da 05 f1 05 07 06 1e 06 35 06 4c 06 63 06     ..........5.L.c.
     24a:	79 06 90 06 a7 06 be 06 d5 06 eb 06 02 07 19 07     y...............
     25a:	30 07 47 07 5e 07 75 07 8b 07 a2 07 b9 07 d0 07     0.G.^.u.........
     26a:	e7 07 fe 07 15 08 2c 08 43 08 5a 08 71 08 88 08     ......,.C.Z.q...
     27a:	9f 08 b6 08 cd 08 e4 08 fa 08 11 09 28 09 3f 09     ............(.?.
     28a:	56 09 6d 09 84 09 9b 09 b3 09 ca 09 e1 09 f8 09     V.m.............
     29a:	0f 0a 26 0a 3d 0a 54 0a 6b 0a 82 0a 99 0a b0 0a     ..&.=.T.k.......
     2aa:	c7 0a de 0a f5 0a 0c 0b 23 0b 3a 0b 51 0b 68 0b     ........#.:.Q.h.
     2ba:	80 0b 97 0b ae 0b c5 0b dc 0b f3 0b 0a 0c 21 0c     ..............!.
     2ca:	38 0c 4f 0c 66 0c 7d 0c 94 0c ac 0c c3 0c da 0c     8.O.f.}.........
     2da:	f1 0c 08 0d 1f 0d 36 0d 4d 0d 64 0d 7b 0d 92 0d     ......6.M.d.{...
     2ea:	a9 0d c0 0d d8 0d ef 0d 06 0e 1d 0e 34 0e 4b 0e     ............4.K.
     2fa:	62 0e 79 0e 90 0e a7 0e be 0e d5 0e ec 0e 03 0f     b.y.............
     30a:	1a 0f 31 0f 48 0f 5f 0f 76 0f 8d 0f a4 0f bb 0f     ..1.H._.v.......
     31a:	d2 0f e9 0f 00 10 17 10 2e 10 45 10 5c 10 73 10     ..........E.\.s.
     32a:	8a 10 a1 10 b8 10 cf 10 e6 10 fd 10 14 11 2b 11     ..............+.
     33a:	41 11 58 11 6f 11 86 11 9d 11 b4 11 cb 11 e2 11     A.X.o...........
     34a:	f9 11 0f 12 26 12 3d 12 54 12 6b 12 82 12 98 12     ....&.=.T.k.....
     35a:	af 12 c6 12 dd 12 f4 12 0a 13 21 13 38 13 4f 13     ..........!.8.O.
     36a:	65 13 7c 13 93 13 aa 13 c0 13 d7 13 ee 13 04 14     e.|.............
     37a:	1b 14 32 14 48 14 5f 14 76 14 8c 14 a3 14 ba 14     ..2.H._.v.......
     38a:	d0 14 e7 14 fe 14 14 15 2b 15 41 15 58 15 6f 15     ........+.A.X.o.
     39a:	85 15 9c 15 b2 15 c9 15 df 15 f6 15 0c 16 23 16     ..............#.
     3aa:	3a 16 50 16 67 16 7d 16 93 16 aa 16 c0 16 d7 16     :.P.g.}.........
     3ba:	ed 16 04 17 1a 17 31 17 47 17 5e 17 74 17 8a 17     ......1.G.^.t...
     3ca:	a1 17 b7 17 ce 17 e4 17 fa 17 11 18 27 18 3d 18     ............'.=.
     3da:	54 18 6a 18 80 18 97 18 ad 18 c3 18 da 18 f0 18     T.j.............
     3ea:	06 19 1d 19 33 19 49 19 60 19 76 19 8c 19 a2 19     ....3.I.`.v.....
     3fa:	b9 19 cf 19 e5 19 fc 19 12 1a 28 1a 3e 1a 55 1a     ..........(.>.U.
     40a:	6b 1a 81 1a 97 1a ad 1a c4 1a da 1a f0 1a 06 1b     k...............
     41a:	1d 1b 33 1b 49 1b 5f 1b 75 1b 8c 1b a2 1b b8 1b     ..3.I._.u.......
     42a:	ce 1b e4 1b fb 1b 11 1c 27 1c 3d 1c 53 1c 69 1c     ........'.=.S.i.
     43a:	80 1c 96 1c ac 1c c2 1c d8 1c ef 1c 05 1d 1b 1d     ................
     44a:	31 1d 47 1d 5d 1d 74 1d 8a 1d a0 1d b6 1d cc 1d     1.G.].t.........
     45a:	e2 1d f9 1d 0f 1e 25 1e 3b 1e 51 1e 67 1e 7e 1e     ......%.;.Q.g.~.
     46a:	94 1e aa 1e c0 1e d6 1e ed 1e 03 1f 19 1f 2f 1f     ............../.
     47a:	45 1f 5b 1f 72 1f 88 1f 9e 1f b4 1f ca 1f e1 1f     E.[.r...........
     48a:	f7 1f 0d 20 23 20 3a 20 50 20 66 20 7c 20 92 20     ... # : P f | . 
     49a:	a9 20 bf 20 d5 20 eb 20 02 21 18 21 2e 21 44 21     . . . . .!.!.!D!
     4aa:	5b 21 71 21 87 21 9d 21 b4 21 ca 21 e0 21 f6 21     [!q!.!.!.!.!.!.!
     4ba:	0d 22 23 22 39 22 50 22 66 22 7c 22 93 22 a9 22     ."#"9"P"f"|"."."
     4ca:	bf 22 d6 22 ec 22 02 23 19 23 2f 23 45 23 5c 23     .".".".#.#/#E#\#
     4da:	72 23 88 23 9f 23 b5 23 cb 23 e2 23 f8 23 0f 24     r#.#.#.#.#.#.#.$
     4ea:	25 24 3b 24 52 24 68 24 7f 24 95 24 ac 24 c2 24     %$;$R$h$.$.$.$.$
     4fa:	d8 24 ef 24 05 25 1c 25 32 25 49 25 5f 25 76 25     .$.$.%.%2%I%_%v%
     50a:	8c 25 a3 25 b9 25 d0 25 e6 25 fd 25 13 26 2a 26     .%.%.%.%.%.%.&*&
     51a:	40 26 57 26 6d 26 84 26 9a 26 b1 26 c7 26 de 26     @&W&m&.&.&.&.&.&
     52a:	f5 26 0b 27 22 27 38 27 4f 27 66 27 7c 27 93 27     .&.'"'8'O'f'|'.'
     53a:	a9 27 c0 27 d7 27 ed 27 04 28 1b 28 31 28 48 28     .'.'.'.'.(.(1(H(
     54a:	5e 28 75 28 8c 28 a2 28 b9 28 d0 28 e7 28 fd 28     ^(u(.(.(.(.(.(.(
     55a:	14 29 2b 29 41 29 58 29 6f 29 85 29 9c 29 b3 29     .)+)A)X)o).).).)
     56a:	ca 29 e0 29 f7 29 0e 2a 25 2a 3b 2a 52 2a 69 2a     .).).).*%*;*R*i*
     57a:	80 2a 97 2a ad 2a c4 2a db 2a f2 2a 09 2b 1f 2b     .*.*.*.*.*.*.+.+
     58a:	36 2b 4d 2b 64 2b 7b 2b 92 2b a8 2b bf 2b d6 2b     6+M+d+{+.+.+.+.+
     59a:	ed 2b 04 2c 1b 2c 31 2c 48 2c 5f 2c 76 2c 8d 2c     .+.,.,1,H,_,v,.,
     5aa:	a4 2c bb 2c d2 2c e9 2c ff 2c 16 2d 2d 2d 44 2d     .,.,.,.,.,.---D-
     5ba:	5b 2d 72 2d 89 2d a0 2d b7 2d ce 2d e5 2d fc 2d     [-r-.-.-.-.-.-.-
     5ca:	13 2e 2a 2e 41 2e 58 2e 6f 2e 86 2e 9d 2e b4 2e     ..*.A.X.o.......
     5da:	ca 2e e1 2e f8 2e 0f 2f 26 2f 3d 2f 54 2f 6c 2f     ......./&/=/T/l/
     5ea:	83 2f 9a 2f b1 2f c8 2f df 2f f6 2f 0d 30 24 30     ././././././.0$0
     5fa:	3b 30 52 30 69 30 80 30 97 30 ae 30 c5 30 dc 30     ;0R0i0.0.0.0.0.0
     60a:	f3 30 0a 31 21 31 38 31 50 31 67 31 7e 31 95 31     .0.1!181P1g1~1.1
     61a:	ac 31 c3 31 da 31 f1 31 08 32 1f 32 37 32 4e 32     .1.1.1.1.2.272N2
     62a:	65 32 7c 32 93 32 aa 32 c1 32 d8 32 f0 32 07 33     e2|2.2.2.2.2.2.3
     63a:	1e 33 35 33 4c 33 63 33 7b 33 92 33 a9 33 c0 33     .353L3c3{3.3.3.3
     64a:	d7 33 ee 33 06 34 1d 34 34 34 4b 34 62 34 79 34     .3.3.4.444K4b4y4
     65a:	91 34 a8 34 bf 34 d6 34 ed 34 05 35 1c 35 33 35     .4.4.4.4.4.5.535
     66a:	4a 35 61 35 79 35 90 35 a7 35 be 35 d6 35 ed 35     J5a5y5.5.5.5.5.5
     67a:	04 36 1b 36 32 36 4a 36 61 36 78 36 8f 36 a7 36     .6.626J6a6x6.6.6
     68a:	be 36 d5 36 ec 36 04 37 1b 37 32 37 4a 37 61 37     .6.6.6.7.727J7a7
     69a:	78 37 8f 37 a7 37 be 37 d5 37 ec 37 04 38 1b 38     x7.7.7.7.7.7.8.8
     6aa:	32 38 4a 38 61 38 78 38 8f 38 a7 38 be 38 d5 38     28J8a8x8.8.8.8.8
     6ba:	ed 38 04 39 1b 39 33 39 4a 39 61 39 79 39 90 39     .8.9.939J9a9y9.9
     6ca:	a7 39 bf 39 d6 39 ed 39 05 3a 1c 3a 33 3a 4b 3a     .9.9.9.9.:.:3:K:
     6da:	62 3a 79 3a 91 3a a8 3a bf 3a d7 3a ee 3a 05 3b     b:y:.:.:.:.:.:.;
     6ea:	1d 3b 34 3b 4b 3b 63 3b 7a 3b 92 3b a9 3b c0 3b     .;4;K;c;z;.;.;.;
     6fa:	d8 3b ef 3b 06 3c 1e 3c 35 3c 4d 3c 64 3c 7b 3c     .;.;.<.<5<M<d<{<
     70a:	93 3c aa 3c c2 3c d9 3c f0 3c 08 3d 1f 3d 37 3d     .<.<.<.<.<.=.=7=
     71a:	4e 3d 65 3d 7d 3d 94 3d ac 3d c3 3d da 3d f2 3d     N=e=}=.=.=.=.=.=
     72a:	09 3e 21 3e 38 3e 50 3e 67 3e 7e 3e 96 3e ad 3e     .>!>8>P>g>~>.>.>
     73a:	c5 3e dc 3e f4 3e 0b 3f 23 3f 3a 3f 51 3f 69 3f     .>.>.>.?#?:?Q?i?
     74a:	80 3f 98 3f af 3f c7 3f de 3f f6 3f 0d 40 25 40     .?.?.?.?.?.?.@%@
     75a:	3c 40 54 40 6b 40 83 40 9a 40 b1 40 c9 40 e0 40     <@T@k@.@.@.@.@.@
     76a:	f8 40 0f 41 27 41 3e 41 56 41 6d 41 85 41 9c 41     .@.A'A>AVAmA.A.A
     77a:	b4 41 cb 41 e3 41 fa 41 12 42 29 42 41 42 58 42     .A.A.A.A.B)BABXB
     78a:	70 42 87 42 9f 42 b6 42 ce 42 e5 42 fd 42 15 43     pB.B.B.B.B.B.B.C
     79a:	2c 43 44 43 5b 43 73 43 8a 43 a2 43 b9 43 d1 43     ,CDC[CsC.C.C.C.C
     7aa:	e8 43 00 44 17 44 2f 44 46 44 5e 44 76 44 8d 44     .C.D.D/DFD^DvD.D
     7ba:	a5 44 bc 44 d4 44 eb 44 03 45 1a 45 32 45 4a 45     .D.D.D.D.E.E2EJE
     7ca:	61 45 79 45 90 45 a8 45 bf 45 d7 45 ee 45 06 46     aEyE.E.E.E.E.E.F
     7da:	1e 46 35 46 4d 46 64 46 7c 46 94 46 ab 46 c3 46     .F5FMFdF|F.F.F.F
     7ea:	da 46 f2 46 09 47 21 47 39 47 50 47 68 47 7f 47     .F.F.G!G9GPGhG.G
     7fa:	97 47 af 47 c6 47 de 47 f5 47 0d 48 25 48 3c 48     .G.G.G.G.G.H%H<H
     80a:	54 48 6b 48 83 48 9b 48 b2 48 ca 48 e1 48 f9 48     THkH.H.H.H.H.H.H
     81a:	11 49 28 49 40 49 58 49 6f 49 87 49 9e 49 b6 49     .I(I@IXIoI.I.I.I
     82a:	ce 49 e5 49 fd 49 15 4a 2c 4a 44 4a 5b 4a 73 4a     .I.I.I.J,JDJ[JsJ
     83a:	8b 4a a2 4a ba 4a d2 4a e9 4a 01 4b 18 4b 30 4b     .J.J.J.J.J.K.K0K
     84a:	48 4b 5f 4b 77 4b 8f 4b a6 4b be 4b d6 4b ed 4b     HK_KwK.K.K.K.K.K
     85a:	05 4c 1d 4c 34 4c 4c 4c 64 4c 7b 4c 93 4c aa 4c     .L.L4LLLdL{L.L.L
     86a:	c2 4c da 4c f1 4c 09 4d 21 4d 38 4d 50 4d 68 4d     .L.L.L.M!M8MPMhM
     87a:	7f 4d 97 4d af 4d c6 4d de 4d f6 4d 0d 4e 25 4e     .M.M.M.M.M.M.N%N
     88a:	3d 4e 54 4e 6c 4e 84 4e 9b 4e b3 4e cb 4e e2 4e     =NTNlN.N.N.N.N.N
     89a:	fa 4e 12 4f 29 4f 41 4f 59 4f 70 4f 88 4f a0 4f     .N.O)OAOYOpO.O.O
     8aa:	b7 4f cf 4f e7 4f ff 4f 16 50 2e 50 46 50 5d 50     .O.O.O.O.P.PFP]P
     8ba:	75 50 8d 50 a4 50 bc 50 d4 50 eb 50 03 51 1b 51     uP.P.P.P.P.P.Q.Q
     8ca:	32 51 4a 51 62 51 79 51 91 51 a9 51 c1 51 d8 51     2QJQbQyQ.Q.Q.Q.Q
     8da:	f0 51 08 52 1f 52 37 52 4f 52 66 52 7e 52 96 52     .Q.R.R7RORfR~R.R
     8ea:	ad 52 c5 52 dd 52 f4 52 0c 53 24 53 3c 53 53 53     .R.R.R.R.S$S<SSS
     8fa:	6b 53 83 53 9a 53 b2 53 ca 53 e1 53 f9 53 11 54     kS.S.S.S.S.S.S.T
     90a:	28 54 40 54 58 54 70 54 87 54 9f 54 b7 54 ce 54     (T@TXTpT.T.T.T.T
     91a:	e6 54 fe 54 15 55 2d 55 45 55 5c 55 74 55 8c 55     .T.T.U-UEU\UtU.U
     92a:	a4 55 bb 55 d3 55 eb 55 02 56 1a 56 32 56 49 56     .U.U.U.U.V.V2VIV
     93a:	61 56 79 56 90 56 a8 56 c0 56 d8 56 ef 56 00 40     aVyV.V.V.V.V.V.@
     94a:	7a 10 f3 5a 00 a0 72 4e 18 09 00 10 a5 d4 e8 00     z..Z..rN........
     95a:	00 e8 76 48 17 00 00 e4 0b 54 02 00 00 ca 9a 3b     ..vH.....T.....;
     96a:	00 00 00 e1 f5 05 00 00 80 96 98 00 00 00 40 42     ..............@B
     97a:	0f 00 00 00 a0 86 01 00 00 00 10 27 00 00 00 00     ...........'....
     98a:	e8 03 00 00 00 00 64 00 00 00 00 00 0a 00 00 00     ......d.........
     99a:	00 00 01 00 00 00 00 00 2c 76 d8 88 dc 67 4f 08     ........,v...gO.
     9aa:	23 df c1 df ae 59 e1 b1 b7 96 e5 e3 e4 53 c6 3a     #....Y.......S.:
     9ba:	e6 51 99 76 96 e8 e6 c2 84 26 eb 89 8c 9b 62 ed     .Q.v.....&....b.
     9ca:	40 7c 6f fc ef bc 9c 9f 40 f2 ba a5 6f a5 f4 90     @|o.....@...o...
     9da:	05 5a 2a f7 5c 93 6b 6c f9 67 6d c1 1b fc e0 e4     .Z*.\.kl.gm.....
     9ea:	0d 47 fe f5 20 e6 b5 00 d0 ed 90 2e 03 00 94 35     .G.. ..........5
     9fa:	77 05 00 80 84 1e 08 00 00 20 4e 0a 00 00 00 c8     w........ N.....
     a0a:	0c 33 33 33 33 0f 98 6e 12 83 11 41 ef 8d 21 14     .3333..n...A..!.
     a1a:	89 3b e6 55 16 cf fe e6 db 18 d1 84 4b 38 1b f7     .;.U........K8..
     a2a:	7c 1d 90 1d a4 bb e4 24 20 32 84 72 5e 22 81 00     |......$ 2.r^"..
     a3a:	c9 f1 24 ec a1 e5 3d 27                             ..$...='

00000a42 <__ctors_end>:
     a42:	11 24       	eor	r1, r1
     a44:	1f be       	out	0x3f, r1	; 63
     a46:	cf ef       	ldi	r28, 0xFF	; 255
     a48:	d8 e0       	ldi	r29, 0x08	; 8
     a4a:	de bf       	out	0x3e, r29	; 62
     a4c:	cd bf       	out	0x3d, r28	; 61

00000a4e <__do_copy_data>:
     a4e:	11 e0       	ldi	r17, 0x01	; 1
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	b1 e0       	ldi	r27, 0x01	; 1
     a54:	e0 e4       	ldi	r30, 0x40	; 64
     a56:	fe e2       	ldi	r31, 0x2E	; 46
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <__do_copy_data+0x10>
     a5a:	05 90       	lpm	r0, Z+
     a5c:	0d 92       	st	X+, r0
     a5e:	a8 3b       	cpi	r26, 0xB8	; 184
     a60:	b1 07       	cpc	r27, r17
     a62:	d9 f7       	brne	.-10     	; 0xa5a <__do_copy_data+0xc>

00000a64 <__do_clear_bss>:
     a64:	22 e0       	ldi	r18, 0x02	; 2
     a66:	a8 eb       	ldi	r26, 0xB8	; 184
     a68:	b1 e0       	ldi	r27, 0x01	; 1
     a6a:	01 c0       	rjmp	.+2      	; 0xa6e <.do_clear_bss_start>

00000a6c <.do_clear_bss_loop>:
     a6c:	1d 92       	st	X+, r1

00000a6e <.do_clear_bss_start>:
     a6e:	a9 34       	cpi	r26, 0x49	; 73
     a70:	b2 07       	cpc	r27, r18
     a72:	e1 f7       	brne	.-8      	; 0xa6c <.do_clear_bss_loop>
     a74:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <main>
     a78:	0c 94 1e 17 	jmp	0x2e3c	; 0x2e3c <_exit>

00000a7c <__bad_interrupt>:
     a7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000a80 <sendNibble>:

//format input as 0x0z where z is the input nibble
void sendNibble(uint8_t nibble)
{
	//set up nibble to be sent
	if (nibble & 0x08) { lcd_db7_port |= (1<<lcd_db7); }
     a80:	83 ff       	sbrs	r24, 3
     a82:	02 c0       	rjmp	.+4      	; 0xa88 <sendNibble+0x8>
     a84:	5a 9a       	sbi	0x0b, 2	; 11
     a86:	01 c0       	rjmp	.+2      	; 0xa8a <sendNibble+0xa>
		else { lcd_db7_port &= ~(1<<lcd_db7); }
     a88:	5a 98       	cbi	0x0b, 2	; 11
	
	if (nibble & 0x04) { lcd_db6_port |= (1<<lcd_db6); }
     a8a:	82 ff       	sbrs	r24, 2
     a8c:	02 c0       	rjmp	.+4      	; 0xa92 <sendNibble+0x12>
     a8e:	5b 9a       	sbi	0x0b, 3	; 11
     a90:	01 c0       	rjmp	.+2      	; 0xa94 <sendNibble+0x14>
		else { lcd_db6_port &= ~(1<<lcd_db6); }
     a92:	5b 98       	cbi	0x0b, 3	; 11
			
	if (nibble & 0x02) { lcd_db5_port |= (1<<lcd_db5); }
     a94:	81 ff       	sbrs	r24, 1
     a96:	02 c0       	rjmp	.+4      	; 0xa9c <sendNibble+0x1c>
     a98:	5c 9a       	sbi	0x0b, 4	; 11
     a9a:	01 c0       	rjmp	.+2      	; 0xa9e <sendNibble+0x1e>
		else { lcd_db5_port &= ~(1<<lcd_db5); }
     a9c:	5c 98       	cbi	0x0b, 4	; 11
		
	if (nibble & 0x01) { lcd_db4_port |= (1<<lcd_db4); }
     a9e:	80 ff       	sbrs	r24, 0
     aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <sendNibble+0x26>
     aa2:	5f 9a       	sbi	0x0b, 7	; 11
     aa4:	01 c0       	rjmp	.+2      	; 0xaa8 <sendNibble+0x28>
		else { lcd_db4_port &= ~(1<<lcd_db4); }
     aa6:	5f 98       	cbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aa8:	87 ee       	ldi	r24, 0xE7	; 231
     aaa:	93 e0       	ldi	r25, 0x03	; 3
     aac:	01 97       	sbiw	r24, 0x01	; 1
     aae:	f1 f7       	brne	.-4      	; 0xaac <sendNibble+0x2c>
     ab0:	00 c0       	rjmp	.+0      	; 0xab2 <sendNibble+0x32>
     ab2:	00 00       	nop
	
	//send nibble
	_delay_us(500);
	lcd_e_port &= ~(1<<lcd_e);
     ab4:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ab6:	8f ec       	ldi	r24, 0xCF	; 207
     ab8:	97 e0       	ldi	r25, 0x07	; 7
     aba:	01 97       	sbiw	r24, 0x01	; 1
     abc:	f1 f7       	brne	.-4      	; 0xaba <sendNibble+0x3a>
     abe:	00 c0       	rjmp	.+0      	; 0xac0 <sendNibble+0x40>
     ac0:	00 00       	nop
	_delay_ms(1);
	lcd_e_port |= (1<<lcd_e);
     ac2:	5d 9a       	sbi	0x0b, 5	; 11
     ac4:	8f ec       	ldi	r24, 0xCF	; 207
     ac6:	97 e0       	ldi	r25, 0x07	; 7
     ac8:	01 97       	sbiw	r24, 0x01	; 1
     aca:	f1 f7       	brne	.-4      	; 0xac8 <sendNibble+0x48>
     acc:	00 c0       	rjmp	.+0      	; 0xace <sendNibble+0x4e>
     ace:	00 00       	nop
     ad0:	08 95       	ret

00000ad2 <intLCD>:
     ad2:	2f ef       	ldi	r18, 0xFF	; 255
     ad4:	80 e7       	ldi	r24, 0x70	; 112
     ad6:	92 e0       	ldi	r25, 0x02	; 2
     ad8:	21 50       	subi	r18, 0x01	; 1
     ada:	80 40       	sbci	r24, 0x00	; 0
     adc:	90 40       	sbci	r25, 0x00	; 0
     ade:	e1 f7       	brne	.-8      	; 0xad8 <intLCD+0x6>
     ae0:	00 c0       	rjmp	.+0      	; 0xae2 <intLCD+0x10>
     ae2:	00 00       	nop
void intLCD()
{
	//modified int routine outlined in the hd44780 datasheet for applications where the power supply can not be switched to enable the internal reset circuit (Initializing by Instruction)
	
	_delay_ms(100);
	lcd_rs_port &= ~(1<<lcd_rs);	//set rs=0 to send instructions
     ae4:	5e 98       	cbi	0x0b, 6	; 11
	
	sendNibble(0x03);	//function interface is 8 bits long
     ae6:	83 e0       	ldi	r24, 0x03	; 3
     ae8:	0e 94 40 05 	call	0xa80	; 0xa80 <sendNibble>
     aec:	8f e0       	ldi	r24, 0x0F	; 15
     aee:	97 e2       	ldi	r25, 0x27	; 39
     af0:	01 97       	sbiw	r24, 0x01	; 1
     af2:	f1 f7       	brne	.-4      	; 0xaf0 <intLCD+0x1e>
     af4:	00 c0       	rjmp	.+0      	; 0xaf6 <intLCD+0x24>
     af6:	00 00       	nop
	_delay_ms(5);
	
	sendNibble(0x03);	//function interface is 8 bits long
     af8:	83 e0       	ldi	r24, 0x03	; 3
     afa:	0e 94 40 05 	call	0xa80	; 0xa80 <sendNibble>
     afe:	8f ec       	ldi	r24, 0xCF	; 207
     b00:	97 e0       	ldi	r25, 0x07	; 7
     b02:	01 97       	sbiw	r24, 0x01	; 1
     b04:	f1 f7       	brne	.-4      	; 0xb02 <intLCD+0x30>
     b06:	00 c0       	rjmp	.+0      	; 0xb08 <intLCD+0x36>
     b08:	00 00       	nop
	_delay_ms(1);
	
	sendNibble(0x03);	//function interface is 8 bits long
     b0a:	83 e0       	ldi	r24, 0x03	; 3
     b0c:	0e 94 40 05 	call	0xa80	; 0xa80 <sendNibble>
     b10:	8f ec       	ldi	r24, 0xCF	; 207
     b12:	97 e0       	ldi	r25, 0x07	; 7
     b14:	01 97       	sbiw	r24, 0x01	; 1
     b16:	f1 f7       	brne	.-4      	; 0xb14 <intLCD+0x42>
     b18:	00 c0       	rjmp	.+0      	; 0xb1a <intLCD+0x48>
     b1a:	00 00       	nop
	_delay_ms(1);
	
	sendNibble(0x02);	//function set interface 4 bits long interface is 8 bits long
     b1c:	82 e0       	ldi	r24, 0x02	; 2
     b1e:	0e 94 40 05 	call	0xa80	; 0xa80 <sendNibble>
     b22:	8f ec       	ldi	r24, 0xCF	; 207
     b24:	97 e0       	ldi	r25, 0x07	; 7
     b26:	01 97       	sbiw	r24, 0x01	; 1
     b28:	f1 f7       	brne	.-4      	; 0xb26 <intLCD+0x54>
     b2a:	00 c0       	rjmp	.+0      	; 0xb2c <intLCD+0x5a>
     b2c:	00 00       	nop
	_delay_ms(1);
	
	sendNibble(0x02);	//function interface is 4 bits long
     b2e:	82 e0       	ldi	r24, 0x02	; 2
     b30:	0e 94 40 05 	call	0xa80	; 0xa80 <sendNibble>
	sendNibble(0x08);	//set # of display lines and charter font 8*5
     b34:	88 e0       	ldi	r24, 0x08	; 8
     b36:	0e 94 40 05 	call	0xa80	; 0xa80 <sendNibble>
     b3a:	8f ec       	ldi	r24, 0xCF	; 207
     b3c:	97 e0       	ldi	r25, 0x07	; 7
     b3e:	01 97       	sbiw	r24, 0x01	; 1
     b40:	f1 f7       	brne	.-4      	; 0xb3e <intLCD+0x6c>
     b42:	00 c0       	rjmp	.+0      	; 0xb44 <intLCD+0x72>
     b44:	00 00       	nop
	_delay_ms(1);
	
	sendNibble(0x00);	//function interface is 4 bits long
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	0e 94 40 05 	call	0xa80	; 0xa80 <sendNibble>
	sendNibble(0x08);	//display off
     b4c:	88 e0       	ldi	r24, 0x08	; 8
     b4e:	0e 94 40 05 	call	0xa80	; 0xa80 <sendNibble>
     b52:	8f ec       	ldi	r24, 0xCF	; 207
     b54:	97 e0       	ldi	r25, 0x07	; 7
     b56:	01 97       	sbiw	r24, 0x01	; 1
     b58:	f1 f7       	brne	.-4      	; 0xb56 <intLCD+0x84>
     b5a:	00 c0       	rjmp	.+0      	; 0xb5c <intLCD+0x8a>
     b5c:	00 00       	nop
	_delay_ms(1);
	
	sendNibble(0x00);	//function interface is 4 bits long
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 40 05 	call	0xa80	; 0xa80 <sendNibble>
	sendNibble(0x01);	//display clear
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	0e 94 40 05 	call	0xa80	; 0xa80 <sendNibble>
     b6a:	8f e9       	ldi	r24, 0x9F	; 159
     b6c:	9f e0       	ldi	r25, 0x0F	; 15
     b6e:	01 97       	sbiw	r24, 0x01	; 1
     b70:	f1 f7       	brne	.-4      	; 0xb6e <intLCD+0x9c>
     b72:	00 c0       	rjmp	.+0      	; 0xb74 <intLCD+0xa2>
     b74:	00 00       	nop
	_delay_ms(2);
	
	sendNibble(0x00);	//function interface is 4 bits long
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	0e 94 40 05 	call	0xa80	; 0xa80 <sendNibble>
	sendNibble(0x06);	////entry mode set increment address by 1  and shift the cursor to the right at the tine of wright to the dd/cgram, dispay is not shifted
     b7c:	86 e0       	ldi	r24, 0x06	; 6
     b7e:	0e 94 40 05 	call	0xa80	; 0xa80 <sendNibble>
     b82:	8f ec       	ldi	r24, 0xCF	; 207
     b84:	97 e0       	ldi	r25, 0x07	; 7
     b86:	01 97       	sbiw	r24, 0x01	; 1
     b88:	f1 f7       	brne	.-4      	; 0xb86 <intLCD+0xb4>
     b8a:	00 c0       	rjmp	.+0      	; 0xb8c <intLCD+0xba>
     b8c:	00 00       	nop
	_delay_ms(1);

	sendNibble(0x00);	//function interface is 4 bits long
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	0e 94 40 05 	call	0xa80	; 0xa80 <sendNibble>
	sendNibble(0x0E);	//display/cursor on space mode
     b94:	8e e0       	ldi	r24, 0x0E	; 14
     b96:	0e 94 40 05 	call	0xa80	; 0xa80 <sendNibble>
     b9a:	8f ec       	ldi	r24, 0xCF	; 207
     b9c:	97 e0       	ldi	r25, 0x07	; 7
     b9e:	01 97       	sbiw	r24, 0x01	; 1
     ba0:	f1 f7       	brne	.-4      	; 0xb9e <intLCD+0xcc>
     ba2:	00 c0       	rjmp	.+0      	; 0xba4 <intLCD+0xd2>
     ba4:	00 00       	nop
	_delay_ms(1);
	
	lcd_rs_port |= (1<<lcd_rs);	//prepare to wright data
     ba6:	5e 9a       	sbi	0x0b, 6	; 11
     ba8:	08 95       	ret

00000baa <wrightString>:
}

//wrights a string to the display. does not word wrap
void wrightString(char *stringtext)
{
     baa:	ff 92       	push	r15
     bac:	0f 93       	push	r16
     bae:	1f 93       	push	r17
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
     bb4:	ec 01       	movw	r28, r24
	lcd_rs_port |= (1<<lcd_rs);	//prepare to wright data
     bb6:	5e 9a       	sbi	0x0b, 6	; 11
	uint8_t i=0;
	uint8_t charnibble=0;
	for (i=0;i<255;i++)
	{
		if(stringtext[i]=='\0'){break;}		//if end of string break ('\0' is null)
     bb8:	88 81       	ld	r24, Y
     bba:	81 11       	cpse	r24, r1
     bbc:	12 c0       	rjmp	.+36     	; 0xbe2 <wrightString+0x38>
     bbe:	1e c0       	rjmp	.+60     	; 0xbfc <wrightString+0x52>
	
	lcd_rs_port |= (1<<lcd_rs);	//prepare to wright data
}

//wrights a string to the display. does not word wrap
void wrightString(char *stringtext)
     bc0:	8e 01       	movw	r16, r28
	lcd_rs_port |= (1<<lcd_rs);	//prepare to wright data
	uint8_t i=0;
	uint8_t charnibble=0;
	for (i=0;i<255;i++)
	{
		if(stringtext[i]=='\0'){break;}		//if end of string break ('\0' is null)
     bc2:	88 81       	ld	r24, Y
     bc4:	88 23       	and	r24, r24
     bc6:	d1 f0       	breq	.+52     	; 0xbfc <wrightString+0x52>
		charnibble=((stringtext[i] & 0xF0)>>4);	//get upper nibble of char and move it into the lower nibble for transfer
		sendNibble(charnibble);				//send upper nibble of char
     bc8:	82 95       	swap	r24
     bca:	8f 70       	andi	r24, 0x0F	; 15
     bcc:	0e 94 40 05 	call	0xa80	; 0xa80 <sendNibble>
     bd0:	21 96       	adiw	r28, 0x01	; 1
		charnibble=(stringtext[i] & 0x0F);	//get lower nibble of char
     bd2:	f8 01       	movw	r30, r16
     bd4:	80 81       	ld	r24, Z
		sendNibble(charnibble);				//send lower nibble of char
     bd6:	8f 70       	andi	r24, 0x0F	; 15
     bd8:	0e 94 40 05 	call	0xa80	; 0xa80 <sendNibble>
     bdc:	fa 94       	dec	r15
void wrightString(char *stringtext)
{
	lcd_rs_port |= (1<<lcd_rs);	//prepare to wright data
	uint8_t i=0;
	uint8_t charnibble=0;
	for (i=0;i<255;i++)
     bde:	81 f7       	brne	.-32     	; 0xbc0 <wrightString+0x16>
     be0:	0d c0       	rjmp	.+26     	; 0xbfc <wrightString+0x52>
	{
		if(stringtext[i]=='\0'){break;}		//if end of string break ('\0' is null)
		charnibble=((stringtext[i] & 0xF0)>>4);	//get upper nibble of char and move it into the lower nibble for transfer
		sendNibble(charnibble);				//send upper nibble of char
     be2:	82 95       	swap	r24
     be4:	8f 70       	andi	r24, 0x0F	; 15
     be6:	0e 94 40 05 	call	0xa80	; 0xa80 <sendNibble>
		charnibble=(stringtext[i] & 0x0F);	//get lower nibble of char
     bea:	89 91       	ld	r24, Y+
		sendNibble(charnibble);				//send lower nibble of char
     bec:	8f 70       	andi	r24, 0x0F	; 15
     bee:	0e 94 40 05 	call	0xa80	; 0xa80 <sendNibble>
	
	lcd_rs_port |= (1<<lcd_rs);	//prepare to wright data
}

//wrights a string to the display. does not word wrap
void wrightString(char *stringtext)
     bf2:	0f 2e       	mov	r0, r31
     bf4:	fe ef       	ldi	r31, 0xFE	; 254
     bf6:	ff 2e       	mov	r15, r31
     bf8:	f0 2d       	mov	r31, r0
     bfa:	e2 cf       	rjmp	.-60     	; 0xbc0 <wrightString+0x16>
		charnibble=((stringtext[i] & 0xF0)>>4);	//get upper nibble of char and move it into the lower nibble for transfer
		sendNibble(charnibble);				//send upper nibble of char
		charnibble=(stringtext[i] & 0x0F);	//get lower nibble of char
		sendNibble(charnibble);				//send lower nibble of char
	}
}
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	1f 91       	pop	r17
     c02:	0f 91       	pop	r16
     c04:	ff 90       	pop	r15
     c06:	08 95       	ret

00000c08 <setCursor>:

//row 0 is top, column 0 is left
void setCursor(uint8_t row, uint8_t column)
{
     c08:	cf 93       	push	r28
	uint8_t byte=(row*0x40)+column+0x80;
     c0a:	c6 2f       	mov	r28, r22
     c0c:	90 e4       	ldi	r25, 0x40	; 64
     c0e:	89 9f       	mul	r24, r25
     c10:	c0 0d       	add	r28, r0
     c12:	11 24       	eor	r1, r1
     c14:	c0 58       	subi	r28, 0x80	; 128
	lcd_rs_port &= ~(1<<lcd_rs);	//set rs=0 to send instructions
     c16:	5e 98       	cbi	0x0b, 6	; 11
	
	sendNibble((byte & 0xF0)>>4);	//set ddram address
     c18:	8c 2f       	mov	r24, r28
     c1a:	82 95       	swap	r24
     c1c:	8f 70       	andi	r24, 0x0F	; 15
     c1e:	0e 94 40 05 	call	0xa80	; 0xa80 <sendNibble>
	sendNibble(byte & 0x0F);	//send lower nibble of dram address
     c22:	8c 2f       	mov	r24, r28
     c24:	8f 70       	andi	r24, 0x0F	; 15
     c26:	0e 94 40 05 	call	0xa80	; 0xa80 <sendNibble>
	
	lcd_rs_port |= (1<<lcd_rs);	//prepare to wright data
     c2a:	5e 9a       	sbi	0x0b, 6	; 11
}
     c2c:	cf 91       	pop	r28
     c2e:	08 95       	ret

00000c30 <intSerial>:

//create tx complete interrupt to check if there is new data to be sent
void intSerial()
{
	/*Set baud rate */
	UBRR0H = (unsigned char)(MYUBRR>>8);
     c30:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char) MYUBRR;
     c34:	89 e1       	ldi	r24, 0x19	; 25
     c36:	80 93 c4 00 	sts	0x00C4, r24

	/* Enable receiver and transmitter   */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     c3a:	88 e1       	ldi	r24, 0x18	; 24
     c3c:	80 93 c1 00 	sts	0x00C1, r24
	/* Frame format: 8data, No parity, 1stop bit */
	UCSR0C = (3<<UCSZ00);
     c40:	86 e0       	ldi	r24, 0x06	; 6
     c42:	80 93 c2 00 	sts	0x00C2, r24
     c46:	08 95       	ret

00000c48 <checkTxReady>:
}

unsigned char checkTxReady()
{
	return( UCSR0A & 0x20 ) ;		// nonzero if transmit register is ready to receive new data.
     c48:	80 91 c0 00 	lds	r24, 0x00C0
}
     c4c:	80 72       	andi	r24, 0x20	; 32
     c4e:	08 95       	ret

00000c50 <serialWriteChar>:

void serialWriteChar(unsigned char DataOut)
{
     c50:	cf 93       	push	r28
     c52:	c8 2f       	mov	r28, r24
	while (checkTxReady() == 0)		// while NOT ready to transmit
     c54:	0e 94 24 06 	call	0xc48	; 0xc48 <checkTxReady>
     c58:	88 23       	and	r24, r24
     c5a:	e1 f3       	breq	.-8      	; 0xc54 <serialWriteChar+0x4>
	{;;}
	UDR0 = DataOut;
     c5c:	c0 93 c6 00 	sts	0x00C6, r28
}
     c60:	cf 91       	pop	r28
     c62:	08 95       	ret

00000c64 <serialWrightString>:
		serialWriteChar(buffer[i]);
	}
}

void serialWrightString(char *stringtext)
{
     c64:	1f 93       	push	r17
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	ec 01       	movw	r28, r24
	uint8_t i;
	for (i=0;i<255;i++)
	{
		if(stringtext[i]=='\0'){break;}		//if end of string break ('\0' is null)
     c6c:	88 81       	ld	r24, Y
     c6e:	81 11       	cpse	r24, r1
     c70:	09 c0       	rjmp	.+18     	; 0xc84 <serialWrightString+0x20>
     c72:	0d c0       	rjmp	.+26     	; 0xc8e <serialWrightString+0x2a>
     c74:	89 91       	ld	r24, Y+
     c76:	88 23       	and	r24, r24
     c78:	51 f0       	breq	.+20     	; 0xc8e <serialWrightString+0x2a>
		serialWriteChar(stringtext[i]);
     c7a:	0e 94 28 06 	call	0xc50	; 0xc50 <serialWriteChar>
     c7e:	11 50       	subi	r17, 0x01	; 1
}

void serialWrightString(char *stringtext)
{
	uint8_t i;
	for (i=0;i<255;i++)
     c80:	c9 f7       	brne	.-14     	; 0xc74 <serialWrightString+0x10>
     c82:	05 c0       	rjmp	.+10     	; 0xc8e <serialWrightString+0x2a>
	{
		if(stringtext[i]=='\0'){break;}		//if end of string break ('\0' is null)
		serialWriteChar(stringtext[i]);
     c84:	0e 94 28 06 	call	0xc50	; 0xc50 <serialWriteChar>
		if(buffer[i]=='\0'){break;}		//if end of string break ('\0' is null)
		serialWriteChar(buffer[i]);
	}
}

void serialWrightString(char *stringtext)
     c88:	21 96       	adiw	r28, 0x01	; 1
     c8a:	1e ef       	ldi	r17, 0xFE	; 254
     c8c:	f3 cf       	rjmp	.-26     	; 0xc74 <serialWrightString+0x10>
	for (i=0;i<255;i++)
	{
		if(stringtext[i]=='\0'){break;}		//if end of string break ('\0' is null)
		serialWriteChar(stringtext[i]);
	}
}
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	1f 91       	pop	r17
     c94:	08 95       	ret

00000c96 <adctoTemp>:
uint16_t tempTouV(uint16_t temp);


//returns a f or c value from an adc reading of a k type tc. rawADC is the avraged 10bit adc reading, degrees 1==F 0==C, ADCoffset in f due to powersupply and diffrences in thermocouples (gain is currently about av=111)
int adctoTemp(uint16_t rawADC, uint8_t degrees, float degreesfoffset, uint8_t ADCres, float ADCgain, float ADCvref)
{
     c96:	2f 92       	push	r2
     c98:	3f 92       	push	r3
     c9a:	4f 92       	push	r4
     c9c:	5f 92       	push	r5
     c9e:	6f 92       	push	r6
     ca0:	7f 92       	push	r7
     ca2:	8f 92       	push	r8
     ca4:	9f 92       	push	r9
     ca6:	af 92       	push	r10
     ca8:	bf 92       	push	r11
     caa:	cf 92       	push	r12
     cac:	df 92       	push	r13
     cae:	ef 92       	push	r14
     cb0:	ff 92       	push	r15
     cb2:	0f 93       	push	r16
     cb4:	1f 93       	push	r17
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	00 d0       	rcall	.+0      	; 0xcbc <adctoTemp+0x26>
     cbc:	00 d0       	rcall	.+0      	; 0xcbe <adctoTemp+0x28>
     cbe:	1f 92       	push	r1
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
     cc4:	3c 01       	movw	r6, r24
     cc6:	69 83       	std	Y+1, r22	; 0x01
     cc8:	2a 83       	std	Y+2, r18	; 0x02
     cca:	3b 83       	std	Y+3, r19	; 0x03
     ccc:	4c 83       	std	Y+4, r20	; 0x04
     cce:	5d 83       	std	Y+5, r21	; 0x05
	int result=0;
	float uvoltage =rawADC*((ADCvref / pow(2,ADCres))/ADCgain*1000000.0);	//uvoltage holds value in micro volts
     cd0:	60 2f       	mov	r22, r16
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__floatunsisf>
     cdc:	9b 01       	movw	r18, r22
     cde:	ac 01       	movw	r20, r24
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	90 e4       	ldi	r25, 0x40	; 64
     ce8:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <pow>
     cec:	16 2f       	mov	r17, r22
     cee:	07 2f       	mov	r16, r23
     cf0:	38 2e       	mov	r3, r24
     cf2:	29 2e       	mov	r2, r25
     cf4:	b3 01       	movw	r22, r6
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__floatunsisf>
     cfe:	2b 01       	movw	r4, r22
     d00:	3c 01       	movw	r6, r24
     d02:	21 2f       	mov	r18, r17
     d04:	30 2f       	mov	r19, r16
     d06:	43 2d       	mov	r20, r3
     d08:	52 2d       	mov	r21, r2
     d0a:	c5 01       	movw	r24, r10
     d0c:	b4 01       	movw	r22, r8
     d0e:	0e 94 46 11 	call	0x228c	; 0x228c <__divsf3>
     d12:	a7 01       	movw	r20, r14
     d14:	96 01       	movw	r18, r12
     d16:	0e 94 46 11 	call	0x228c	; 0x228c <__divsf3>
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	34 e2       	ldi	r19, 0x24	; 36
     d1e:	44 e7       	ldi	r20, 0x74	; 116
     d20:	59 e4       	ldi	r21, 0x49	; 73
     d22:	0e 94 90 12 	call	0x2520	; 0x2520 <__mulsf3>
     d26:	9b 01       	movw	r18, r22
     d28:	ac 01       	movw	r20, r24
     d2a:	c3 01       	movw	r24, r6
     d2c:	b2 01       	movw	r22, r4
     d2e:	0e 94 90 12 	call	0x2520	; 0x2520 <__mulsf3>
	uint16_t intuvoltage=(uint16_t)(uvoltage);//truncate into an integer to speed things up a bit
     d32:	0e 94 ae 11 	call	0x235c	; 0x235c <__fixunssfsi>
	intuvoltage += degreesfoffset*23.0;
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__floatunsisf>
     d3e:	6b 01       	movw	r12, r22
     d40:	7c 01       	movw	r14, r24
     d42:	20 e0       	ldi	r18, 0x00	; 0
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	48 eb       	ldi	r20, 0xB8	; 184
     d48:	51 e4       	ldi	r21, 0x41	; 65
     d4a:	6a 81       	ldd	r22, Y+2	; 0x02
     d4c:	7b 81       	ldd	r23, Y+3	; 0x03
     d4e:	8c 81       	ldd	r24, Y+4	; 0x04
     d50:	9d 81       	ldd	r25, Y+5	; 0x05
     d52:	0e 94 90 12 	call	0x2520	; 0x2520 <__mulsf3>
     d56:	9b 01       	movw	r18, r22
     d58:	ac 01       	movw	r20, r24
     d5a:	c7 01       	movw	r24, r14
     d5c:	b6 01       	movw	r22, r12
     d5e:	0e 94 de 10 	call	0x21bc	; 0x21bc <__addsf3>
     d62:	0e 94 ae 11 	call	0x235c	; 0x235c <__fixunssfsi>
	
	uint16_t index;
	for (index=0;index<1070;index++)	//look threw table
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	90 e0       	ldi	r25, 0x00	; 0
	{
		if (intuvoltage>=pgm_read_word(&lookuptable[index]) && intuvoltage<=pgm_read_word(&lookuptable[index+1]))		
     d6a:	fc 01       	movw	r30, r24
     d6c:	ee 0f       	add	r30, r30
     d6e:	ff 1f       	adc	r31, r31
     d70:	e6 51       	subi	r30, 0x16	; 22
     d72:	ff 4f       	sbci	r31, 0xFF	; 255
     d74:	25 91       	lpm	r18, Z+
     d76:	34 91       	lpm	r19, Z
     d78:	62 17       	cp	r22, r18
     d7a:	73 07       	cpc	r23, r19
     d7c:	70 f0       	brcs	.+28     	; 0xd9a <adctoTemp+0x104>
     d7e:	fc 01       	movw	r30, r24
     d80:	ee 0f       	add	r30, r30
     d82:	ff 1f       	adc	r31, r31
     d84:	e4 51       	subi	r30, 0x14	; 20
     d86:	ff 4f       	sbci	r31, 0xFF	; 255
     d88:	25 91       	lpm	r18, Z+
     d8a:	34 91       	lpm	r19, Z
     d8c:	26 17       	cp	r18, r22
     d8e:	37 07       	cpc	r19, r23
     d90:	20 f0       	brcs	.+8      	; 0xd9a <adctoTemp+0x104>
		{
			result=index-60;
     d92:	9c 01       	movw	r18, r24
     d94:	2c 53       	subi	r18, 0x3C	; 60
     d96:	31 09       	sbc	r19, r1
			break;
     d98:	07 c0       	rjmp	.+14     	; 0xda8 <adctoTemp+0x112>
	float uvoltage =rawADC*((ADCvref / pow(2,ADCres))/ADCgain*1000000.0);	//uvoltage holds value in micro volts
	uint16_t intuvoltage=(uint16_t)(uvoltage);//truncate into an integer to speed things up a bit
	intuvoltage += degreesfoffset*23.0;
	
	uint16_t index;
	for (index=0;index<1070;index++)	//look threw table
     d9a:	01 96       	adiw	r24, 0x01	; 1
     d9c:	8e 32       	cpi	r24, 0x2E	; 46
     d9e:	24 e0       	ldi	r18, 0x04	; 4
     da0:	92 07       	cpc	r25, r18
     da2:	19 f7       	brne	.-58     	; 0xd6a <adctoTemp+0xd4>


//returns a f or c value from an adc reading of a k type tc. rawADC is the avraged 10bit adc reading, degrees 1==F 0==C, ADCoffset in f due to powersupply and diffrences in thermocouples (gain is currently about av=111)
int adctoTemp(uint16_t rawADC, uint8_t degrees, float degreesfoffset, uint8_t ADCres, float ADCgain, float ADCvref)
{
	int result=0;
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
			break;
		}
	}
	
	//if result is in c instead of f convert
	if (!degrees)
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	81 11       	cpse	r24, r1
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <adctoTemp+0x11c>
	{
		result=(result-32)*(5/9);
     dae:	20 e0       	ldi	r18, 0x00	; 0
     db0:	30 e0       	ldi	r19, 0x00	; 0
	}

	return result;
}
     db2:	82 2f       	mov	r24, r18
     db4:	93 2f       	mov	r25, r19
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	1f 91       	pop	r17
     dc6:	0f 91       	pop	r16
     dc8:	ff 90       	pop	r15
     dca:	ef 90       	pop	r14
     dcc:	df 90       	pop	r13
     dce:	cf 90       	pop	r12
     dd0:	bf 90       	pop	r11
     dd2:	af 90       	pop	r10
     dd4:	9f 90       	pop	r9
     dd6:	8f 90       	pop	r8
     dd8:	7f 90       	pop	r7
     dda:	6f 90       	pop	r6
     ddc:	5f 90       	pop	r5
     dde:	4f 90       	pop	r4
     de0:	3f 90       	pop	r3
     de2:	2f 90       	pop	r2
     de4:	08 95       	ret

00000de6 <adctouV>:



uint16_t adctouV(uint16_t rawADC, uint8_t ADCres, float ADCgain, float ADCvref)
{
     de6:	2f 92       	push	r2
     de8:	3f 92       	push	r3
     dea:	4f 92       	push	r4
     dec:	5f 92       	push	r5
     dee:	6f 92       	push	r6
     df0:	7f 92       	push	r7
     df2:	8f 92       	push	r8
     df4:	9f 92       	push	r9
     df6:	af 92       	push	r10
     df8:	bf 92       	push	r11
     dfa:	cf 92       	push	r12
     dfc:	df 92       	push	r13
     dfe:	ef 92       	push	r14
     e00:	ff 92       	push	r15
     e02:	0f 93       	push	r16
     e04:	1f 93       	push	r17
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	ec 01       	movw	r28, r24
     e0c:	49 01       	movw	r8, r18
     e0e:	5a 01       	movw	r10, r20
     e10:	67 01       	movw	r12, r14
     e12:	78 01       	movw	r14, r16
	float uvoltage =rawADC*((ADCvref / pow(2,ADCres))/ADCgain*1000000.0);	//uvoltage holds value in micro volts
     e14:	70 e0       	ldi	r23, 0x00	; 0
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__floatunsisf>
     e1e:	9b 01       	movw	r18, r22
     e20:	ac 01       	movw	r20, r24
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	90 e4       	ldi	r25, 0x40	; 64
     e2a:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <pow>
     e2e:	26 2e       	mov	r2, r22
     e30:	37 2e       	mov	r3, r23
     e32:	08 2f       	mov	r16, r24
     e34:	19 2f       	mov	r17, r25
     e36:	be 01       	movw	r22, r28
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__floatunsisf>
     e40:	2b 01       	movw	r4, r22
     e42:	3c 01       	movw	r6, r24
     e44:	22 2d       	mov	r18, r2
     e46:	33 2d       	mov	r19, r3
     e48:	40 2f       	mov	r20, r16
     e4a:	51 2f       	mov	r21, r17
     e4c:	c7 01       	movw	r24, r14
     e4e:	b6 01       	movw	r22, r12
     e50:	0e 94 46 11 	call	0x228c	; 0x228c <__divsf3>
     e54:	a5 01       	movw	r20, r10
     e56:	94 01       	movw	r18, r8
     e58:	0e 94 46 11 	call	0x228c	; 0x228c <__divsf3>
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	34 e2       	ldi	r19, 0x24	; 36
     e60:	44 e7       	ldi	r20, 0x74	; 116
     e62:	59 e4       	ldi	r21, 0x49	; 73
     e64:	0e 94 90 12 	call	0x2520	; 0x2520 <__mulsf3>
     e68:	9b 01       	movw	r18, r22
     e6a:	ac 01       	movw	r20, r24
     e6c:	c3 01       	movw	r24, r6
     e6e:	b2 01       	movw	r22, r4
     e70:	0e 94 90 12 	call	0x2520	; 0x2520 <__mulsf3>
	uint16_t intuvoltage=(uint16_t)(uvoltage);//truncate into an integer to speed things up a bit
     e74:	0e 94 ae 11 	call	0x235c	; 0x235c <__fixunssfsi>
	return intuvoltage;
}
     e78:	86 2f       	mov	r24, r22
     e7a:	97 2f       	mov	r25, r23
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	1f 91       	pop	r17
     e82:	0f 91       	pop	r16
     e84:	ff 90       	pop	r15
     e86:	ef 90       	pop	r14
     e88:	df 90       	pop	r13
     e8a:	cf 90       	pop	r12
     e8c:	bf 90       	pop	r11
     e8e:	af 90       	pop	r10
     e90:	9f 90       	pop	r9
     e92:	8f 90       	pop	r8
     e94:	7f 90       	pop	r7
     e96:	6f 90       	pop	r6
     e98:	5f 90       	pop	r5
     e9a:	4f 90       	pop	r4
     e9c:	3f 90       	pop	r3
     e9e:	2f 90       	pop	r2
     ea0:	08 95       	ret

00000ea2 <tempTouV>:

uint16_t tempTouV(uint16_t temp)
{
	uint16_t result;
	result=pgm_read_word(&lookuptable[temp+60]);
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	fc 01       	movw	r30, r24
     ea8:	ee 59       	subi	r30, 0x9E	; 158
     eaa:	fe 4f       	sbci	r31, 0xFE	; 254
     eac:	25 91       	lpm	r18, Z+
     eae:	34 91       	lpm	r19, Z
	return result;
}
     eb0:	82 2f       	mov	r24, r18
     eb2:	93 2f       	mov	r25, r19
     eb4:	08 95       	ret

00000eb6 <updateHeaterPWM>:
	uint32_t volatile twentieth_seconds;

	
	
	void updateHeaterPWM(uint8_t h1percent, uint8_t h2percent)
	{
     eb6:	1f 93       	push	r17
     eb8:	cf 93       	push	r28
     eba:	df 93       	push	r29
     ebc:	00 d0       	rcall	.+0      	; 0xebe <updateHeaterPWM+0x8>
     ebe:	00 d0       	rcall	.+0      	; 0xec0 <updateHeaterPWM+0xa>
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	16 2f       	mov	r17, r22
		uint16_t volatile heater1pwmcounts=0;
     ec6:	1a 82       	std	Y+2, r1	; 0x02
     ec8:	19 82       	std	Y+1, r1	; 0x01
		uint16_t volatile heater2pwmcounts=0;
     eca:	1c 82       	std	Y+4, r1	; 0x04
     ecc:	1b 82       	std	Y+3, r1	; 0x03
		heater1pwmcounts = 2.4*h1percent;
     ece:	68 2f       	mov	r22, r24
     ed0:	70 e0       	ldi	r23, 0x00	; 0
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__floatsisf>
     eda:	2a e9       	ldi	r18, 0x9A	; 154
     edc:	39 e9       	ldi	r19, 0x99	; 153
     ede:	49 e1       	ldi	r20, 0x19	; 25
     ee0:	50 e4       	ldi	r21, 0x40	; 64
     ee2:	0e 94 90 12 	call	0x2520	; 0x2520 <__mulsf3>
     ee6:	0e 94 ae 11 	call	0x235c	; 0x235c <__fixunssfsi>
     eea:	7a 83       	std	Y+2, r23	; 0x02
     eec:	69 83       	std	Y+1, r22	; 0x01
		heater2pwmcounts = 2.4*h2percent;
     eee:	61 2f       	mov	r22, r17
     ef0:	70 e0       	ldi	r23, 0x00	; 0
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__floatsisf>
     efa:	2a e9       	ldi	r18, 0x9A	; 154
     efc:	39 e9       	ldi	r19, 0x99	; 153
     efe:	49 e1       	ldi	r20, 0x19	; 25
     f00:	50 e4       	ldi	r21, 0x40	; 64
     f02:	0e 94 90 12 	call	0x2520	; 0x2520 <__mulsf3>
     f06:	0e 94 ae 11 	call	0x235c	; 0x235c <__fixunssfsi>
     f0a:	7c 83       	std	Y+4, r23	; 0x04
     f0c:	6b 83       	std	Y+3, r22	; 0x03
		
		if (!AC_DC_Select)	//if ==1 AC if ==0 DC
		{
			//pwm stuff--------------------------
	
			if (!heater1onoff)	//if heater is off tell pwm to coolit
     f0e:	80 91 fa 01 	lds	r24, 0x01FA
     f12:	81 11       	cpse	r24, r1
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <updateHeaterPWM+0x64>
			{
	
				PORTB &= ~(1<<Heater1); //turn heater off
     f16:	29 98       	cbi	0x05, 1	; 5
     f18:	0c c0       	rjmp	.+24     	; 0xf32 <updateHeaterPWM+0x7c>
		
			}else{		//if the heater is on we may need to apply power
				if (softpwmcounter<=heater1pwmcounts)
     f1a:	20 91 e2 01 	lds	r18, 0x01E2
     f1e:	30 91 e3 01 	lds	r19, 0x01E3
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	9a 81       	ldd	r25, Y+2	; 0x02
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	10 f0       	brcs	.+4      	; 0xf30 <updateHeaterPWM+0x7a>
				{
					PORTB |= (1<<Heater1);//set heater on
     f2c:	29 9a       	sbi	0x05, 1	; 5
     f2e:	01 c0       	rjmp	.+2      	; 0xf32 <updateHeaterPWM+0x7c>
				}else
				{
					PORTB &= ~(1<<Heater1); //turn heater off
     f30:	29 98       	cbi	0x05, 1	; 5
				}
			}
	
	
			if (!heater2onoff)	//if heater is off tell pwm to coolit
     f32:	80 91 f9 01 	lds	r24, 0x01F9
     f36:	81 11       	cpse	r24, r1
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <updateHeaterPWM+0x88>
			{
		
				PORTB &= ~(1<<Heater2); //turn heater off
     f3a:	2a 98       	cbi	0x05, 2	; 5
     f3c:	10 c0       	rjmp	.+32     	; 0xf5e <updateHeaterPWM+0xa8>
		
			}else{
				if ( softpwmcounter >= (240 - heater2pwmcounts) )	//uses back side of pwm cycle to reeduce peek current when possable
     f3e:	4b 81       	ldd	r20, Y+3	; 0x03
     f40:	5c 81       	ldd	r21, Y+4	; 0x04
     f42:	80 91 e2 01 	lds	r24, 0x01E2
     f46:	90 91 e3 01 	lds	r25, 0x01E3
     f4a:	20 ef       	ldi	r18, 0xF0	; 240
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	24 1b       	sub	r18, r20
     f50:	35 0b       	sbc	r19, r21
     f52:	82 17       	cp	r24, r18
     f54:	93 07       	cpc	r25, r19
     f56:	10 f0       	brcs	.+4      	; 0xf5c <updateHeaterPWM+0xa6>
				{
					PORTB |= (1<<Heater2);//set heater on
     f58:	2a 9a       	sbi	0x05, 2	; 5
     f5a:	01 c0       	rjmp	.+2      	; 0xf5e <updateHeaterPWM+0xa8>
				}else
				{
					PORTB &= ~(1<<Heater2); //turn heater off
     f5c:	2a 98       	cbi	0x05, 2	; 5
				}
			}
	
	
			if (softpwmcounter<240)//240 counts max because the adc is running at 125khz with a prescaler of 64 and each convertion takes 13 cycles giveing us a pwm of roufly 20hz
     f5e:	80 91 e2 01 	lds	r24, 0x01E2
     f62:	90 91 e3 01 	lds	r25, 0x01E3
     f66:	80 3f       	cpi	r24, 0xF0	; 240
     f68:	91 05       	cpc	r25, r1
     f6a:	50 f4       	brcc	.+20     	; 0xf80 <updateHeaterPWM+0xca>
			{
				softpwmcounter++;
     f6c:	80 91 e2 01 	lds	r24, 0x01E2
     f70:	90 91 e3 01 	lds	r25, 0x01E3
     f74:	01 96       	adiw	r24, 0x01	; 1
     f76:	90 93 e3 01 	sts	0x01E3, r25
     f7a:	80 93 e2 01 	sts	0x01E2, r24
     f7e:	39 c0       	rjmp	.+114    	; 0xff2 <updateHeaterPWM+0x13c>
			}else
			{
				softpwmcounter=0;
     f80:	10 92 e3 01 	sts	0x01E3, r1
     f84:	10 92 e2 01 	sts	0x01E2, r1
				twentieth_seconds++;
     f88:	80 91 2d 02 	lds	r24, 0x022D
     f8c:	90 91 2e 02 	lds	r25, 0x022E
     f90:	a0 91 2f 02 	lds	r26, 0x022F
     f94:	b0 91 30 02 	lds	r27, 0x0230
     f98:	01 96       	adiw	r24, 0x01	; 1
     f9a:	a1 1d       	adc	r26, r1
     f9c:	b1 1d       	adc	r27, r1
     f9e:	80 93 2d 02 	sts	0x022D, r24
     fa2:	90 93 2e 02 	sts	0x022E, r25
     fa6:	a0 93 2f 02 	sts	0x022F, r26
     faa:	b0 93 30 02 	sts	0x0230, r27
				if (twentieth_seconds%400==0)	//every thirty seckonds	check to see if the heater temp has changed and if so update it in eeprom	****************************************************************
     fae:	60 91 2d 02 	lds	r22, 0x022D
     fb2:	70 91 2e 02 	lds	r23, 0x022E
     fb6:	80 91 2f 02 	lds	r24, 0x022F
     fba:	90 91 30 02 	lds	r25, 0x0230
     fbe:	20 e9       	ldi	r18, 0x90	; 144
     fc0:	31 e0       	ldi	r19, 0x01	; 1
     fc2:	40 e0       	ldi	r20, 0x00	; 0
     fc4:	50 e0       	ldi	r21, 0x00	; 0
     fc6:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__udivmodsi4>
     fca:	67 2b       	or	r22, r23
     fcc:	68 2b       	or	r22, r24
     fce:	69 2b       	or	r22, r25
     fd0:	81 f4       	brne	.+32     	; 0xff2 <updateHeaterPWM+0x13c>
				{
					eeprom_update_word (&eepromsettempheater1,settempheater1);	//put settempheater1 into eepromsettempheater1 if it has changed
     fd2:	60 91 e8 01 	lds	r22, 0x01E8
     fd6:	70 91 e9 01 	lds	r23, 0x01E9
     fda:	82 e0       	ldi	r24, 0x02	; 2
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	0e 94 a1 14 	call	0x2942	; 0x2942 <__eeupd_word_m328p>
					eeprom_update_word (&eepromsettempheater2,settempheater2);	//put settempheater2 into eepromsettempheater2 if it has changed
     fe2:	60 91 e6 01 	lds	r22, 0x01E6
     fe6:	70 91 e7 01 	lds	r23, 0x01E7
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	0e 94 a1 14 	call	0x2942	; 0x2942 <__eeupd_word_m328p>
			//end pwm stuff----------------------
		}else
		{
		//AC Heater Pwm Update------------------------------------------------------
		}
	}
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28
     ffe:	1f 91       	pop	r17
    1000:	08 95       	ret

00001002 <calculateOutput>:

uint8_t calculateOutput(float currentvalue, float setpoint);
uint8_t h2calculateOutput(float currentvalue, float setpoint);

uint8_t calculateOutput(float currentvalue, float setpoint)
{
    1002:	4f 92       	push	r4
    1004:	5f 92       	push	r5
    1006:	6f 92       	push	r6
    1008:	7f 92       	push	r7
    100a:	8f 92       	push	r8
    100c:	9f 92       	push	r9
    100e:	af 92       	push	r10
    1010:	bf 92       	push	r11
    1012:	cf 92       	push	r12
    1014:	df 92       	push	r13
    1016:	ef 92       	push	r14
    1018:	ff 92       	push	r15
    101a:	4b 01       	movw	r8, r22
    101c:	5c 01       	movw	r10, r24
    101e:	69 01       	movw	r12, r18
    1020:	7a 01       	movw	r14, r20

	if (setpoint!=0)
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	a9 01       	movw	r20, r18
    1028:	c7 01       	movw	r24, r14
    102a:	b6 01       	movw	r22, r12
    102c:	0e 94 42 11 	call	0x2284	; 0x2284 <__cmpsf2>
    1030:	88 23       	and	r24, r24
    1032:	09 f4       	brne	.+2      	; 0x1036 <calculateOutput+0x34>
    1034:	ff c0       	rjmp	.+510    	; 0x1234 <calculateOutput+0x232>
	{
		if (cooldown_i_Setpoint<currentvalue-setpoint)	//if iron needs to cool down take i away to be sure that iron turns off
    1036:	a7 01       	movw	r20, r14
    1038:	96 01       	movw	r18, r12
    103a:	c5 01       	movw	r24, r10
    103c:	b4 01       	movw	r22, r8
    103e:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__subsf3>
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e8       	ldi	r19, 0x80	; 128
    1046:	41 e9       	ldi	r20, 0x91	; 145
    1048:	54 e4       	ldi	r21, 0x44	; 68
    104a:	0e 94 8c 12 	call	0x2518	; 0x2518 <__gesf2>
    104e:	18 16       	cp	r1, r24
    1050:	64 f4       	brge	.+24     	; 0x106a <calculateOutput+0x68>
		{
			integral=0;
    1052:	10 92 de 01 	sts	0x01DE, r1
    1056:	10 92 df 01 	sts	0x01DF, r1
    105a:	10 92 e0 01 	sts	0x01E0, r1
    105e:	10 92 e1 01 	sts	0x01E1, r1
			coolingflag=1;
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	80 93 b9 01 	sts	0x01B9, r24
    1068:	86 c0       	rjmp	.+268    	; 0x1176 <calculateOutput+0x174>
		}else {											//if the heater is just coming off of a cooling cycle set some integral to be sure that it does not undershoot
			if (coolingflag==1)
    106a:	80 91 b9 01 	lds	r24, 0x01B9
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	09 f0       	breq	.+2      	; 0x1074 <calculateOutput+0x72>
    1072:	81 c0       	rjmp	.+258    	; 0x1176 <calculateOutput+0x174>
			{
				coolingflag=0;
    1074:	10 92 b9 01 	sts	0x01B9, r1
				
				if (setpoint<400*23)
    1078:	20 e0       	ldi	r18, 0x00	; 0
    107a:	30 ec       	ldi	r19, 0xC0	; 192
    107c:	4f e0       	ldi	r20, 0x0F	; 15
    107e:	56 e4       	ldi	r21, 0x46	; 70
    1080:	c7 01       	movw	r24, r14
    1082:	b6 01       	movw	r22, r12
    1084:	0e 94 42 11 	call	0x2284	; 0x2284 <__cmpsf2>
    1088:	88 23       	and	r24, r24
    108a:	6c f4       	brge	.+26     	; 0x10a6 <calculateOutput+0xa4>
				{
					integral=cooldown_i_350FSetpower;
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	97 ec       	ldi	r25, 0xC7	; 199
    1090:	a5 e6       	ldi	r26, 0x65	; 101
    1092:	b7 e4       	ldi	r27, 0x47	; 71
    1094:	80 93 de 01 	sts	0x01DE, r24
    1098:	90 93 df 01 	sts	0x01DF, r25
    109c:	a0 93 e0 01 	sts	0x01E0, r26
    10a0:	b0 93 e1 01 	sts	0x01E1, r27
    10a4:	68 c0       	rjmp	.+208    	; 0x1176 <calculateOutput+0x174>
				}else if (setpoint<500*23)
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	30 eb       	ldi	r19, 0xB0	; 176
    10aa:	43 e3       	ldi	r20, 0x33	; 51
    10ac:	56 e4       	ldi	r21, 0x46	; 70
    10ae:	c7 01       	movw	r24, r14
    10b0:	b6 01       	movw	r22, r12
    10b2:	0e 94 42 11 	call	0x2284	; 0x2284 <__cmpsf2>
    10b6:	88 23       	and	r24, r24
    10b8:	6c f4       	brge	.+26     	; 0x10d4 <calculateOutput+0xd2>
				{
					integral=cooldown_i_450FSetpower;
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	94 e4       	ldi	r25, 0x44	; 68
    10be:	a1 e7       	ldi	r26, 0x71	; 113
    10c0:	b7 e4       	ldi	r27, 0x47	; 71
    10c2:	80 93 de 01 	sts	0x01DE, r24
    10c6:	90 93 df 01 	sts	0x01DF, r25
    10ca:	a0 93 e0 01 	sts	0x01E0, r26
    10ce:	b0 93 e1 01 	sts	0x01E1, r27
    10d2:	51 c0       	rjmp	.+162    	; 0x1176 <calculateOutput+0x174>
				}else if (setpoint<600*23)
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 ea       	ldi	r19, 0xA0	; 160
    10d8:	47 e5       	ldi	r20, 0x57	; 87
    10da:	56 e4       	ldi	r21, 0x46	; 70
    10dc:	c7 01       	movw	r24, r14
    10de:	b6 01       	movw	r22, r12
    10e0:	0e 94 42 11 	call	0x2284	; 0x2284 <__cmpsf2>
    10e4:	88 23       	and	r24, r24
    10e6:	6c f4       	brge	.+26     	; 0x1102 <calculateOutput+0x100>
				{
					integral=cooldown_i_550FSetpower;
    10e8:	80 e8       	ldi	r24, 0x80	; 128
    10ea:	99 e1       	ldi	r25, 0x19	; 25
    10ec:	ab e9       	ldi	r26, 0x9B	; 155
    10ee:	b7 e4       	ldi	r27, 0x47	; 71
    10f0:	80 93 de 01 	sts	0x01DE, r24
    10f4:	90 93 df 01 	sts	0x01DF, r25
    10f8:	a0 93 e0 01 	sts	0x01E0, r26
    10fc:	b0 93 e1 01 	sts	0x01E1, r27
    1100:	3a c0       	rjmp	.+116    	; 0x1176 <calculateOutput+0x174>
				}else if (setpoint<700*23)
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e9       	ldi	r19, 0x90	; 144
    1106:	4b e7       	ldi	r20, 0x7B	; 123
    1108:	56 e4       	ldi	r21, 0x46	; 70
    110a:	c7 01       	movw	r24, r14
    110c:	b6 01       	movw	r22, r12
    110e:	0e 94 42 11 	call	0x2284	; 0x2284 <__cmpsf2>
    1112:	88 23       	and	r24, r24
    1114:	6c f4       	brge	.+26     	; 0x1130 <calculateOutput+0x12e>
				{
					integral=cooldown_i_650FSetpower;
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	91 e9       	ldi	r25, 0x91	; 145
    111a:	ad eb       	ldi	r26, 0xBD	; 189
    111c:	b7 e4       	ldi	r27, 0x47	; 71
    111e:	80 93 de 01 	sts	0x01DE, r24
    1122:	90 93 df 01 	sts	0x01DF, r25
    1126:	a0 93 e0 01 	sts	0x01E0, r26
    112a:	b0 93 e1 01 	sts	0x01E1, r27
    112e:	23 c0       	rjmp	.+70     	; 0x1176 <calculateOutput+0x174>
				}else if (setpoint<800*23)
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 ec       	ldi	r19, 0xC0	; 192
    1134:	4f e8       	ldi	r20, 0x8F	; 143
    1136:	56 e4       	ldi	r21, 0x46	; 70
    1138:	c7 01       	movw	r24, r14
    113a:	b6 01       	movw	r22, r12
    113c:	0e 94 42 11 	call	0x2284	; 0x2284 <__cmpsf2>
    1140:	88 23       	and	r24, r24
    1142:	6c f4       	brge	.+26     	; 0x115e <calculateOutput+0x15c>
				{
					integral=cooldown_i_750FSetpower;
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	96 e8       	ldi	r25, 0x86	; 134
    1148:	ab ee       	ldi	r26, 0xEB	; 235
    114a:	b7 e4       	ldi	r27, 0x47	; 71
    114c:	80 93 de 01 	sts	0x01DE, r24
    1150:	90 93 df 01 	sts	0x01DF, r25
    1154:	a0 93 e0 01 	sts	0x01E0, r26
    1158:	b0 93 e1 01 	sts	0x01E1, r27
    115c:	0c c0       	rjmp	.+24     	; 0x1176 <calculateOutput+0x174>
				}else
				{
					integral=cooldown_i_800FSetpower;
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	90 e4       	ldi	r25, 0x40	; 64
    1162:	a1 e0       	ldi	r26, 0x01	; 1
    1164:	b8 e4       	ldi	r27, 0x48	; 72
    1166:	80 93 de 01 	sts	0x01DE, r24
    116a:	90 93 df 01 	sts	0x01DF, r25
    116e:	a0 93 e0 01 	sts	0x01E0, r26
    1172:	b0 93 e1 01 	sts	0x01E1, r27
				
			}
		}
	
	
		pid_error = setpoint-currentvalue;
    1176:	a5 01       	movw	r20, r10
    1178:	94 01       	movw	r18, r8
    117a:	c7 01       	movw	r24, r14
    117c:	b6 01       	movw	r22, r12
    117e:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__subsf3>
    1182:	46 2f       	mov	r20, r22
    1184:	57 2f       	mov	r21, r23
    1186:	68 2f       	mov	r22, r24
    1188:	79 2f       	mov	r23, r25
    118a:	40 93 ce 01 	sts	0x01CE, r20
    118e:	50 93 cf 01 	sts	0x01CF, r21
    1192:	60 93 d0 01 	sts	0x01D0, r22
    1196:	70 93 d1 01 	sts	0x01D1, r23
		integral = integral+pid_error;
    119a:	60 91 de 01 	lds	r22, 0x01DE
    119e:	70 91 df 01 	lds	r23, 0x01DF
    11a2:	80 91 e0 01 	lds	r24, 0x01E0
    11a6:	90 91 e1 01 	lds	r25, 0x01E1
    11aa:	20 91 ce 01 	lds	r18, 0x01CE
    11ae:	30 91 cf 01 	lds	r19, 0x01CF
    11b2:	40 91 d0 01 	lds	r20, 0x01D0
    11b6:	50 91 d1 01 	lds	r21, 0x01D1
    11ba:	0e 94 de 10 	call	0x21bc	; 0x21bc <__addsf3>
    11be:	46 2f       	mov	r20, r22
    11c0:	57 2f       	mov	r21, r23
    11c2:	68 2f       	mov	r22, r24
    11c4:	79 2f       	mov	r23, r25
    11c6:	40 93 de 01 	sts	0x01DE, r20
    11ca:	50 93 df 01 	sts	0x01DF, r21
    11ce:	60 93 e0 01 	sts	0x01E0, r22
    11d2:	70 93 e1 01 	sts	0x01E1, r23
		derivative = pid_error - lasterror;
    11d6:	60 91 ce 01 	lds	r22, 0x01CE
    11da:	70 91 cf 01 	lds	r23, 0x01CF
    11de:	80 91 d0 01 	lds	r24, 0x01D0
    11e2:	90 91 d1 01 	lds	r25, 0x01D1
    11e6:	20 91 d6 01 	lds	r18, 0x01D6
    11ea:	30 91 d7 01 	lds	r19, 0x01D7
    11ee:	40 91 d8 01 	lds	r20, 0x01D8
    11f2:	50 91 d9 01 	lds	r21, 0x01D9
    11f6:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__subsf3>
    11fa:	46 2f       	mov	r20, r22
    11fc:	57 2f       	mov	r21, r23
    11fe:	68 2f       	mov	r22, r24
    1200:	79 2f       	mov	r23, r25
    1202:	40 93 da 01 	sts	0x01DA, r20
    1206:	50 93 db 01 	sts	0x01DB, r21
    120a:	60 93 dc 01 	sts	0x01DC, r22
    120e:	70 93 dd 01 	sts	0x01DD, r23
		lasterror=pid_error;
    1212:	80 91 ce 01 	lds	r24, 0x01CE
    1216:	90 91 cf 01 	lds	r25, 0x01CF
    121a:	a0 91 d0 01 	lds	r26, 0x01D0
    121e:	b0 91 d1 01 	lds	r27, 0x01D1
    1222:	80 93 d6 01 	sts	0x01D6, r24
    1226:	90 93 d7 01 	sts	0x01D7, r25
    122a:	a0 93 d8 01 	sts	0x01D8, r26
    122e:	b0 93 d9 01 	sts	0x01D9, r27
    1232:	20 c0       	rjmp	.+64     	; 0x1274 <calculateOutput+0x272>
	}else
	{
		integral = 0;
    1234:	10 92 de 01 	sts	0x01DE, r1
    1238:	10 92 df 01 	sts	0x01DF, r1
    123c:	10 92 e0 01 	sts	0x01E0, r1
    1240:	10 92 e1 01 	sts	0x01E1, r1
		derivative = 0;
    1244:	10 92 da 01 	sts	0x01DA, r1
    1248:	10 92 db 01 	sts	0x01DB, r1
    124c:	10 92 dc 01 	sts	0x01DC, r1
    1250:	10 92 dd 01 	sts	0x01DD, r1
		lasterror = 0;
    1254:	10 92 d6 01 	sts	0x01D6, r1
    1258:	10 92 d7 01 	sts	0x01D7, r1
    125c:	10 92 d8 01 	sts	0x01D8, r1
    1260:	10 92 d9 01 	sts	0x01D9, r1
		pid_error=0;
    1264:	10 92 ce 01 	sts	0x01CE, r1
    1268:	10 92 cf 01 	sts	0x01CF, r1
    126c:	10 92 d0 01 	sts	0x01D0, r1
    1270:	10 92 d1 01 	sts	0x01D1, r1
	}
	
	pid_output=(pid_error*pid_p) + (integral*pid_i) + (derivative*pid_d);
    1274:	60 91 ce 01 	lds	r22, 0x01CE
    1278:	70 91 cf 01 	lds	r23, 0x01CF
    127c:	80 91 d0 01 	lds	r24, 0x01D0
    1280:	90 91 d1 01 	lds	r25, 0x01D1
    1284:	40 90 de 01 	lds	r4, 0x01DE
    1288:	50 90 df 01 	lds	r5, 0x01DF
    128c:	60 90 e0 01 	lds	r6, 0x01E0
    1290:	70 90 e1 01 	lds	r7, 0x01E1
    1294:	80 90 da 01 	lds	r8, 0x01DA
    1298:	90 90 db 01 	lds	r9, 0x01DB
    129c:	a0 90 dc 01 	lds	r10, 0x01DC
    12a0:	b0 90 dd 01 	lds	r11, 0x01DD
    12a4:	20 e6       	ldi	r18, 0x60	; 96
    12a6:	35 ee       	ldi	r19, 0xE5	; 229
    12a8:	40 ed       	ldi	r20, 0xD0	; 208
    12aa:	5c e3       	ldi	r21, 0x3C	; 60
    12ac:	0e 94 90 12 	call	0x2520	; 0x2520 <__mulsf3>
    12b0:	6b 01       	movw	r12, r22
    12b2:	7c 01       	movw	r14, r24
    12b4:	24 e3       	ldi	r18, 0x34	; 52
    12b6:	30 e8       	ldi	r19, 0x80	; 128
    12b8:	47 e3       	ldi	r20, 0x37	; 55
    12ba:	59 e3       	ldi	r21, 0x39	; 57
    12bc:	c3 01       	movw	r24, r6
    12be:	b2 01       	movw	r22, r4
    12c0:	0e 94 90 12 	call	0x2520	; 0x2520 <__mulsf3>
    12c4:	9b 01       	movw	r18, r22
    12c6:	ac 01       	movw	r20, r24
    12c8:	c7 01       	movw	r24, r14
    12ca:	b6 01       	movw	r22, r12
    12cc:	0e 94 de 10 	call	0x21bc	; 0x21bc <__addsf3>
    12d0:	6b 01       	movw	r12, r22
    12d2:	7c 01       	movw	r14, r24
    12d4:	2d ec       	ldi	r18, 0xCD	; 205
    12d6:	3c ec       	ldi	r19, 0xCC	; 204
    12d8:	4c ec       	ldi	r20, 0xCC	; 204
    12da:	5d e3       	ldi	r21, 0x3D	; 61
    12dc:	c5 01       	movw	r24, r10
    12de:	b4 01       	movw	r22, r8
    12e0:	0e 94 90 12 	call	0x2520	; 0x2520 <__mulsf3>
    12e4:	9b 01       	movw	r18, r22
    12e6:	ac 01       	movw	r20, r24
    12e8:	c7 01       	movw	r24, r14
    12ea:	b6 01       	movw	r22, r12
    12ec:	0e 94 de 10 	call	0x21bc	; 0x21bc <__addsf3>
    12f0:	46 2f       	mov	r20, r22
    12f2:	57 2f       	mov	r21, r23
    12f4:	68 2f       	mov	r22, r24
    12f6:	79 2f       	mov	r23, r25
    12f8:	40 93 d2 01 	sts	0x01D2, r20
    12fc:	50 93 d3 01 	sts	0x01D3, r21
    1300:	60 93 d4 01 	sts	0x01D4, r22
    1304:	70 93 d5 01 	sts	0x01D5, r23
	
	
	if (pid_output>100){pid_output=100;}
    1308:	60 91 d2 01 	lds	r22, 0x01D2
    130c:	70 91 d3 01 	lds	r23, 0x01D3
    1310:	80 91 d4 01 	lds	r24, 0x01D4
    1314:	90 91 d5 01 	lds	r25, 0x01D5
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	48 ec       	ldi	r20, 0xC8	; 200
    131e:	52 e4       	ldi	r21, 0x42	; 66
    1320:	0e 94 8c 12 	call	0x2518	; 0x2518 <__gesf2>
    1324:	18 16       	cp	r1, r24
    1326:	64 f4       	brge	.+24     	; 0x1340 <calculateOutput+0x33e>
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	a8 ec       	ldi	r26, 0xC8	; 200
    132e:	b2 e4       	ldi	r27, 0x42	; 66
    1330:	80 93 d2 01 	sts	0x01D2, r24
    1334:	90 93 d3 01 	sts	0x01D3, r25
    1338:	a0 93 d4 01 	sts	0x01D4, r26
    133c:	b0 93 d5 01 	sts	0x01D5, r27
	if (pid_output<0){pid_output=0;}
    1340:	60 91 d2 01 	lds	r22, 0x01D2
    1344:	70 91 d3 01 	lds	r23, 0x01D3
    1348:	80 91 d4 01 	lds	r24, 0x01D4
    134c:	90 91 d5 01 	lds	r25, 0x01D5
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	a9 01       	movw	r20, r18
    1356:	0e 94 42 11 	call	0x2284	; 0x2284 <__cmpsf2>
    135a:	88 23       	and	r24, r24
    135c:	44 f4       	brge	.+16     	; 0x136e <calculateOutput+0x36c>
    135e:	10 92 d2 01 	sts	0x01D2, r1
    1362:	10 92 d3 01 	sts	0x01D3, r1
    1366:	10 92 d4 01 	sts	0x01D4, r1
    136a:	10 92 d5 01 	sts	0x01D5, r1
		
	return pid_output;
    136e:	60 91 d2 01 	lds	r22, 0x01D2
    1372:	70 91 d3 01 	lds	r23, 0x01D3
    1376:	80 91 d4 01 	lds	r24, 0x01D4
    137a:	90 91 d5 01 	lds	r25, 0x01D5
    137e:	0e 94 ae 11 	call	0x235c	; 0x235c <__fixunssfsi>
    1382:	86 2f       	mov	r24, r22
}
    1384:	ff 90       	pop	r15
    1386:	ef 90       	pop	r14
    1388:	df 90       	pop	r13
    138a:	cf 90       	pop	r12
    138c:	bf 90       	pop	r11
    138e:	af 90       	pop	r10
    1390:	9f 90       	pop	r9
    1392:	8f 90       	pop	r8
    1394:	7f 90       	pop	r7
    1396:	6f 90       	pop	r6
    1398:	5f 90       	pop	r5
    139a:	4f 90       	pop	r4
    139c:	08 95       	ret

0000139e <h2calculateOutput>:

uint8_t h2calculateOutput(float currentvalue, float setpoint)
{
    139e:	4f 92       	push	r4
    13a0:	5f 92       	push	r5
    13a2:	6f 92       	push	r6
    13a4:	7f 92       	push	r7
    13a6:	8f 92       	push	r8
    13a8:	9f 92       	push	r9
    13aa:	af 92       	push	r10
    13ac:	bf 92       	push	r11
    13ae:	cf 92       	push	r12
    13b0:	df 92       	push	r13
    13b2:	ef 92       	push	r14
    13b4:	ff 92       	push	r15
    13b6:	4b 01       	movw	r8, r22
    13b8:	5c 01       	movw	r10, r24
    13ba:	69 01       	movw	r12, r18
    13bc:	7a 01       	movw	r14, r20

	if (setpoint!=0)
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	a9 01       	movw	r20, r18
    13c4:	c7 01       	movw	r24, r14
    13c6:	b6 01       	movw	r22, r12
    13c8:	0e 94 42 11 	call	0x2284	; 0x2284 <__cmpsf2>
    13cc:	88 23       	and	r24, r24
    13ce:	09 f4       	brne	.+2      	; 0x13d2 <h2calculateOutput+0x34>
    13d0:	ff c0       	rjmp	.+510    	; 0x15d0 <h2calculateOutput+0x232>
	{
		if (cooldown_i_Setpoint<currentvalue-setpoint)	//if iron needs to cool down take i away to be sure that iron turns off
    13d2:	a7 01       	movw	r20, r14
    13d4:	96 01       	movw	r18, r12
    13d6:	c5 01       	movw	r24, r10
    13d8:	b4 01       	movw	r22, r8
    13da:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__subsf3>
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e8       	ldi	r19, 0x80	; 128
    13e2:	41 e9       	ldi	r20, 0x91	; 145
    13e4:	54 e4       	ldi	r21, 0x44	; 68
    13e6:	0e 94 8c 12 	call	0x2518	; 0x2518 <__gesf2>
    13ea:	18 16       	cp	r1, r24
    13ec:	64 f4       	brge	.+24     	; 0x1406 <h2calculateOutput+0x68>
		{
			h2integral=0;
    13ee:	10 92 ca 01 	sts	0x01CA, r1
    13f2:	10 92 cb 01 	sts	0x01CB, r1
    13f6:	10 92 cc 01 	sts	0x01CC, r1
    13fa:	10 92 cd 01 	sts	0x01CD, r1
			h2coolingflag=1;
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	80 93 b8 01 	sts	0x01B8, r24
    1404:	86 c0       	rjmp	.+268    	; 0x1512 <h2calculateOutput+0x174>
		}else {							//if the heater is just coming off of a cooling cycle set some integral to be sure that it does not undershoot
			if (h2coolingflag==1)
    1406:	80 91 b8 01 	lds	r24, 0x01B8
    140a:	81 30       	cpi	r24, 0x01	; 1
    140c:	09 f0       	breq	.+2      	; 0x1410 <h2calculateOutput+0x72>
    140e:	81 c0       	rjmp	.+258    	; 0x1512 <h2calculateOutput+0x174>
			{
				h2coolingflag=0;
    1410:	10 92 b8 01 	sts	0x01B8, r1

				if (setpoint<400*23)
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 ec       	ldi	r19, 0xC0	; 192
    1418:	4f e0       	ldi	r20, 0x0F	; 15
    141a:	56 e4       	ldi	r21, 0x46	; 70
    141c:	c7 01       	movw	r24, r14
    141e:	b6 01       	movw	r22, r12
    1420:	0e 94 42 11 	call	0x2284	; 0x2284 <__cmpsf2>
    1424:	88 23       	and	r24, r24
    1426:	6c f4       	brge	.+26     	; 0x1442 <h2calculateOutput+0xa4>
				{
					h2integral=cooldown_i_350FSetpower;
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	97 ec       	ldi	r25, 0xC7	; 199
    142c:	a5 e6       	ldi	r26, 0x65	; 101
    142e:	b7 e4       	ldi	r27, 0x47	; 71
    1430:	80 93 ca 01 	sts	0x01CA, r24
    1434:	90 93 cb 01 	sts	0x01CB, r25
    1438:	a0 93 cc 01 	sts	0x01CC, r26
    143c:	b0 93 cd 01 	sts	0x01CD, r27
    1440:	68 c0       	rjmp	.+208    	; 0x1512 <h2calculateOutput+0x174>
				}else if (setpoint<500*23)
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 eb       	ldi	r19, 0xB0	; 176
    1446:	43 e3       	ldi	r20, 0x33	; 51
    1448:	56 e4       	ldi	r21, 0x46	; 70
    144a:	c7 01       	movw	r24, r14
    144c:	b6 01       	movw	r22, r12
    144e:	0e 94 42 11 	call	0x2284	; 0x2284 <__cmpsf2>
    1452:	88 23       	and	r24, r24
    1454:	6c f4       	brge	.+26     	; 0x1470 <h2calculateOutput+0xd2>
				{
					h2integral=cooldown_i_450FSetpower;
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	94 e4       	ldi	r25, 0x44	; 68
    145a:	a1 e7       	ldi	r26, 0x71	; 113
    145c:	b7 e4       	ldi	r27, 0x47	; 71
    145e:	80 93 ca 01 	sts	0x01CA, r24
    1462:	90 93 cb 01 	sts	0x01CB, r25
    1466:	a0 93 cc 01 	sts	0x01CC, r26
    146a:	b0 93 cd 01 	sts	0x01CD, r27
    146e:	51 c0       	rjmp	.+162    	; 0x1512 <h2calculateOutput+0x174>
				}else if (setpoint<600*23)
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 ea       	ldi	r19, 0xA0	; 160
    1474:	47 e5       	ldi	r20, 0x57	; 87
    1476:	56 e4       	ldi	r21, 0x46	; 70
    1478:	c7 01       	movw	r24, r14
    147a:	b6 01       	movw	r22, r12
    147c:	0e 94 42 11 	call	0x2284	; 0x2284 <__cmpsf2>
    1480:	88 23       	and	r24, r24
    1482:	6c f4       	brge	.+26     	; 0x149e <h2calculateOutput+0x100>
				{
					h2integral=cooldown_i_550FSetpower;
    1484:	80 e8       	ldi	r24, 0x80	; 128
    1486:	99 e1       	ldi	r25, 0x19	; 25
    1488:	ab e9       	ldi	r26, 0x9B	; 155
    148a:	b7 e4       	ldi	r27, 0x47	; 71
    148c:	80 93 ca 01 	sts	0x01CA, r24
    1490:	90 93 cb 01 	sts	0x01CB, r25
    1494:	a0 93 cc 01 	sts	0x01CC, r26
    1498:	b0 93 cd 01 	sts	0x01CD, r27
    149c:	3a c0       	rjmp	.+116    	; 0x1512 <h2calculateOutput+0x174>
				}else if (setpoint<700*23)
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e9       	ldi	r19, 0x90	; 144
    14a2:	4b e7       	ldi	r20, 0x7B	; 123
    14a4:	56 e4       	ldi	r21, 0x46	; 70
    14a6:	c7 01       	movw	r24, r14
    14a8:	b6 01       	movw	r22, r12
    14aa:	0e 94 42 11 	call	0x2284	; 0x2284 <__cmpsf2>
    14ae:	88 23       	and	r24, r24
    14b0:	6c f4       	brge	.+26     	; 0x14cc <h2calculateOutput+0x12e>
				{
					h2integral=cooldown_i_650FSetpower;
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	91 e9       	ldi	r25, 0x91	; 145
    14b6:	ad eb       	ldi	r26, 0xBD	; 189
    14b8:	b7 e4       	ldi	r27, 0x47	; 71
    14ba:	80 93 ca 01 	sts	0x01CA, r24
    14be:	90 93 cb 01 	sts	0x01CB, r25
    14c2:	a0 93 cc 01 	sts	0x01CC, r26
    14c6:	b0 93 cd 01 	sts	0x01CD, r27
    14ca:	23 c0       	rjmp	.+70     	; 0x1512 <h2calculateOutput+0x174>
				}else if (setpoint<800*23)
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	30 ec       	ldi	r19, 0xC0	; 192
    14d0:	4f e8       	ldi	r20, 0x8F	; 143
    14d2:	56 e4       	ldi	r21, 0x46	; 70
    14d4:	c7 01       	movw	r24, r14
    14d6:	b6 01       	movw	r22, r12
    14d8:	0e 94 42 11 	call	0x2284	; 0x2284 <__cmpsf2>
    14dc:	88 23       	and	r24, r24
    14de:	6c f4       	brge	.+26     	; 0x14fa <h2calculateOutput+0x15c>
				{
					h2integral=cooldown_i_750FSetpower;
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	96 e8       	ldi	r25, 0x86	; 134
    14e4:	ab ee       	ldi	r26, 0xEB	; 235
    14e6:	b7 e4       	ldi	r27, 0x47	; 71
    14e8:	80 93 ca 01 	sts	0x01CA, r24
    14ec:	90 93 cb 01 	sts	0x01CB, r25
    14f0:	a0 93 cc 01 	sts	0x01CC, r26
    14f4:	b0 93 cd 01 	sts	0x01CD, r27
    14f8:	0c c0       	rjmp	.+24     	; 0x1512 <h2calculateOutput+0x174>
				}else
				{
					h2integral=cooldown_i_800FSetpower;
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	90 e4       	ldi	r25, 0x40	; 64
    14fe:	a1 e0       	ldi	r26, 0x01	; 1
    1500:	b8 e4       	ldi	r27, 0x48	; 72
    1502:	80 93 ca 01 	sts	0x01CA, r24
    1506:	90 93 cb 01 	sts	0x01CB, r25
    150a:	a0 93 cc 01 	sts	0x01CC, r26
    150e:	b0 93 cd 01 	sts	0x01CD, r27
				}
				
			}
		}
		
		h2pid_error = setpoint-currentvalue;
    1512:	a5 01       	movw	r20, r10
    1514:	94 01       	movw	r18, r8
    1516:	c7 01       	movw	r24, r14
    1518:	b6 01       	movw	r22, r12
    151a:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__subsf3>
    151e:	46 2f       	mov	r20, r22
    1520:	57 2f       	mov	r21, r23
    1522:	68 2f       	mov	r22, r24
    1524:	79 2f       	mov	r23, r25
    1526:	40 93 ba 01 	sts	0x01BA, r20
    152a:	50 93 bb 01 	sts	0x01BB, r21
    152e:	60 93 bc 01 	sts	0x01BC, r22
    1532:	70 93 bd 01 	sts	0x01BD, r23
		h2integral = h2integral+h2pid_error;
    1536:	60 91 ca 01 	lds	r22, 0x01CA
    153a:	70 91 cb 01 	lds	r23, 0x01CB
    153e:	80 91 cc 01 	lds	r24, 0x01CC
    1542:	90 91 cd 01 	lds	r25, 0x01CD
    1546:	20 91 ba 01 	lds	r18, 0x01BA
    154a:	30 91 bb 01 	lds	r19, 0x01BB
    154e:	40 91 bc 01 	lds	r20, 0x01BC
    1552:	50 91 bd 01 	lds	r21, 0x01BD
    1556:	0e 94 de 10 	call	0x21bc	; 0x21bc <__addsf3>
    155a:	46 2f       	mov	r20, r22
    155c:	57 2f       	mov	r21, r23
    155e:	68 2f       	mov	r22, r24
    1560:	79 2f       	mov	r23, r25
    1562:	40 93 ca 01 	sts	0x01CA, r20
    1566:	50 93 cb 01 	sts	0x01CB, r21
    156a:	60 93 cc 01 	sts	0x01CC, r22
    156e:	70 93 cd 01 	sts	0x01CD, r23
		h2derivative = h2pid_error - h2lasterror;
    1572:	60 91 ba 01 	lds	r22, 0x01BA
    1576:	70 91 bb 01 	lds	r23, 0x01BB
    157a:	80 91 bc 01 	lds	r24, 0x01BC
    157e:	90 91 bd 01 	lds	r25, 0x01BD
    1582:	20 91 c2 01 	lds	r18, 0x01C2
    1586:	30 91 c3 01 	lds	r19, 0x01C3
    158a:	40 91 c4 01 	lds	r20, 0x01C4
    158e:	50 91 c5 01 	lds	r21, 0x01C5
    1592:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__subsf3>
    1596:	46 2f       	mov	r20, r22
    1598:	57 2f       	mov	r21, r23
    159a:	68 2f       	mov	r22, r24
    159c:	79 2f       	mov	r23, r25
    159e:	40 93 c6 01 	sts	0x01C6, r20
    15a2:	50 93 c7 01 	sts	0x01C7, r21
    15a6:	60 93 c8 01 	sts	0x01C8, r22
    15aa:	70 93 c9 01 	sts	0x01C9, r23
		h2lasterror=h2pid_error;
    15ae:	80 91 ba 01 	lds	r24, 0x01BA
    15b2:	90 91 bb 01 	lds	r25, 0x01BB
    15b6:	a0 91 bc 01 	lds	r26, 0x01BC
    15ba:	b0 91 bd 01 	lds	r27, 0x01BD
    15be:	80 93 c2 01 	sts	0x01C2, r24
    15c2:	90 93 c3 01 	sts	0x01C3, r25
    15c6:	a0 93 c4 01 	sts	0x01C4, r26
    15ca:	b0 93 c5 01 	sts	0x01C5, r27
    15ce:	20 c0       	rjmp	.+64     	; 0x1610 <h2calculateOutput+0x272>
			
	}else
	{
		h2integral = 0;
    15d0:	10 92 ca 01 	sts	0x01CA, r1
    15d4:	10 92 cb 01 	sts	0x01CB, r1
    15d8:	10 92 cc 01 	sts	0x01CC, r1
    15dc:	10 92 cd 01 	sts	0x01CD, r1
		h2derivative = 0;
    15e0:	10 92 c6 01 	sts	0x01C6, r1
    15e4:	10 92 c7 01 	sts	0x01C7, r1
    15e8:	10 92 c8 01 	sts	0x01C8, r1
    15ec:	10 92 c9 01 	sts	0x01C9, r1
		h2lasterror = 0;
    15f0:	10 92 c2 01 	sts	0x01C2, r1
    15f4:	10 92 c3 01 	sts	0x01C3, r1
    15f8:	10 92 c4 01 	sts	0x01C4, r1
    15fc:	10 92 c5 01 	sts	0x01C5, r1
		h2pid_error=0;
    1600:	10 92 ba 01 	sts	0x01BA, r1
    1604:	10 92 bb 01 	sts	0x01BB, r1
    1608:	10 92 bc 01 	sts	0x01BC, r1
    160c:	10 92 bd 01 	sts	0x01BD, r1
	}

	h2pid_output=(h2pid_error*pid_p) + (h2integral*pid_i) + (h2derivative*pid_d);
    1610:	60 91 ba 01 	lds	r22, 0x01BA
    1614:	70 91 bb 01 	lds	r23, 0x01BB
    1618:	80 91 bc 01 	lds	r24, 0x01BC
    161c:	90 91 bd 01 	lds	r25, 0x01BD
    1620:	40 90 ca 01 	lds	r4, 0x01CA
    1624:	50 90 cb 01 	lds	r5, 0x01CB
    1628:	60 90 cc 01 	lds	r6, 0x01CC
    162c:	70 90 cd 01 	lds	r7, 0x01CD
    1630:	80 90 c6 01 	lds	r8, 0x01C6
    1634:	90 90 c7 01 	lds	r9, 0x01C7
    1638:	a0 90 c8 01 	lds	r10, 0x01C8
    163c:	b0 90 c9 01 	lds	r11, 0x01C9
    1640:	20 e6       	ldi	r18, 0x60	; 96
    1642:	35 ee       	ldi	r19, 0xE5	; 229
    1644:	40 ed       	ldi	r20, 0xD0	; 208
    1646:	5c e3       	ldi	r21, 0x3C	; 60
    1648:	0e 94 90 12 	call	0x2520	; 0x2520 <__mulsf3>
    164c:	6b 01       	movw	r12, r22
    164e:	7c 01       	movw	r14, r24
    1650:	24 e3       	ldi	r18, 0x34	; 52
    1652:	30 e8       	ldi	r19, 0x80	; 128
    1654:	47 e3       	ldi	r20, 0x37	; 55
    1656:	59 e3       	ldi	r21, 0x39	; 57
    1658:	c3 01       	movw	r24, r6
    165a:	b2 01       	movw	r22, r4
    165c:	0e 94 90 12 	call	0x2520	; 0x2520 <__mulsf3>
    1660:	9b 01       	movw	r18, r22
    1662:	ac 01       	movw	r20, r24
    1664:	c7 01       	movw	r24, r14
    1666:	b6 01       	movw	r22, r12
    1668:	0e 94 de 10 	call	0x21bc	; 0x21bc <__addsf3>
    166c:	6b 01       	movw	r12, r22
    166e:	7c 01       	movw	r14, r24
    1670:	2d ec       	ldi	r18, 0xCD	; 205
    1672:	3c ec       	ldi	r19, 0xCC	; 204
    1674:	4c ec       	ldi	r20, 0xCC	; 204
    1676:	5d e3       	ldi	r21, 0x3D	; 61
    1678:	c5 01       	movw	r24, r10
    167a:	b4 01       	movw	r22, r8
    167c:	0e 94 90 12 	call	0x2520	; 0x2520 <__mulsf3>
    1680:	9b 01       	movw	r18, r22
    1682:	ac 01       	movw	r20, r24
    1684:	c7 01       	movw	r24, r14
    1686:	b6 01       	movw	r22, r12
    1688:	0e 94 de 10 	call	0x21bc	; 0x21bc <__addsf3>
    168c:	46 2f       	mov	r20, r22
    168e:	57 2f       	mov	r21, r23
    1690:	68 2f       	mov	r22, r24
    1692:	79 2f       	mov	r23, r25
    1694:	40 93 be 01 	sts	0x01BE, r20
    1698:	50 93 bf 01 	sts	0x01BF, r21
    169c:	60 93 c0 01 	sts	0x01C0, r22
    16a0:	70 93 c1 01 	sts	0x01C1, r23
	

	if (h2pid_output>100){h2pid_output=100;}	//chop output to 100%
    16a4:	60 91 be 01 	lds	r22, 0x01BE
    16a8:	70 91 bf 01 	lds	r23, 0x01BF
    16ac:	80 91 c0 01 	lds	r24, 0x01C0
    16b0:	90 91 c1 01 	lds	r25, 0x01C1
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	48 ec       	ldi	r20, 0xC8	; 200
    16ba:	52 e4       	ldi	r21, 0x42	; 66
    16bc:	0e 94 8c 12 	call	0x2518	; 0x2518 <__gesf2>
    16c0:	18 16       	cp	r1, r24
    16c2:	64 f4       	brge	.+24     	; 0x16dc <h2calculateOutput+0x33e>
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	a8 ec       	ldi	r26, 0xC8	; 200
    16ca:	b2 e4       	ldi	r27, 0x42	; 66
    16cc:	80 93 be 01 	sts	0x01BE, r24
    16d0:	90 93 bf 01 	sts	0x01BF, r25
    16d4:	a0 93 c0 01 	sts	0x01C0, r26
    16d8:	b0 93 c1 01 	sts	0x01C1, r27
	if (h2pid_output<0){h2pid_output=0;}	//chop output to 0%
    16dc:	60 91 be 01 	lds	r22, 0x01BE
    16e0:	70 91 bf 01 	lds	r23, 0x01BF
    16e4:	80 91 c0 01 	lds	r24, 0x01C0
    16e8:	90 91 c1 01 	lds	r25, 0x01C1
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	a9 01       	movw	r20, r18
    16f2:	0e 94 42 11 	call	0x2284	; 0x2284 <__cmpsf2>
    16f6:	88 23       	and	r24, r24
    16f8:	44 f4       	brge	.+16     	; 0x170a <h2calculateOutput+0x36c>
    16fa:	10 92 be 01 	sts	0x01BE, r1
    16fe:	10 92 bf 01 	sts	0x01BF, r1
    1702:	10 92 c0 01 	sts	0x01C0, r1
    1706:	10 92 c1 01 	sts	0x01C1, r1
	
	return h2pid_output;
    170a:	60 91 be 01 	lds	r22, 0x01BE
    170e:	70 91 bf 01 	lds	r23, 0x01BF
    1712:	80 91 c0 01 	lds	r24, 0x01C0
    1716:	90 91 c1 01 	lds	r25, 0x01C1
    171a:	0e 94 ae 11 	call	0x235c	; 0x235c <__fixunssfsi>
    171e:	86 2f       	mov	r24, r22
}
    1720:	ff 90       	pop	r15
    1722:	ef 90       	pop	r14
    1724:	df 90       	pop	r13
    1726:	cf 90       	pop	r12
    1728:	bf 90       	pop	r11
    172a:	af 90       	pop	r10
    172c:	9f 90       	pop	r9
    172e:	8f 90       	pop	r8
    1730:	7f 90       	pop	r7
    1732:	6f 90       	pop	r6
    1734:	5f 90       	pop	r5
    1736:	4f 90       	pop	r4
    1738:	08 95       	ret

0000173a <__vector_21>:



//ADC conversion complete ISR
ISR(ADC_vect)//125khz it takes 13 cycles for the adc to compleat and there are 2 channels (((125000/13)/2)/2) = 4806 samples per seckond
{
    173a:	1f 92       	push	r1
    173c:	0f 92       	push	r0
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	0f 92       	push	r0
    1742:	11 24       	eor	r1, r1
    1744:	cf 92       	push	r12
    1746:	df 92       	push	r13
    1748:	ef 92       	push	r14
    174a:	ff 92       	push	r15
    174c:	0f 93       	push	r16
    174e:	1f 93       	push	r17
    1750:	2f 93       	push	r18
    1752:	3f 93       	push	r19
    1754:	4f 93       	push	r20
    1756:	5f 93       	push	r21
    1758:	6f 93       	push	r22
    175a:	7f 93       	push	r23
    175c:	8f 93       	push	r24
    175e:	9f 93       	push	r25
    1760:	af 93       	push	r26
    1762:	bf 93       	push	r27
    1764:	cf 93       	push	r28
    1766:	df 93       	push	r29
    1768:	ef 93       	push	r30
    176a:	ff 93       	push	r31

	
	updateHeaterPWM(heater1percent,heater2percent);
    176c:	60 91 e4 01 	lds	r22, 0x01E4
    1770:	80 91 e5 01 	lds	r24, 0x01E5
    1774:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <updateHeaterPWM>
	
	if(Temp1==(ADMUX & 0x0F))	//if the convertion is from temp1
    1778:	80 91 7c 00 	lds	r24, 0x007C
    177c:	8f 70       	andi	r24, 0x0F	; 15
    177e:	86 30       	cpi	r24, 0x06	; 6
    1780:	69 f5       	brne	.+90     	; 0x17dc <__vector_21+0xa2>
	{
		rawADCtemp1=(rawADCtemp1+ADC);	//read the new adc value and avrage it into rawADCtemp1
    1782:	60 91 78 00 	lds	r22, 0x0078
    1786:	70 91 79 00 	lds	r23, 0x0079
    178a:	c0 90 f3 01 	lds	r12, 0x01F3
    178e:	d0 90 f4 01 	lds	r13, 0x01F4
    1792:	e0 90 f5 01 	lds	r14, 0x01F5
    1796:	f0 90 f6 01 	lds	r15, 0x01F6
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__floatunsisf>
    17a2:	a7 01       	movw	r20, r14
    17a4:	96 01       	movw	r18, r12
    17a6:	0e 94 de 10 	call	0x21bc	; 0x21bc <__addsf3>
    17aa:	46 2f       	mov	r20, r22
    17ac:	57 2f       	mov	r21, r23
    17ae:	68 2f       	mov	r22, r24
    17b0:	79 2f       	mov	r23, r25
    17b2:	40 93 f3 01 	sts	0x01F3, r20
    17b6:	50 93 f4 01 	sts	0x01F4, r21
    17ba:	60 93 f5 01 	sts	0x01F5, r22
    17be:	70 93 f6 01 	sts	0x01F6, r23
		ADMUX=Temp2;	//set temp2 to be read flag
    17c2:	87 e0       	ldi	r24, 0x07	; 7
    17c4:	80 93 7c 00 	sts	0x007C, r24
		numofreadings++;
    17c8:	80 91 f7 01 	lds	r24, 0x01F7
    17cc:	90 91 f8 01 	lds	r25, 0x01F8
    17d0:	01 96       	adiw	r24, 0x01	; 1
    17d2:	90 93 f8 01 	sts	0x01F8, r25
    17d6:	80 93 f7 01 	sts	0x01F7, r24
    17da:	c8 c0       	rjmp	.+400    	; 0x196c <__vector_21+0x232>
		

	}
	else    //The reading is from temp2
	{
		rawADCtemp2=(rawADCtemp2+ADC);	//read the new adc value and avrage it into rawADCtemp2
    17dc:	60 91 78 00 	lds	r22, 0x0078
    17e0:	70 91 79 00 	lds	r23, 0x0079
    17e4:	c0 90 ef 01 	lds	r12, 0x01EF
    17e8:	d0 90 f0 01 	lds	r13, 0x01F0
    17ec:	e0 90 f1 01 	lds	r14, 0x01F1
    17f0:	f0 90 f2 01 	lds	r15, 0x01F2
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__floatunsisf>
    17fc:	a7 01       	movw	r20, r14
    17fe:	96 01       	movw	r18, r12
    1800:	0e 94 de 10 	call	0x21bc	; 0x21bc <__addsf3>
    1804:	46 2f       	mov	r20, r22
    1806:	57 2f       	mov	r21, r23
    1808:	68 2f       	mov	r22, r24
    180a:	79 2f       	mov	r23, r25
    180c:	40 93 ef 01 	sts	0x01EF, r20
    1810:	50 93 f0 01 	sts	0x01F0, r21
    1814:	60 93 f1 01 	sts	0x01F1, r22
    1818:	70 93 f2 01 	sts	0x01F2, r23
		ADMUX=Temp1;	//set temp2 to be read flag
    181c:	86 e0       	ldi	r24, 0x06	; 6
    181e:	80 93 7c 00 	sts	0x007C, r24
		if(numofreadings==2400)	//do this at 4hz adc operates at 125khz it takes 13 cycles for the adc to compleat and there are 2 channels (((125000/13)/2)/2) = 4806 samples per seckond
    1822:	80 91 f7 01 	lds	r24, 0x01F7
    1826:	90 91 f8 01 	lds	r25, 0x01F8
    182a:	80 36       	cpi	r24, 0x60	; 96
    182c:	99 40       	sbci	r25, 0x09	; 9
    182e:	09 f0       	breq	.+2      	; 0x1832 <__vector_21+0xf8>
    1830:	9d c0       	rjmp	.+314    	; 0x196c <__vector_21+0x232>
		{
			//clear the values for the next go around
			ADCtemp1avg=(rawADCtemp1/2400);
    1832:	60 91 f3 01 	lds	r22, 0x01F3
    1836:	70 91 f4 01 	lds	r23, 0x01F4
    183a:	80 91 f5 01 	lds	r24, 0x01F5
    183e:	90 91 f6 01 	lds	r25, 0x01F6
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	46 e1       	ldi	r20, 0x16	; 22
    1848:	55 e4       	ldi	r21, 0x45	; 69
    184a:	0e 94 46 11 	call	0x228c	; 0x228c <__divsf3>
    184e:	0e 94 ae 11 	call	0x235c	; 0x235c <__fixunssfsi>
    1852:	70 93 ed 01 	sts	0x01ED, r23
    1856:	60 93 ec 01 	sts	0x01EC, r22
			ADCtemp2avg=(rawADCtemp2/2400);
    185a:	60 91 ef 01 	lds	r22, 0x01EF
    185e:	70 91 f0 01 	lds	r23, 0x01F0
    1862:	80 91 f1 01 	lds	r24, 0x01F1
    1866:	90 91 f2 01 	lds	r25, 0x01F2
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	46 e1       	ldi	r20, 0x16	; 22
    1870:	55 e4       	ldi	r21, 0x45	; 69
    1872:	0e 94 46 11 	call	0x228c	; 0x228c <__divsf3>
    1876:	0e 94 ae 11 	call	0x235c	; 0x235c <__fixunssfsi>
    187a:	70 93 eb 01 	sts	0x01EB, r23
    187e:	60 93 ea 01 	sts	0x01EA, r22
			rawADCtemp1=0;
    1882:	10 92 f3 01 	sts	0x01F3, r1
    1886:	10 92 f4 01 	sts	0x01F4, r1
    188a:	10 92 f5 01 	sts	0x01F5, r1
    188e:	10 92 f6 01 	sts	0x01F6, r1
			rawADCtemp2=0;
    1892:	10 92 ef 01 	sts	0x01EF, r1
    1896:	10 92 f0 01 	sts	0x01F0, r1
    189a:	10 92 f1 01 	sts	0x01F1, r1
    189e:	10 92 f2 01 	sts	0x01F2, r1
			numofreadings=0;
    18a2:	10 92 f8 01 	sts	0x01F8, r1
    18a6:	10 92 f7 01 	sts	0x01F7, r1
			ADCtempnew=1;
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	80 93 ee 01 	sts	0x01EE, r24
			
			//pid calculations here---------------------------------------------------------------------------------
			uint16_t sendtemp1=tempTouV(settempheater1);
    18b0:	80 91 e8 01 	lds	r24, 0x01E8
    18b4:	90 91 e9 01 	lds	r25, 0x01E9
    18b8:	0e 94 51 07 	call	0xea2	; 0xea2 <tempTouV>
    18bc:	6c 01       	movw	r12, r24
			uint16_t sendtemp2=tempTouV(settempheater2);
    18be:	80 91 e6 01 	lds	r24, 0x01E6
    18c2:	90 91 e7 01 	lds	r25, 0x01E7
    18c6:	0e 94 51 07 	call	0xea2	; 0xea2 <tempTouV>
    18ca:	ec 01       	movw	r28, r24
			
			if (!heater1onoff){sendtemp1=0;}	//if heater is off tell pid to coolit
    18cc:	80 91 fa 01 	lds	r24, 0x01FA
    18d0:	81 11       	cpse	r24, r1
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <__vector_21+0x19e>
    18d4:	c1 2c       	mov	r12, r1
    18d6:	d1 2c       	mov	r13, r1
			if (!heater2onoff){sendtemp2=0;}	//if heater is off tell pid to coolit
    18d8:	80 91 f9 01 	lds	r24, 0x01F9
    18dc:	81 11       	cpse	r24, r1
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <__vector_21+0x1aa>
    18e0:	c0 e0       	ldi	r28, 0x00	; 0
    18e2:	d0 e0       	ldi	r29, 0x00	; 0
				
			heater1percent=calculateOutput(adctouV(ADCtemp1avg,10,heater1_adcgain,heater1_adcreff), sendtemp1);//sets the counter for a spicific duty cycle 100=100% 0=0%	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! check this !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    18e4:	80 91 ec 01 	lds	r24, 0x01EC
    18e8:	90 91 ed 01 	lds	r25, 0x01ED
    18ec:	e1 2c       	mov	r14, r1
    18ee:	f1 2c       	mov	r15, r1
    18f0:	00 e2       	ldi	r16, 0x20	; 32
    18f2:	10 e4       	ldi	r17, 0x40	; 64
    18f4:	23 ec       	ldi	r18, 0xC3	; 195
    18f6:	35 e7       	ldi	r19, 0x75	; 117
    18f8:	4e ed       	ldi	r20, 0xDE	; 222
    18fa:	52 e4       	ldi	r21, 0x42	; 66
    18fc:	6a e0       	ldi	r22, 0x0A	; 10
    18fe:	0e 94 f3 06 	call	0xde6	; 0xde6 <adctouV>
    1902:	8c 01       	movw	r16, r24
    1904:	b6 01       	movw	r22, r12
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__floatunsisf>
    190e:	6b 01       	movw	r12, r22
    1910:	7c 01       	movw	r14, r24
    1912:	b8 01       	movw	r22, r16
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__floatunsisf>
    191c:	a7 01       	movw	r20, r14
    191e:	96 01       	movw	r18, r12
    1920:	0e 94 01 08 	call	0x1002	; 0x1002 <calculateOutput>
    1924:	80 93 e5 01 	sts	0x01E5, r24
			heater2percent=h2calculateOutput(adctouV(ADCtemp2avg,10,heater2_adcgain,heater2_adcreff), sendtemp2);//sets the counter for a spicific duty cycle 100=100% 0=0%	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! check this !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    1928:	80 91 ea 01 	lds	r24, 0x01EA
    192c:	90 91 eb 01 	lds	r25, 0x01EB
    1930:	e1 2c       	mov	r14, r1
    1932:	f1 2c       	mov	r15, r1
    1934:	00 e2       	ldi	r16, 0x20	; 32
    1936:	10 e4       	ldi	r17, 0x40	; 64
    1938:	23 ec       	ldi	r18, 0xC3	; 195
    193a:	35 e7       	ldi	r19, 0x75	; 117
    193c:	4e ed       	ldi	r20, 0xDE	; 222
    193e:	52 e4       	ldi	r21, 0x42	; 66
    1940:	6a e0       	ldi	r22, 0x0A	; 10
    1942:	0e 94 f3 06 	call	0xde6	; 0xde6 <adctouV>
    1946:	8c 01       	movw	r16, r24
    1948:	be 01       	movw	r22, r28
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__floatunsisf>
    1952:	6b 01       	movw	r12, r22
    1954:	7c 01       	movw	r14, r24
    1956:	b8 01       	movw	r22, r16
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__floatunsisf>
    1960:	a7 01       	movw	r20, r14
    1962:	96 01       	movw	r18, r12
    1964:	0e 94 cf 09 	call	0x139e	; 0x139e <h2calculateOutput>
    1968:	80 93 e4 01 	sts	0x01E4, r24
			

		}
	}
	
	ADCSRA |= 1<<ADSC;		// Start Conversion
    196c:	ea e7       	ldi	r30, 0x7A	; 122
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	80 64       	ori	r24, 0x40	; 64
    1974:	80 83       	st	Z, r24
}
    1976:	ff 91       	pop	r31
    1978:	ef 91       	pop	r30
    197a:	df 91       	pop	r29
    197c:	cf 91       	pop	r28
    197e:	bf 91       	pop	r27
    1980:	af 91       	pop	r26
    1982:	9f 91       	pop	r25
    1984:	8f 91       	pop	r24
    1986:	7f 91       	pop	r23
    1988:	6f 91       	pop	r22
    198a:	5f 91       	pop	r21
    198c:	4f 91       	pop	r20
    198e:	3f 91       	pop	r19
    1990:	2f 91       	pop	r18
    1992:	1f 91       	pop	r17
    1994:	0f 91       	pop	r16
    1996:	ff 90       	pop	r15
    1998:	ef 90       	pop	r14
    199a:	df 90       	pop	r13
    199c:	cf 90       	pop	r12
    199e:	0f 90       	pop	r0
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	0f 90       	pop	r0
    19a4:	1f 90       	pop	r1
    19a6:	18 95       	reti

000019a8 <main>:




int main(void)
{
    19a8:	cf 93       	push	r28
    19aa:	df 93       	push	r29
    19ac:	00 d0       	rcall	.+0      	; 0x19ae <main+0x6>
    19ae:	1f 92       	push	r1
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
	//CLKPR=0b10000000;	//set main clock prescaler to 1:1 for internal rc oslator
	CLKPR=0x80;	//set system clock prescaler to run at 8mhz form 16mhz xtal so after development the xtal may be omitted
    19b4:	e1 e6       	ldi	r30, 0x61	; 97
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 e8       	ldi	r24, 0x80	; 128
    19ba:	80 83       	st	Z, r24
	CLKPR=0x02;//set system clock prescaler to run at 8mhz form 16mhz xtal so after development the xtal may be omitted
    19bc:	82 e0       	ldi	r24, 0x02	; 2
    19be:	80 83       	st	Z, r24
	
	
	//config simple io-----------------------------------------------------------------
	DDRB=0b00000110;	//set heaters as outputs
    19c0:	86 e0       	ldi	r24, 0x06	; 6
    19c2:	84 b9       	out	0x04, r24	; 4
	DDRC=0b00000011;	//set leds as outputs
    19c4:	83 e0       	ldi	r24, 0x03	; 3
    19c6:	87 b9       	out	0x07, r24	; 7
	DDRD=0b11111100;	//set lcd as outputs
    19c8:	8c ef       	ldi	r24, 0xFC	; 252
    19ca:	8a b9       	out	0x0a, r24	; 10
	PORTB=0b00111000;	//add soft pull ups to switches 1 and 2
    19cc:	88 e3       	ldi	r24, 0x38	; 56
    19ce:	85 b9       	out	0x05, r24	; 5
	PORTC=0b00001100;	//add soft pull ups to switches 3 and 4
    19d0:	8c e0       	ldi	r24, 0x0C	; 12
    19d2:	88 b9       	out	0x08, r24	; 8
	intSerial();
    19d4:	0e 94 18 06 	call	0xc30	; 0xc30 <intSerial>
	intLCD();
    19d8:	0e 94 69 05 	call	0xad2	; 0xad2 <intLCD>




	if (settempheater1==0)
    19dc:	80 91 e8 01 	lds	r24, 0x01E8
    19e0:	90 91 e9 01 	lds	r25, 0x01E9
    19e4:	89 2b       	or	r24, r25
    19e6:	19 f5       	brne	.+70     	; 0x1a2e <main+0x86>
	{
		settempheater1=eeprom_read_word(&eepromsettempheater1);	//reads heater set value from eeprom into ram
    19e8:	82 e0       	ldi	r24, 0x02	; 2
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	0e 94 9b 14 	call	0x2936	; 0x2936 <__eerd_word_m328p>
    19f0:	90 93 e9 01 	sts	0x01E9, r25
    19f4:	80 93 e8 01 	sts	0x01E8, r24
		if (settempheater1<1 || settempheater1>850)	//if there was not a valid temp then put the defualt
    19f8:	80 91 e8 01 	lds	r24, 0x01E8
    19fc:	90 91 e9 01 	lds	r25, 0x01E9
    1a00:	89 2b       	or	r24, r25
    1a02:	39 f0       	breq	.+14     	; 0x1a12 <main+0x6a>
    1a04:	80 91 e8 01 	lds	r24, 0x01E8
    1a08:	90 91 e9 01 	lds	r25, 0x01E9
    1a0c:	83 35       	cpi	r24, 0x53	; 83
    1a0e:	93 40       	sbci	r25, 0x03	; 3
    1a10:	70 f0       	brcs	.+28     	; 0x1a2e <main+0x86>
		{
			settempheater1=600;		//sets defualt heater value in ram
    1a12:	88 e5       	ldi	r24, 0x58	; 88
    1a14:	92 e0       	ldi	r25, 0x02	; 2
    1a16:	90 93 e9 01 	sts	0x01E9, r25
    1a1a:	80 93 e8 01 	sts	0x01E8, r24
			eeprom_update_word (&eepromsettempheater1,settempheater1);	//put settempheater1 into eepromsettempheater1
    1a1e:	60 91 e8 01 	lds	r22, 0x01E8
    1a22:	70 91 e9 01 	lds	r23, 0x01E9
    1a26:	82 e0       	ldi	r24, 0x02	; 2
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	0e 94 a1 14 	call	0x2942	; 0x2942 <__eeupd_word_m328p>
		}
	}

	if (settempheater2==0)
    1a2e:	80 91 e6 01 	lds	r24, 0x01E6
    1a32:	90 91 e7 01 	lds	r25, 0x01E7
    1a36:	89 2b       	or	r24, r25
    1a38:	19 f5       	brne	.+70     	; 0x1a80 <main+0xd8>
	{
		settempheater2=eeprom_read_word(&eepromsettempheater2);	//reads heater set value from eeprom into ram
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	0e 94 9b 14 	call	0x2936	; 0x2936 <__eerd_word_m328p>
    1a42:	90 93 e7 01 	sts	0x01E7, r25
    1a46:	80 93 e6 01 	sts	0x01E6, r24
		if (settempheater2<1 || settempheater2>850)	//if there was not a valid temp then put the defualt
    1a4a:	80 91 e6 01 	lds	r24, 0x01E6
    1a4e:	90 91 e7 01 	lds	r25, 0x01E7
    1a52:	89 2b       	or	r24, r25
    1a54:	39 f0       	breq	.+14     	; 0x1a64 <main+0xbc>
    1a56:	80 91 e6 01 	lds	r24, 0x01E6
    1a5a:	90 91 e7 01 	lds	r25, 0x01E7
    1a5e:	83 35       	cpi	r24, 0x53	; 83
    1a60:	93 40       	sbci	r25, 0x03	; 3
    1a62:	70 f0       	brcs	.+28     	; 0x1a80 <main+0xd8>
		{
			settempheater2=600;		//sets defualt heater value in ram
    1a64:	88 e5       	ldi	r24, 0x58	; 88
    1a66:	92 e0       	ldi	r25, 0x02	; 2
    1a68:	90 93 e7 01 	sts	0x01E7, r25
    1a6c:	80 93 e6 01 	sts	0x01E6, r24
			eeprom_update_word (&eepromsettempheater2,settempheater2);	//put settempheater2 into eepromsettempheater2
    1a70:	60 91 e6 01 	lds	r22, 0x01E6
    1a74:	70 91 e7 01 	lds	r23, 0x01E7
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	0e 94 a1 14 	call	0x2942	; 0x2942 <__eeupd_word_m328p>




	//http://www.avr-tutorials.com/adc/utilizing-avr-adc-interrupt-feature
	PRR &= (0<<PRADC); //make sure the adc is not disabled by power management
    1a80:	e4 e6       	ldi	r30, 0x64	; 100
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	10 82       	st	Z, r1
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADEN))|(1<<ADIE);    //Prescaler = 64 = 125Khz clock source using 8Mhz internal, turn adc on, ADC Interrupt Enable
    1a88:	ea e7       	ldi	r30, 0x7A	; 122
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	8e 68       	ori	r24, 0x8E	; 142
    1a90:	80 83       	st	Z, r24
	//ADMUX &= ~((1<<REFS1) | (1<<REFS0));	//(00=AREF, Internal Vref turned off, externally connected voltage)
	//ADMUX |= (1<<REFS1) | (1<<REFS0);		//(11=Internal 1.1V Voltage Reference with external capacitor at AREF pin)
	sei();	//enable global interupts
    1a92:	78 94       	sei
	ADMUX=Temp1;	//set temp1 to be read first
    1a94:	86 e0       	ldi	r24, 0x06	; 6
    1a96:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);	//ADC Start Conversion
    1a9a:	80 81       	ld	r24, Z
    1a9c:	80 64       	ori	r24, 0x40	; 64
    1a9e:	80 83       	st	Z, r24
	uint16_t sw3count=0;	//takes care of debounceing buttons and alt functions
	uint16_t sw4count=0;	//takes care of debounceing buttons and alt functions
	uint8_t selectediron=1;		//holds witch iron is selected on the lcd defualt to iron 1
	
	//wright persistant text to the lcd
	setCursor(0,0);
    1aa0:	60 e0       	ldi	r22, 0x00	; 0
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	0e 94 04 06 	call	0xc08	; 0xc08 <setCursor>
	wrightString(">S");
    1aa8:	83 e0       	ldi	r24, 0x03	; 3
    1aaa:	91 e0       	ldi	r25, 0x01	; 1
    1aac:	0e 94 d5 05 	call	0xbaa	; 0xbaa <wrightString>
	setCursor(1,0);
    1ab0:	60 e0       	ldi	r22, 0x00	; 0
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	0e 94 04 06 	call	0xc08	; 0xc08 <setCursor>
	wrightString(" S");
    1ab8:	86 e0       	ldi	r24, 0x06	; 6
    1aba:	91 e0       	ldi	r25, 0x01	; 1
    1abc:	0e 94 d5 05 	call	0xbaa	; 0xbaa <wrightString>
	setCursor(0,6);
    1ac0:	66 e0       	ldi	r22, 0x06	; 6
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	0e 94 04 06 	call	0xc08	; 0xc08 <setCursor>
	wrightString("A");
    1ac8:	85 e1       	ldi	r24, 0x15	; 21
    1aca:	91 e0       	ldi	r25, 0x01	; 1
    1acc:	0e 94 d5 05 	call	0xbaa	; 0xbaa <wrightString>
	setCursor(1,6);
    1ad0:	66 e0       	ldi	r22, 0x06	; 6
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	0e 94 04 06 	call	0xc08	; 0xc08 <setCursor>
	wrightString("A");
    1ad8:	85 e1       	ldi	r24, 0x15	; 21
    1ada:	91 e0       	ldi	r25, 0x01	; 1
    1adc:	0e 94 d5 05 	call	0xbaa	; 0xbaa <wrightString>
	setCursor(0,10);
    1ae0:	6a e0       	ldi	r22, 0x0A	; 10
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	0e 94 04 06 	call	0xc08	; 0xc08 <setCursor>
	wrightString("F");
    1ae8:	89 e0       	ldi	r24, 0x09	; 9
    1aea:	91 e0       	ldi	r25, 0x01	; 1
    1aec:	0e 94 d5 05 	call	0xbaa	; 0xbaa <wrightString>
	setCursor(0,15);
    1af0:	6f e0       	ldi	r22, 0x0F	; 15
    1af2:	80 e0       	ldi	r24, 0x00	; 0
    1af4:	0e 94 04 06 	call	0xc08	; 0xc08 <setCursor>
	wrightString("%");
    1af8:	8b e0       	ldi	r24, 0x0B	; 11
    1afa:	91 e0       	ldi	r25, 0x01	; 1
    1afc:	0e 94 d5 05 	call	0xbaa	; 0xbaa <wrightString>
	setCursor(1,10);
    1b00:	6a e0       	ldi	r22, 0x0A	; 10
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	0e 94 04 06 	call	0xc08	; 0xc08 <setCursor>
	wrightString("F");
    1b08:	89 e0       	ldi	r24, 0x09	; 9
    1b0a:	91 e0       	ldi	r25, 0x01	; 1
    1b0c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <wrightString>
	setCursor(1,15);
    1b10:	6f e0       	ldi	r22, 0x0F	; 15
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	0e 94 04 06 	call	0xc08	; 0xc08 <setCursor>
	wrightString("%");
    1b18:	8b e0       	ldi	r24, 0x0B	; 11
    1b1a:	91 e0       	ldi	r25, 0x01	; 1
    1b1c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <wrightString>
	setCursor(0,2);
    1b20:	62 e0       	ldi	r22, 0x02	; 2
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	0e 94 04 06 	call	0xc08	; 0xc08 <setCursor>
	wrightString(dtostrf(settempheater1,3,0,lcdtext));	//turn temp into a string);
    1b28:	60 91 e8 01 	lds	r22, 0x01E8
    1b2c:	70 91 e9 01 	lds	r23, 0x01E9
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__floatunsisf>
    1b38:	01 e3       	ldi	r16, 0x31	; 49
    1b3a:	12 e0       	ldi	r17, 0x02	; 2
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	43 e0       	ldi	r20, 0x03	; 3
    1b40:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <dtostrf>
    1b44:	0e 94 d5 05 	call	0xbaa	; 0xbaa <wrightString>
	setCursor(1,2);
    1b48:	62 e0       	ldi	r22, 0x02	; 2
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	0e 94 04 06 	call	0xc08	; 0xc08 <setCursor>
	wrightString(dtostrf(settempheater2,3,0,lcdtext));	//turn temp into a string);	
    1b50:	60 91 e6 01 	lds	r22, 0x01E6
    1b54:	70 91 e7 01 	lds	r23, 0x01E7
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__floatunsisf>
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	43 e0       	ldi	r20, 0x03	; 3
    1b64:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <dtostrf>
    1b68:	0e 94 d5 05 	call	0xbaa	; 0xbaa <wrightString>
	
	//serial pid tuning stuff for use with plx-daq addon form parelax
	//http://robottini.altervista.org/arduino-and-real-time-charts-in-excel?doing_wp_cron=1382484593.4194939136505126953125
	//http://classic.parallax.com/downloads/plx-daq
	serialWrightString("CLEARDATA");
    1b6c:	8d e0       	ldi	r24, 0x0D	; 13
    1b6e:	91 e0       	ldi	r25, 0x01	; 1
    1b70:	0e 94 32 06 	call	0xc64	; 0xc64 <serialWrightString>
	serialWriteChar(10);	//send new line (10)
    1b74:	8a e0       	ldi	r24, 0x0A	; 10
    1b76:	0e 94 28 06 	call	0xc50	; 0xc50 <serialWriteChar>
	serialWrightString("LABEL,Time,Heater 1 Temp, Heater 1 Power, Heater 2 Temp, Heater 2 Power,Heater 1 Error,Heater 1 I,Heater 1 D,Heater 2 Error,Heater 2 I,Heater 2 D");	//set headers in the graph
    1b7a:	87 e1       	ldi	r24, 0x17	; 23
    1b7c:	91 e0       	ldi	r25, 0x01	; 1
    1b7e:	0e 94 32 06 	call	0xc64	; 0xc64 <serialWrightString>
	serialWriteChar(10);	//send new line (10)
    1b82:	8a e0       	ldi	r24, 0x0A	; 10
    1b84:	0e 94 28 06 	call	0xc50	; 0xc50 <serialWriteChar>
	
	uint16_t sw1count=0;	//takes care of debounceing buttons and alt functions
	uint16_t sw2count=0;	//takes care of debounceing buttons and alt functions
	uint16_t sw3count=0;	//takes care of debounceing buttons and alt functions
	uint16_t sw4count=0;	//takes care of debounceing buttons and alt functions
	uint8_t selectediron=1;		//holds witch iron is selected on the lcd defualt to iron 1
    1b88:	f1 e0       	ldi	r31, 0x01	; 1
    1b8a:	f9 83       	std	Y+1, r31	; 0x01

	
	uint16_t sw1count=0;	//takes care of debounceing buttons and alt functions
	uint16_t sw2count=0;	//takes care of debounceing buttons and alt functions
	uint16_t sw3count=0;	//takes care of debounceing buttons and alt functions
	uint16_t sw4count=0;	//takes care of debounceing buttons and alt functions
    1b8c:	61 2c       	mov	r6, r1
    1b8e:	71 2c       	mov	r7, r1


	
	uint16_t sw1count=0;	//takes care of debounceing buttons and alt functions
	uint16_t sw2count=0;	//takes care of debounceing buttons and alt functions
	uint16_t sw3count=0;	//takes care of debounceing buttons and alt functions
    1b90:	1b 82       	std	Y+3, r1	; 0x03
    1b92:	1a 82       	std	Y+2, r1	; 0x02



	
	uint16_t sw1count=0;	//takes care of debounceing buttons and alt functions
	uint16_t sw2count=0;	//takes care of debounceing buttons and alt functions
    1b94:	41 2c       	mov	r4, r1
    1b96:	51 2c       	mov	r5, r1




	
	uint16_t sw1count=0;	//takes care of debounceing buttons and alt functions
    1b98:	21 2c       	mov	r2, r1
    1b9a:	31 2c       	mov	r3, r1
    1b9c:	02 c0       	rjmp	.+4      	; 0x1ba2 <main+0x1fa>
				}
			}

		}else
		{
			sw2count=0;
    1b9e:	41 2c       	mov	r4, r1
    1ba0:	51 2c       	mov	r5, r1
	serialWriteChar(10);	//send new line (10)
	
    while(1)
    {
		
		if(ADCtempnew)	//if there is a new filterd adc temp update lcd
    1ba2:	80 91 ee 01 	lds	r24, 0x01EE
    1ba6:	88 23       	and	r24, r24
    1ba8:	09 f4       	brne	.+2      	; 0x1bac <main+0x204>
    1baa:	2b c1       	rjmp	.+598    	; 0x1e02 <main+0x45a>
		{
			ADCtempnew=0;//clear flag
    1bac:	10 92 ee 01 	sts	0x01EE, r1
			
			serialWrightString("DATA,TIME,"); //serial graphing stuff
    1bb0:	89 ea       	ldi	r24, 0xA9	; 169
    1bb2:	91 e0       	ldi	r25, 0x01	; 1
    1bb4:	0e 94 32 06 	call	0xc64	; 0xc64 <serialWrightString>
			
			dtostrf(adctoTemp(ADCtemp1avg, 1, heater1_f_offset_temp, 10, heater1_adcgain, heater1_adcreff),3,0,lcdtext);	//turn temp into a string
    1bb8:	80 91 ec 01 	lds	r24, 0x01EC
    1bbc:	90 91 ed 01 	lds	r25, 0x01ED
    1bc0:	81 2c       	mov	r8, r1
    1bc2:	91 2c       	mov	r9, r1
    1bc4:	54 01       	movw	r10, r8
    1bc6:	68 94       	set
    1bc8:	a5 f8       	bld	r10, 5
    1bca:	b6 f8       	bld	r11, 6
    1bcc:	0f 2e       	mov	r0, r31
    1bce:	f3 ec       	ldi	r31, 0xC3	; 195
    1bd0:	cf 2e       	mov	r12, r31
    1bd2:	f5 e7       	ldi	r31, 0x75	; 117
    1bd4:	df 2e       	mov	r13, r31
    1bd6:	fe ed       	ldi	r31, 0xDE	; 222
    1bd8:	ef 2e       	mov	r14, r31
    1bda:	f2 e4       	ldi	r31, 0x42	; 66
    1bdc:	ff 2e       	mov	r15, r31
    1bde:	f0 2d       	mov	r31, r0
    1be0:	0a e0       	ldi	r16, 0x0A	; 10
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	40 e8       	ldi	r20, 0x80	; 128
    1be8:	50 ec       	ldi	r21, 0xC0	; 192
    1bea:	61 e0       	ldi	r22, 0x01	; 1
    1bec:	0e 94 4b 06 	call	0xc96	; 0xc96 <adctoTemp>
    1bf0:	bc 01       	movw	r22, r24
    1bf2:	88 27       	eor	r24, r24
    1bf4:	77 fd       	sbrc	r23, 7
    1bf6:	80 95       	com	r24
    1bf8:	98 2f       	mov	r25, r24
    1bfa:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__floatsisf>
    1bfe:	01 e3       	ldi	r16, 0x31	; 49
    1c00:	12 e0       	ldi	r17, 0x02	; 2
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	43 e0       	ldi	r20, 0x03	; 3
    1c06:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <dtostrf>
			setCursor(0,7);
    1c0a:	67 e0       	ldi	r22, 0x07	; 7
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	0e 94 04 06 	call	0xc08	; 0xc08 <setCursor>
			wrightString(lcdtext);	//output heater 1 temp to lcd
    1c12:	c8 01       	movw	r24, r16
    1c14:	0e 94 d5 05 	call	0xbaa	; 0xbaa <wrightString>
			
			serialWrightString(lcdtext);	//heater 1 temp to serial
    1c18:	c8 01       	movw	r24, r16
    1c1a:	0e 94 32 06 	call	0xc64	; 0xc64 <serialWrightString>
			serialWrightString(",");
    1c1e:	82 eb       	ldi	r24, 0xB2	; 178
    1c20:	91 e0       	ldi	r25, 0x01	; 1
    1c22:	0e 94 32 06 	call	0xc64	; 0xc64 <serialWrightString>
			
			dtostrf(heater1percent,3,0,lcdtext);
    1c26:	60 91 e5 01 	lds	r22, 0x01E5
    1c2a:	70 e0       	ldi	r23, 0x00	; 0
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__floatunsisf>
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	43 e0       	ldi	r20, 0x03	; 3
    1c38:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <dtostrf>
			setCursor(0,12);
    1c3c:	6c e0       	ldi	r22, 0x0C	; 12
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	0e 94 04 06 	call	0xc08	; 0xc08 <setCursor>
			wrightString(lcdtext);			//output current iron power to lcd
    1c44:	c8 01       	movw	r24, r16
    1c46:	0e 94 d5 05 	call	0xbaa	; 0xbaa <wrightString>
			
			serialWrightString(lcdtext);	//heater1  power to serial
    1c4a:	c8 01       	movw	r24, r16
    1c4c:	0e 94 32 06 	call	0xc64	; 0xc64 <serialWrightString>
			serialWrightString(",");
    1c50:	82 eb       	ldi	r24, 0xB2	; 178
    1c52:	91 e0       	ldi	r25, 0x01	; 1
    1c54:	0e 94 32 06 	call	0xc64	; 0xc64 <serialWrightString>
			
			dtostrf(adctoTemp(ADCtemp2avg, 1, heater2_f_offset_temp, 10, heater2_adcgain, heater2_adcreff),3,0,lcdtext); //turn temp into a string
    1c58:	80 91 ea 01 	lds	r24, 0x01EA
    1c5c:	90 91 eb 01 	lds	r25, 0x01EB
    1c60:	0a e0       	ldi	r16, 0x0A	; 10
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	40 e8       	ldi	r20, 0x80	; 128
    1c68:	50 ec       	ldi	r21, 0xC0	; 192
    1c6a:	61 e0       	ldi	r22, 0x01	; 1
    1c6c:	0e 94 4b 06 	call	0xc96	; 0xc96 <adctoTemp>
    1c70:	bc 01       	movw	r22, r24
    1c72:	88 27       	eor	r24, r24
    1c74:	77 fd       	sbrc	r23, 7
    1c76:	80 95       	com	r24
    1c78:	98 2f       	mov	r25, r24
    1c7a:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__floatsisf>
    1c7e:	01 e3       	ldi	r16, 0x31	; 49
    1c80:	12 e0       	ldi	r17, 0x02	; 2
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	43 e0       	ldi	r20, 0x03	; 3
    1c86:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <dtostrf>
			setCursor(1,7);
    1c8a:	67 e0       	ldi	r22, 0x07	; 7
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	0e 94 04 06 	call	0xc08	; 0xc08 <setCursor>
			wrightString(lcdtext);	//output heater 2 temp to bottom left
    1c92:	c8 01       	movw	r24, r16
    1c94:	0e 94 d5 05 	call	0xbaa	; 0xbaa <wrightString>
			
			serialWrightString(lcdtext);	//heater 2 temp to serial
    1c98:	c8 01       	movw	r24, r16
    1c9a:	0e 94 32 06 	call	0xc64	; 0xc64 <serialWrightString>
			serialWrightString(",");
    1c9e:	82 eb       	ldi	r24, 0xB2	; 178
    1ca0:	91 e0       	ldi	r25, 0x01	; 1
    1ca2:	0e 94 32 06 	call	0xc64	; 0xc64 <serialWrightString>
			
			
			dtostrf(heater2percent,3,0,lcdtext);
    1ca6:	60 91 e4 01 	lds	r22, 0x01E4
    1caa:	70 e0       	ldi	r23, 0x00	; 0
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__floatunsisf>
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	43 e0       	ldi	r20, 0x03	; 3
    1cb8:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <dtostrf>
			setCursor(1,12);
    1cbc:	6c e0       	ldi	r22, 0x0C	; 12
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	0e 94 04 06 	call	0xc08	; 0xc08 <setCursor>
			wrightString(lcdtext);			//output current iron power next to temp
    1cc4:	c8 01       	movw	r24, r16
    1cc6:	0e 94 d5 05 	call	0xbaa	; 0xbaa <wrightString>
			serialWrightString(lcdtext);	//heater 2 power to serial
    1cca:	c8 01       	movw	r24, r16
    1ccc:	0e 94 32 06 	call	0xc64	; 0xc64 <serialWrightString>
			serialWrightString(",");
    1cd0:	82 eb       	ldi	r24, 0xB2	; 178
    1cd2:	91 e0       	ldi	r25, 0x01	; 1
    1cd4:	0e 94 32 06 	call	0xc64	; 0xc64 <serialWrightString>
			
			
			//send pid statis over serial
			dtostrf(pid_error * pid_p,6,0,lcdtext);
    1cd8:	60 91 ce 01 	lds	r22, 0x01CE
    1cdc:	70 91 cf 01 	lds	r23, 0x01CF
    1ce0:	80 91 d0 01 	lds	r24, 0x01D0
    1ce4:	90 91 d1 01 	lds	r25, 0x01D1
    1ce8:	20 e6       	ldi	r18, 0x60	; 96
    1cea:	35 ee       	ldi	r19, 0xE5	; 229
    1cec:	40 ed       	ldi	r20, 0xD0	; 208
    1cee:	5c e3       	ldi	r21, 0x3C	; 60
    1cf0:	0e 94 90 12 	call	0x2520	; 0x2520 <__mulsf3>
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	46 e0       	ldi	r20, 0x06	; 6
    1cf8:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <dtostrf>
			serialWrightString(lcdtext);	//heater 1 pid error to serial
    1cfc:	c8 01       	movw	r24, r16
    1cfe:	0e 94 32 06 	call	0xc64	; 0xc64 <serialWrightString>
			serialWrightString(",");
    1d02:	82 eb       	ldi	r24, 0xB2	; 178
    1d04:	91 e0       	ldi	r25, 0x01	; 1
    1d06:	0e 94 32 06 	call	0xc64	; 0xc64 <serialWrightString>
			
			dtostrf(integral * pid_i,6,0,lcdtext);
    1d0a:	60 91 de 01 	lds	r22, 0x01DE
    1d0e:	70 91 df 01 	lds	r23, 0x01DF
    1d12:	80 91 e0 01 	lds	r24, 0x01E0
    1d16:	90 91 e1 01 	lds	r25, 0x01E1
    1d1a:	24 e3       	ldi	r18, 0x34	; 52
    1d1c:	30 e8       	ldi	r19, 0x80	; 128
    1d1e:	47 e3       	ldi	r20, 0x37	; 55
    1d20:	59 e3       	ldi	r21, 0x39	; 57
    1d22:	0e 94 90 12 	call	0x2520	; 0x2520 <__mulsf3>
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	46 e0       	ldi	r20, 0x06	; 6
    1d2a:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <dtostrf>
			serialWrightString(lcdtext);	//heater 1 pid intrigral to serial
    1d2e:	c8 01       	movw	r24, r16
    1d30:	0e 94 32 06 	call	0xc64	; 0xc64 <serialWrightString>
			serialWrightString(",");
    1d34:	82 eb       	ldi	r24, 0xB2	; 178
    1d36:	91 e0       	ldi	r25, 0x01	; 1
    1d38:	0e 94 32 06 	call	0xc64	; 0xc64 <serialWrightString>
			
			dtostrf(derivative * pid_d,6,0,lcdtext);
    1d3c:	60 91 da 01 	lds	r22, 0x01DA
    1d40:	70 91 db 01 	lds	r23, 0x01DB
    1d44:	80 91 dc 01 	lds	r24, 0x01DC
    1d48:	90 91 dd 01 	lds	r25, 0x01DD
    1d4c:	2d ec       	ldi	r18, 0xCD	; 205
    1d4e:	3c ec       	ldi	r19, 0xCC	; 204
    1d50:	4c ec       	ldi	r20, 0xCC	; 204
    1d52:	5d e3       	ldi	r21, 0x3D	; 61
    1d54:	0e 94 90 12 	call	0x2520	; 0x2520 <__mulsf3>
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	46 e0       	ldi	r20, 0x06	; 6
    1d5c:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <dtostrf>
			serialWrightString(lcdtext);	//heater 1 pid derivative to serial
    1d60:	c8 01       	movw	r24, r16
    1d62:	0e 94 32 06 	call	0xc64	; 0xc64 <serialWrightString>
			serialWrightString(",");
    1d66:	82 eb       	ldi	r24, 0xB2	; 178
    1d68:	91 e0       	ldi	r25, 0x01	; 1
    1d6a:	0e 94 32 06 	call	0xc64	; 0xc64 <serialWrightString>
			
			dtostrf(h2pid_error * pid_p,6,0,lcdtext);
    1d6e:	60 91 ba 01 	lds	r22, 0x01BA
    1d72:	70 91 bb 01 	lds	r23, 0x01BB
    1d76:	80 91 bc 01 	lds	r24, 0x01BC
    1d7a:	90 91 bd 01 	lds	r25, 0x01BD
    1d7e:	20 e6       	ldi	r18, 0x60	; 96
    1d80:	35 ee       	ldi	r19, 0xE5	; 229
    1d82:	40 ed       	ldi	r20, 0xD0	; 208
    1d84:	5c e3       	ldi	r21, 0x3C	; 60
    1d86:	0e 94 90 12 	call	0x2520	; 0x2520 <__mulsf3>
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	46 e0       	ldi	r20, 0x06	; 6
    1d8e:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <dtostrf>
			serialWrightString(lcdtext);	//heater 2 pid error to serial
    1d92:	c8 01       	movw	r24, r16
    1d94:	0e 94 32 06 	call	0xc64	; 0xc64 <serialWrightString>
			serialWrightString(",");
    1d98:	82 eb       	ldi	r24, 0xB2	; 178
    1d9a:	91 e0       	ldi	r25, 0x01	; 1
    1d9c:	0e 94 32 06 	call	0xc64	; 0xc64 <serialWrightString>
			
			dtostrf(h2integral * pid_i,6,0,lcdtext);
    1da0:	60 91 ca 01 	lds	r22, 0x01CA
    1da4:	70 91 cb 01 	lds	r23, 0x01CB
    1da8:	80 91 cc 01 	lds	r24, 0x01CC
    1dac:	90 91 cd 01 	lds	r25, 0x01CD
    1db0:	24 e3       	ldi	r18, 0x34	; 52
    1db2:	30 e8       	ldi	r19, 0x80	; 128
    1db4:	47 e3       	ldi	r20, 0x37	; 55
    1db6:	59 e3       	ldi	r21, 0x39	; 57
    1db8:	0e 94 90 12 	call	0x2520	; 0x2520 <__mulsf3>
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	46 e0       	ldi	r20, 0x06	; 6
    1dc0:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <dtostrf>
			serialWrightString(lcdtext);	//heater 2 pid intrigral to serial
    1dc4:	c8 01       	movw	r24, r16
    1dc6:	0e 94 32 06 	call	0xc64	; 0xc64 <serialWrightString>
			serialWrightString(",");
    1dca:	82 eb       	ldi	r24, 0xB2	; 178
    1dcc:	91 e0       	ldi	r25, 0x01	; 1
    1dce:	0e 94 32 06 	call	0xc64	; 0xc64 <serialWrightString>
			
			dtostrf(h2derivative * pid_d,6,0,lcdtext);
    1dd2:	60 91 c6 01 	lds	r22, 0x01C6
    1dd6:	70 91 c7 01 	lds	r23, 0x01C7
    1dda:	80 91 c8 01 	lds	r24, 0x01C8
    1dde:	90 91 c9 01 	lds	r25, 0x01C9
    1de2:	2d ec       	ldi	r18, 0xCD	; 205
    1de4:	3c ec       	ldi	r19, 0xCC	; 204
    1de6:	4c ec       	ldi	r20, 0xCC	; 204
    1de8:	5d e3       	ldi	r21, 0x3D	; 61
    1dea:	0e 94 90 12 	call	0x2520	; 0x2520 <__mulsf3>
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	46 e0       	ldi	r20, 0x06	; 6
    1df2:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <dtostrf>
			serialWrightString(lcdtext);	//heater 2 pid derivative to serial
    1df6:	c8 01       	movw	r24, r16
    1df8:	0e 94 32 06 	call	0xc64	; 0xc64 <serialWrightString>

			serialWriteChar(10);	//send new line (10) to end serial string
    1dfc:	8a e0       	ldi	r24, 0x0A	; 10
    1dfe:	0e 94 28 06 	call	0xc50	; 0xc50 <serialWriteChar>
		//if selected channel is on change temp up and down (sw1/2)
		
		
		//read buttons
		uint8_t inputc,inputb;
		inputc=PINC;
    1e02:	16 b1       	in	r17, 0x06	; 6
		inputb=PINB;
    1e04:	f3 b0       	in	r15, 0x03	; 3
		
		if (~inputc & Sw4Mask)	//if sw4 is low -----------------------------heater 1 select / on off
    1e06:	12 fd       	sbrc	r17, 2
    1e08:	30 c0       	rjmp	.+96     	; 0x1e6a <main+0x4c2>
		{
			
			if (sw4count<65535){sw4count++;}
    1e0a:	2f ef       	ldi	r18, 0xFF	; 255
    1e0c:	62 16       	cp	r6, r18
    1e0e:	72 06       	cpc	r7, r18
    1e10:	71 f1       	breq	.+92     	; 0x1e6e <main+0x4c6>
    1e12:	8f ef       	ldi	r24, 0xFF	; 255
    1e14:	68 1a       	sub	r6, r24
    1e16:	78 0a       	sbc	r7, r24
				
			if (sw4count==20)
    1e18:	94 e1       	ldi	r25, 0x14	; 20
    1e1a:	69 16       	cp	r6, r25
    1e1c:	71 04       	cpc	r7, r1
    1e1e:	99 f4       	brne	.+38     	; 0x1e46 <main+0x49e>
			{
				selectediron=1;
				setCursor(0,0);
    1e20:	60 e0       	ldi	r22, 0x00	; 0
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	0e 94 04 06 	call	0xc08	; 0xc08 <setCursor>
				wrightString(">");
    1e28:	84 eb       	ldi	r24, 0xB4	; 180
    1e2a:	91 e0       	ldi	r25, 0x01	; 1
    1e2c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <wrightString>
				setCursor(1,0);
    1e30:	60 e0       	ldi	r22, 0x00	; 0
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	0e 94 04 06 	call	0xc08	; 0xc08 <setCursor>
				wrightString(" ");
    1e38:	86 eb       	ldi	r24, 0xB6	; 182
    1e3a:	91 e0       	ldi	r25, 0x01	; 1
    1e3c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <wrightString>
			
			if (sw4count<65535){sw4count++;}
				
			if (sw4count==20)
			{
				selectediron=1;
    1e40:	e1 e0       	ldi	r30, 0x01	; 1
    1e42:	e9 83       	std	Y+1, r30	; 0x01
    1e44:	14 c0       	rjmp	.+40     	; 0x1e6e <main+0x4c6>
				setCursor(0,0);
				wrightString(">");
				setCursor(1,0);
				wrightString(" ");
			}
			if (sw4count==65000)	//if sw4 is held
    1e46:	f8 ee       	ldi	r31, 0xE8	; 232
    1e48:	6f 16       	cp	r6, r31
    1e4a:	fd ef       	ldi	r31, 0xFD	; 253
    1e4c:	7f 06       	cpc	r7, r31
    1e4e:	79 f4       	brne	.+30     	; 0x1e6e <main+0x4c6>
			{
				if (heater1onoff==1)	//if the heater is on so turn heater off
    1e50:	80 91 fa 01 	lds	r24, 0x01FA
    1e54:	81 30       	cpi	r24, 0x01	; 1
    1e56:	21 f4       	brne	.+8      	; 0x1e60 <main+0x4b8>
				{
					heater1onoff=0;
    1e58:	10 92 fa 01 	sts	0x01FA, r1
					PORTC &= ~(1<<Led_D3);
    1e5c:	40 98       	cbi	0x08, 0	; 8
    1e5e:	07 c0       	rjmp	.+14     	; 0x1e6e <main+0x4c6>
				} 
				else	//the heater is off so turn the heater on
				{
					heater1onoff=1;
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	80 93 fa 01 	sts	0x01FA, r24
					PORTC |= (1<<Led_D3);//set led d3 on
    1e66:	40 9a       	sbi	0x08, 0	; 8
    1e68:	02 c0       	rjmp	.+4      	; 0x1e6e <main+0x4c6>
			}
			
			
		}else
		{
			sw4count=0;
    1e6a:	61 2c       	mov	r6, r1
    1e6c:	71 2c       	mov	r7, r1
		
		
		
		
		
		if (~inputc & Sw3Mask)	//if sw3 is low ----------------------------------heater 2 select / on off
    1e6e:	13 fd       	sbrc	r17, 3
    1e70:	30 c0       	rjmp	.+96     	; 0x1ed2 <main+0x52a>
		{
			
			if (sw3count<65535){sw3count++;}
    1e72:	8a 81       	ldd	r24, Y+2	; 0x02
    1e74:	9b 81       	ldd	r25, Y+3	; 0x03
    1e76:	8f 3f       	cpi	r24, 0xFF	; 255
    1e78:	ef ef       	ldi	r30, 0xFF	; 255
    1e7a:	9e 07       	cpc	r25, r30
    1e7c:	61 f1       	breq	.+88     	; 0x1ed6 <main+0x52e>
    1e7e:	01 96       	adiw	r24, 0x01	; 1
    1e80:	9b 83       	std	Y+3, r25	; 0x03
    1e82:	8a 83       	std	Y+2, r24	; 0x02
				
			if (sw3count==20)
    1e84:	44 97       	sbiw	r24, 0x14	; 20
    1e86:	99 f4       	brne	.+38     	; 0x1eae <main+0x506>
			{
				selectediron=2;
				setCursor(0,0);
    1e88:	60 e0       	ldi	r22, 0x00	; 0
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	0e 94 04 06 	call	0xc08	; 0xc08 <setCursor>
				wrightString(" ");
    1e90:	86 eb       	ldi	r24, 0xB6	; 182
    1e92:	91 e0       	ldi	r25, 0x01	; 1
    1e94:	0e 94 d5 05 	call	0xbaa	; 0xbaa <wrightString>
				setCursor(1,0);
    1e98:	60 e0       	ldi	r22, 0x00	; 0
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	0e 94 04 06 	call	0xc08	; 0xc08 <setCursor>
				wrightString(">");
    1ea0:	84 eb       	ldi	r24, 0xB4	; 180
    1ea2:	91 e0       	ldi	r25, 0x01	; 1
    1ea4:	0e 94 d5 05 	call	0xbaa	; 0xbaa <wrightString>
			
			if (sw3count<65535){sw3count++;}
				
			if (sw3count==20)
			{
				selectediron=2;
    1ea8:	f2 e0       	ldi	r31, 0x02	; 2
    1eaa:	f9 83       	std	Y+1, r31	; 0x01
    1eac:	14 c0       	rjmp	.+40     	; 0x1ed6 <main+0x52e>
				setCursor(0,0);
				wrightString(" ");
				setCursor(1,0);
				wrightString(">");
			}
			if (sw3count==65000)	//if sw3 is held
    1eae:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb0:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb2:	88 3e       	cpi	r24, 0xE8	; 232
    1eb4:	9d 4f       	sbci	r25, 0xFD	; 253
    1eb6:	79 f4       	brne	.+30     	; 0x1ed6 <main+0x52e>
			{
				if (heater2onoff==1)	//if the heater is on
    1eb8:	80 91 f9 01 	lds	r24, 0x01F9
    1ebc:	81 30       	cpi	r24, 0x01	; 1
    1ebe:	21 f4       	brne	.+8      	; 0x1ec8 <main+0x520>
				{
					heater2onoff=0;	//turn heater off
    1ec0:	10 92 f9 01 	sts	0x01F9, r1
					PORTC &= ~(1<<Led_D2);
    1ec4:	41 98       	cbi	0x08, 1	; 8
    1ec6:	07 c0       	rjmp	.+14     	; 0x1ed6 <main+0x52e>

				} 
				else	//the heater is off
				{
					heater2onoff=1;	//turn heater on
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	80 93 f9 01 	sts	0x01F9, r24
					PORTC |= (1<<Led_D2);//set led d2 on
    1ece:	41 9a       	sbi	0x08, 1	; 8
    1ed0:	02 c0       	rjmp	.+4      	; 0x1ed6 <main+0x52e>
			}
			
			
		}else
		{
			sw3count=0;
    1ed2:	1b 82       	std	Y+3, r1	; 0x03
    1ed4:	1a 82       	std	Y+2, r1	; 0x02
		}
		
		
		
		
		if (~inputb & Sw1Mask)	//if sw3 is low ------------------------temp down
    1ed6:	f4 fc       	sbrc	r15, 4
    1ed8:	b3 c0       	rjmp	.+358    	; 0x2040 <main+0x698>
		{
			
			if (sw1count<65535){sw1count++;}
    1eda:	ff ef       	ldi	r31, 0xFF	; 255
    1edc:	2f 16       	cp	r2, r31
    1ede:	3f 06       	cpc	r3, r31
    1ee0:	09 f4       	brne	.+2      	; 0x1ee4 <main+0x53c>
    1ee2:	5f c0       	rjmp	.+190    	; 0x1fa2 <main+0x5fa>
    1ee4:	2f ef       	ldi	r18, 0xFF	; 255
    1ee6:	22 1a       	sub	r2, r18
    1ee8:	32 0a       	sbc	r3, r18
				
			if (sw1count==20)	//if short press
    1eea:	84 e1       	ldi	r24, 0x14	; 20
    1eec:	28 16       	cp	r2, r24
    1eee:	31 04       	cpc	r3, r1
    1ef0:	09 f0       	breq	.+2      	; 0x1ef4 <main+0x54c>
    1ef2:	51 c0       	rjmp	.+162    	; 0x1f96 <main+0x5ee>
				//----------short press
				

				
				
				if (selectediron==1 && settempheater1>1)
    1ef4:	99 81       	ldd	r25, Y+1	; 0x01
    1ef6:	91 30       	cpi	r25, 0x01	; 1
    1ef8:	29 f5       	brne	.+74     	; 0x1f44 <main+0x59c>
    1efa:	80 91 e8 01 	lds	r24, 0x01E8
    1efe:	90 91 e9 01 	lds	r25, 0x01E9
    1f02:	02 97       	sbiw	r24, 0x02	; 2
    1f04:	08 f4       	brcc	.+2      	; 0x1f08 <main+0x560>
    1f06:	9e c0       	rjmp	.+316    	; 0x2044 <main+0x69c>
				{
					//decrece the set temp of heater 1
					settempheater1--;
    1f08:	80 91 e8 01 	lds	r24, 0x01E8
    1f0c:	90 91 e9 01 	lds	r25, 0x01E9
    1f10:	01 97       	sbiw	r24, 0x01	; 1
    1f12:	90 93 e9 01 	sts	0x01E9, r25
    1f16:	80 93 e8 01 	sts	0x01E8, r24
					setCursor(0,2);
    1f1a:	62 e0       	ldi	r22, 0x02	; 2
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	0e 94 04 06 	call	0xc08	; 0xc08 <setCursor>
					wrightString(dtostrf(settempheater1,3,0,lcdtext)); //turn temp into a string);
    1f22:	60 91 e8 01 	lds	r22, 0x01E8
    1f26:	70 91 e9 01 	lds	r23, 0x01E9
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__floatunsisf>
    1f32:	01 e3       	ldi	r16, 0x31	; 49
    1f34:	12 e0       	ldi	r17, 0x02	; 2
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	43 e0       	ldi	r20, 0x03	; 3
    1f3a:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <dtostrf>
    1f3e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <wrightString>
    1f42:	80 c0       	rjmp	.+256    	; 0x2044 <main+0x69c>
	
				}else if(selectediron==2 && settempheater2>1){
    1f44:	e9 81       	ldd	r30, Y+1	; 0x01
    1f46:	e2 30       	cpi	r30, 0x02	; 2
    1f48:	09 f0       	breq	.+2      	; 0x1f4c <main+0x5a4>
    1f4a:	7c c0       	rjmp	.+248    	; 0x2044 <main+0x69c>
    1f4c:	80 91 e6 01 	lds	r24, 0x01E6
    1f50:	90 91 e7 01 	lds	r25, 0x01E7
    1f54:	02 97       	sbiw	r24, 0x02	; 2
    1f56:	08 f4       	brcc	.+2      	; 0x1f5a <main+0x5b2>
    1f58:	75 c0       	rjmp	.+234    	; 0x2044 <main+0x69c>
					//decrece the set temp of heater 2
					settempheater2--;
    1f5a:	80 91 e6 01 	lds	r24, 0x01E6
    1f5e:	90 91 e7 01 	lds	r25, 0x01E7
    1f62:	01 97       	sbiw	r24, 0x01	; 1
    1f64:	90 93 e7 01 	sts	0x01E7, r25
    1f68:	80 93 e6 01 	sts	0x01E6, r24
					setCursor(1,2);
    1f6c:	62 e0       	ldi	r22, 0x02	; 2
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	0e 94 04 06 	call	0xc08	; 0xc08 <setCursor>
					wrightString(dtostrf(settempheater2,3,0,lcdtext));	//turn temp into a string);
    1f74:	60 91 e6 01 	lds	r22, 0x01E6
    1f78:	70 91 e7 01 	lds	r23, 0x01E7
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__floatunsisf>
    1f84:	01 e3       	ldi	r16, 0x31	; 49
    1f86:	12 e0       	ldi	r17, 0x02	; 2
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	43 e0       	ldi	r20, 0x03	; 3
    1f8c:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <dtostrf>
    1f90:	0e 94 d5 05 	call	0xbaa	; 0xbaa <wrightString>
    1f94:	57 c0       	rjmp	.+174    	; 0x2044 <main+0x69c>
					
				}
			}
			
			
			if (sw1count>65000)	//if sw1 is held
    1f96:	f9 ee       	ldi	r31, 0xE9	; 233
    1f98:	2f 16       	cp	r2, r31
    1f9a:	fd ef       	ldi	r31, 0xFD	; 253
    1f9c:	3f 06       	cpc	r3, r31
    1f9e:	08 f4       	brcc	.+2      	; 0x1fa2 <main+0x5fa>
    1fa0:	51 c0       	rjmp	.+162    	; 0x2044 <main+0x69c>
			{
				//long press----------------
				if (selectediron==1 && settempheater1>6)
    1fa2:	29 81       	ldd	r18, Y+1	; 0x01
    1fa4:	21 30       	cpi	r18, 0x01	; 1
    1fa6:	29 f5       	brne	.+74     	; 0x1ff2 <main+0x64a>
    1fa8:	80 91 e8 01 	lds	r24, 0x01E8
    1fac:	90 91 e9 01 	lds	r25, 0x01E9
    1fb0:	07 97       	sbiw	r24, 0x07	; 7
    1fb2:	08 f4       	brcc	.+2      	; 0x1fb6 <main+0x60e>
    1fb4:	47 c0       	rjmp	.+142    	; 0x2044 <main+0x69c>
				{
					//decrece the set temp of heater 1
					settempheater1-=5;
    1fb6:	80 91 e8 01 	lds	r24, 0x01E8
    1fba:	90 91 e9 01 	lds	r25, 0x01E9
    1fbe:	05 97       	sbiw	r24, 0x05	; 5
    1fc0:	90 93 e9 01 	sts	0x01E9, r25
    1fc4:	80 93 e8 01 	sts	0x01E8, r24
					setCursor(0,2);
    1fc8:	62 e0       	ldi	r22, 0x02	; 2
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	0e 94 04 06 	call	0xc08	; 0xc08 <setCursor>
					wrightString(dtostrf(settempheater1,3,0,lcdtext)); //turn temp into a string);
    1fd0:	60 91 e8 01 	lds	r22, 0x01E8
    1fd4:	70 91 e9 01 	lds	r23, 0x01E9
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__floatunsisf>
    1fe0:	01 e3       	ldi	r16, 0x31	; 49
    1fe2:	12 e0       	ldi	r17, 0x02	; 2
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	43 e0       	ldi	r20, 0x03	; 3
    1fe8:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <dtostrf>
    1fec:	0e 94 d5 05 	call	0xbaa	; 0xbaa <wrightString>
    1ff0:	29 c0       	rjmp	.+82     	; 0x2044 <main+0x69c>
					
				}else if(selectediron==2 && settempheater2>6){
    1ff2:	89 81       	ldd	r24, Y+1	; 0x01
    1ff4:	82 30       	cpi	r24, 0x02	; 2
    1ff6:	31 f5       	brne	.+76     	; 0x2044 <main+0x69c>
    1ff8:	80 91 e6 01 	lds	r24, 0x01E6
    1ffc:	90 91 e7 01 	lds	r25, 0x01E7
    2000:	07 97       	sbiw	r24, 0x07	; 7
    2002:	00 f1       	brcs	.+64     	; 0x2044 <main+0x69c>
					//decrece the set temp of heater 2
					settempheater2-=5;
    2004:	80 91 e6 01 	lds	r24, 0x01E6
    2008:	90 91 e7 01 	lds	r25, 0x01E7
    200c:	05 97       	sbiw	r24, 0x05	; 5
    200e:	90 93 e7 01 	sts	0x01E7, r25
    2012:	80 93 e6 01 	sts	0x01E6, r24
					setCursor(1,2);
    2016:	62 e0       	ldi	r22, 0x02	; 2
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	0e 94 04 06 	call	0xc08	; 0xc08 <setCursor>
					wrightString(dtostrf(settempheater2,3,0,lcdtext)); //turn temp into a string);
    201e:	60 91 e6 01 	lds	r22, 0x01E6
    2022:	70 91 e7 01 	lds	r23, 0x01E7
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__floatunsisf>
    202e:	01 e3       	ldi	r16, 0x31	; 49
    2030:	12 e0       	ldi	r17, 0x02	; 2
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	43 e0       	ldi	r20, 0x03	; 3
    2036:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <dtostrf>
    203a:	0e 94 d5 05 	call	0xbaa	; 0xbaa <wrightString>
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <main+0x69c>
			}
			
			
		}else
		{
			sw1count=0;
    2040:	21 2c       	mov	r2, r1
    2042:	31 2c       	mov	r3, r1
		
		
		
		
		
		if (~inputb & Sw2Mask)	//if sw3 is low ------------------------temp up
    2044:	f3 fc       	sbrc	r15, 3
    2046:	ab cd       	rjmp	.-1194   	; 0x1b9e <main+0x1f6>
		{
			
			if (sw2count<65535){sw2count++;}
    2048:	9f ef       	ldi	r25, 0xFF	; 255
    204a:	49 16       	cp	r4, r25
    204c:	59 06       	cpc	r5, r25
    204e:	09 f4       	brne	.+2      	; 0x2052 <main+0x6aa>
    2050:	61 c0       	rjmp	.+194    	; 0x2114 <main+0x76c>
    2052:	ef ef       	ldi	r30, 0xFF	; 255
    2054:	4e 1a       	sub	r4, r30
    2056:	5e 0a       	sbc	r5, r30
				
			if (sw2count==20)	//if short press
    2058:	f4 e1       	ldi	r31, 0x14	; 20
    205a:	4f 16       	cp	r4, r31
    205c:	51 04       	cpc	r5, r1
    205e:	09 f0       	breq	.+2      	; 0x2062 <main+0x6ba>
    2060:	53 c0       	rjmp	.+166    	; 0x2108 <main+0x760>
			{
				//----------short press
			
				if (selectediron==1 && settempheater1<850)
    2062:	29 81       	ldd	r18, Y+1	; 0x01
    2064:	21 30       	cpi	r18, 0x01	; 1
    2066:	31 f5       	brne	.+76     	; 0x20b4 <main+0x70c>
    2068:	80 91 e8 01 	lds	r24, 0x01E8
    206c:	90 91 e9 01 	lds	r25, 0x01E9
    2070:	82 35       	cpi	r24, 0x52	; 82
    2072:	93 40       	sbci	r25, 0x03	; 3
    2074:	08 f0       	brcs	.+2      	; 0x2078 <main+0x6d0>
    2076:	95 cd       	rjmp	.-1238   	; 0x1ba2 <main+0x1fa>
				{
					//decrece the set temp of heater 1
					settempheater1++;
    2078:	80 91 e8 01 	lds	r24, 0x01E8
    207c:	90 91 e9 01 	lds	r25, 0x01E9
    2080:	01 96       	adiw	r24, 0x01	; 1
    2082:	90 93 e9 01 	sts	0x01E9, r25
    2086:	80 93 e8 01 	sts	0x01E8, r24
					setCursor(0,2);
    208a:	62 e0       	ldi	r22, 0x02	; 2
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	0e 94 04 06 	call	0xc08	; 0xc08 <setCursor>
					wrightString(dtostrf(settempheater1,3,0,lcdtext)); //turn temp into a string);
    2092:	60 91 e8 01 	lds	r22, 0x01E8
    2096:	70 91 e9 01 	lds	r23, 0x01E9
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__floatunsisf>
    20a2:	01 e3       	ldi	r16, 0x31	; 49
    20a4:	12 e0       	ldi	r17, 0x02	; 2
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	43 e0       	ldi	r20, 0x03	; 3
    20aa:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <dtostrf>
    20ae:	0e 94 d5 05 	call	0xbaa	; 0xbaa <wrightString>
    20b2:	77 cd       	rjmp	.-1298   	; 0x1ba2 <main+0x1fa>
	
				}else if(selectediron==2 && settempheater2<850){
    20b4:	f9 81       	ldd	r31, Y+1	; 0x01
    20b6:	f2 30       	cpi	r31, 0x02	; 2
    20b8:	09 f0       	breq	.+2      	; 0x20bc <main+0x714>
    20ba:	73 cd       	rjmp	.-1306   	; 0x1ba2 <main+0x1fa>
    20bc:	80 91 e6 01 	lds	r24, 0x01E6
    20c0:	90 91 e7 01 	lds	r25, 0x01E7
    20c4:	82 35       	cpi	r24, 0x52	; 82
    20c6:	93 40       	sbci	r25, 0x03	; 3
    20c8:	08 f0       	brcs	.+2      	; 0x20cc <main+0x724>
    20ca:	6b cd       	rjmp	.-1322   	; 0x1ba2 <main+0x1fa>
					//decrece the set temp of heater 2
					settempheater2++;
    20cc:	80 91 e6 01 	lds	r24, 0x01E6
    20d0:	90 91 e7 01 	lds	r25, 0x01E7
    20d4:	01 96       	adiw	r24, 0x01	; 1
    20d6:	90 93 e7 01 	sts	0x01E7, r25
    20da:	80 93 e6 01 	sts	0x01E6, r24
					setCursor(1,2);
    20de:	62 e0       	ldi	r22, 0x02	; 2
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	0e 94 04 06 	call	0xc08	; 0xc08 <setCursor>
					wrightString(dtostrf(settempheater2,3,0,lcdtext));	//turn temp into a string);
    20e6:	60 91 e6 01 	lds	r22, 0x01E6
    20ea:	70 91 e7 01 	lds	r23, 0x01E7
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__floatunsisf>
    20f6:	01 e3       	ldi	r16, 0x31	; 49
    20f8:	12 e0       	ldi	r17, 0x02	; 2
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	43 e0       	ldi	r20, 0x03	; 3
    20fe:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <dtostrf>
    2102:	0e 94 d5 05 	call	0xbaa	; 0xbaa <wrightString>
    2106:	4d cd       	rjmp	.-1382   	; 0x1ba2 <main+0x1fa>
					
				}
			}
			
			
			if (sw2count>65000)	//if sw1 is held
    2108:	89 ee       	ldi	r24, 0xE9	; 233
    210a:	48 16       	cp	r4, r24
    210c:	8d ef       	ldi	r24, 0xFD	; 253
    210e:	58 06       	cpc	r5, r24
    2110:	08 f4       	brcc	.+2      	; 0x2114 <main+0x76c>
    2112:	47 cd       	rjmp	.-1394   	; 0x1ba2 <main+0x1fa>
			{
				//long press----------------
				if (selectediron==1 && settempheater1<845)
    2114:	99 81       	ldd	r25, Y+1	; 0x01
    2116:	91 30       	cpi	r25, 0x01	; 1
    2118:	31 f5       	brne	.+76     	; 0x2166 <main+0x7be>
    211a:	80 91 e8 01 	lds	r24, 0x01E8
    211e:	90 91 e9 01 	lds	r25, 0x01E9
    2122:	8d 34       	cpi	r24, 0x4D	; 77
    2124:	93 40       	sbci	r25, 0x03	; 3
    2126:	08 f0       	brcs	.+2      	; 0x212a <main+0x782>
    2128:	3c cd       	rjmp	.-1416   	; 0x1ba2 <main+0x1fa>
				{
					//decrece the set temp of heater 1
					settempheater1+=5;
    212a:	80 91 e8 01 	lds	r24, 0x01E8
    212e:	90 91 e9 01 	lds	r25, 0x01E9
    2132:	05 96       	adiw	r24, 0x05	; 5
    2134:	90 93 e9 01 	sts	0x01E9, r25
    2138:	80 93 e8 01 	sts	0x01E8, r24
					setCursor(0,2);
    213c:	62 e0       	ldi	r22, 0x02	; 2
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	0e 94 04 06 	call	0xc08	; 0xc08 <setCursor>
					wrightString(dtostrf(settempheater1,3,0,lcdtext)); //turn temp into a string);
    2144:	60 91 e8 01 	lds	r22, 0x01E8
    2148:	70 91 e9 01 	lds	r23, 0x01E9
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__floatunsisf>
    2154:	01 e3       	ldi	r16, 0x31	; 49
    2156:	12 e0       	ldi	r17, 0x02	; 2
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	43 e0       	ldi	r20, 0x03	; 3
    215c:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <dtostrf>
    2160:	0e 94 d5 05 	call	0xbaa	; 0xbaa <wrightString>
    2164:	1e cd       	rjmp	.-1476   	; 0x1ba2 <main+0x1fa>
					
				}else if(selectediron==2 && settempheater2<845){
    2166:	f9 81       	ldd	r31, Y+1	; 0x01
    2168:	f2 30       	cpi	r31, 0x02	; 2
    216a:	09 f0       	breq	.+2      	; 0x216e <main+0x7c6>
    216c:	1a cd       	rjmp	.-1484   	; 0x1ba2 <main+0x1fa>
    216e:	80 91 e6 01 	lds	r24, 0x01E6
    2172:	90 91 e7 01 	lds	r25, 0x01E7
    2176:	8d 34       	cpi	r24, 0x4D	; 77
    2178:	93 40       	sbci	r25, 0x03	; 3
    217a:	08 f0       	brcs	.+2      	; 0x217e <main+0x7d6>
    217c:	12 cd       	rjmp	.-1500   	; 0x1ba2 <main+0x1fa>
					//decrece the set temp of heater 2
					settempheater2+=5;
    217e:	80 91 e6 01 	lds	r24, 0x01E6
    2182:	90 91 e7 01 	lds	r25, 0x01E7
    2186:	05 96       	adiw	r24, 0x05	; 5
    2188:	90 93 e7 01 	sts	0x01E7, r25
    218c:	80 93 e6 01 	sts	0x01E6, r24
					setCursor(1,2);
    2190:	62 e0       	ldi	r22, 0x02	; 2
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	0e 94 04 06 	call	0xc08	; 0xc08 <setCursor>
					wrightString(dtostrf(settempheater2,3,0,lcdtext)); //turn temp into a string);
    2198:	60 91 e6 01 	lds	r22, 0x01E6
    219c:	70 91 e7 01 	lds	r23, 0x01E7
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__floatunsisf>
    21a8:	01 e3       	ldi	r16, 0x31	; 49
    21aa:	12 e0       	ldi	r17, 0x02	; 2
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	43 e0       	ldi	r20, 0x03	; 3
    21b0:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <dtostrf>
    21b4:	0e 94 d5 05 	call	0xbaa	; 0xbaa <wrightString>
    21b8:	f4 cc       	rjmp	.-1560   	; 0x1ba2 <main+0x1fa>

000021ba <__subsf3>:
    21ba:	50 58       	subi	r21, 0x80	; 128

000021bc <__addsf3>:
    21bc:	bb 27       	eor	r27, r27
    21be:	aa 27       	eor	r26, r26
    21c0:	0e d0       	rcall	.+28     	; 0x21de <__addsf3x>
    21c2:	70 c1       	rjmp	.+736    	; 0x24a4 <__fp_round>
    21c4:	61 d1       	rcall	.+706    	; 0x2488 <__fp_pscA>
    21c6:	30 f0       	brcs	.+12     	; 0x21d4 <__addsf3+0x18>
    21c8:	66 d1       	rcall	.+716    	; 0x2496 <__fp_pscB>
    21ca:	20 f0       	brcs	.+8      	; 0x21d4 <__addsf3+0x18>
    21cc:	31 f4       	brne	.+12     	; 0x21da <__addsf3+0x1e>
    21ce:	9f 3f       	cpi	r25, 0xFF	; 255
    21d0:	11 f4       	brne	.+4      	; 0x21d6 <__addsf3+0x1a>
    21d2:	1e f4       	brtc	.+6      	; 0x21da <__addsf3+0x1e>
    21d4:	56 c1       	rjmp	.+684    	; 0x2482 <__fp_nan>
    21d6:	0e f4       	brtc	.+2      	; 0x21da <__addsf3+0x1e>
    21d8:	e0 95       	com	r30
    21da:	e7 fb       	bst	r30, 7
    21dc:	4c c1       	rjmp	.+664    	; 0x2476 <__fp_inf>

000021de <__addsf3x>:
    21de:	e9 2f       	mov	r30, r25
    21e0:	72 d1       	rcall	.+740    	; 0x24c6 <__fp_split3>
    21e2:	80 f3       	brcs	.-32     	; 0x21c4 <__addsf3+0x8>
    21e4:	ba 17       	cp	r27, r26
    21e6:	62 07       	cpc	r22, r18
    21e8:	73 07       	cpc	r23, r19
    21ea:	84 07       	cpc	r24, r20
    21ec:	95 07       	cpc	r25, r21
    21ee:	18 f0       	brcs	.+6      	; 0x21f6 <__addsf3x+0x18>
    21f0:	71 f4       	brne	.+28     	; 0x220e <__addsf3x+0x30>
    21f2:	9e f5       	brtc	.+102    	; 0x225a <__addsf3x+0x7c>
    21f4:	8a c1       	rjmp	.+788    	; 0x250a <__fp_zero>
    21f6:	0e f4       	brtc	.+2      	; 0x21fa <__addsf3x+0x1c>
    21f8:	e0 95       	com	r30
    21fa:	0b 2e       	mov	r0, r27
    21fc:	ba 2f       	mov	r27, r26
    21fe:	a0 2d       	mov	r26, r0
    2200:	0b 01       	movw	r0, r22
    2202:	b9 01       	movw	r22, r18
    2204:	90 01       	movw	r18, r0
    2206:	0c 01       	movw	r0, r24
    2208:	ca 01       	movw	r24, r20
    220a:	a0 01       	movw	r20, r0
    220c:	11 24       	eor	r1, r1
    220e:	ff 27       	eor	r31, r31
    2210:	59 1b       	sub	r21, r25
    2212:	99 f0       	breq	.+38     	; 0x223a <__addsf3x+0x5c>
    2214:	59 3f       	cpi	r21, 0xF9	; 249
    2216:	50 f4       	brcc	.+20     	; 0x222c <__addsf3x+0x4e>
    2218:	50 3e       	cpi	r21, 0xE0	; 224
    221a:	68 f1       	brcs	.+90     	; 0x2276 <__addsf3x+0x98>
    221c:	1a 16       	cp	r1, r26
    221e:	f0 40       	sbci	r31, 0x00	; 0
    2220:	a2 2f       	mov	r26, r18
    2222:	23 2f       	mov	r18, r19
    2224:	34 2f       	mov	r19, r20
    2226:	44 27       	eor	r20, r20
    2228:	58 5f       	subi	r21, 0xF8	; 248
    222a:	f3 cf       	rjmp	.-26     	; 0x2212 <__addsf3x+0x34>
    222c:	46 95       	lsr	r20
    222e:	37 95       	ror	r19
    2230:	27 95       	ror	r18
    2232:	a7 95       	ror	r26
    2234:	f0 40       	sbci	r31, 0x00	; 0
    2236:	53 95       	inc	r21
    2238:	c9 f7       	brne	.-14     	; 0x222c <__addsf3x+0x4e>
    223a:	7e f4       	brtc	.+30     	; 0x225a <__addsf3x+0x7c>
    223c:	1f 16       	cp	r1, r31
    223e:	ba 0b       	sbc	r27, r26
    2240:	62 0b       	sbc	r22, r18
    2242:	73 0b       	sbc	r23, r19
    2244:	84 0b       	sbc	r24, r20
    2246:	ba f0       	brmi	.+46     	; 0x2276 <__addsf3x+0x98>
    2248:	91 50       	subi	r25, 0x01	; 1
    224a:	a1 f0       	breq	.+40     	; 0x2274 <__addsf3x+0x96>
    224c:	ff 0f       	add	r31, r31
    224e:	bb 1f       	adc	r27, r27
    2250:	66 1f       	adc	r22, r22
    2252:	77 1f       	adc	r23, r23
    2254:	88 1f       	adc	r24, r24
    2256:	c2 f7       	brpl	.-16     	; 0x2248 <__addsf3x+0x6a>
    2258:	0e c0       	rjmp	.+28     	; 0x2276 <__addsf3x+0x98>
    225a:	ba 0f       	add	r27, r26
    225c:	62 1f       	adc	r22, r18
    225e:	73 1f       	adc	r23, r19
    2260:	84 1f       	adc	r24, r20
    2262:	48 f4       	brcc	.+18     	; 0x2276 <__addsf3x+0x98>
    2264:	87 95       	ror	r24
    2266:	77 95       	ror	r23
    2268:	67 95       	ror	r22
    226a:	b7 95       	ror	r27
    226c:	f7 95       	ror	r31
    226e:	9e 3f       	cpi	r25, 0xFE	; 254
    2270:	08 f0       	brcs	.+2      	; 0x2274 <__addsf3x+0x96>
    2272:	b3 cf       	rjmp	.-154    	; 0x21da <__addsf3+0x1e>
    2274:	93 95       	inc	r25
    2276:	88 0f       	add	r24, r24
    2278:	08 f0       	brcs	.+2      	; 0x227c <__addsf3x+0x9e>
    227a:	99 27       	eor	r25, r25
    227c:	ee 0f       	add	r30, r30
    227e:	97 95       	ror	r25
    2280:	87 95       	ror	r24
    2282:	08 95       	ret

00002284 <__cmpsf2>:
    2284:	d4 d0       	rcall	.+424    	; 0x242e <__fp_cmp>
    2286:	08 f4       	brcc	.+2      	; 0x228a <__cmpsf2+0x6>
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	08 95       	ret

0000228c <__divsf3>:
    228c:	0c d0       	rcall	.+24     	; 0x22a6 <__divsf3x>
    228e:	0a c1       	rjmp	.+532    	; 0x24a4 <__fp_round>
    2290:	02 d1       	rcall	.+516    	; 0x2496 <__fp_pscB>
    2292:	40 f0       	brcs	.+16     	; 0x22a4 <__divsf3+0x18>
    2294:	f9 d0       	rcall	.+498    	; 0x2488 <__fp_pscA>
    2296:	30 f0       	brcs	.+12     	; 0x22a4 <__divsf3+0x18>
    2298:	21 f4       	brne	.+8      	; 0x22a2 <__divsf3+0x16>
    229a:	5f 3f       	cpi	r21, 0xFF	; 255
    229c:	19 f0       	breq	.+6      	; 0x22a4 <__divsf3+0x18>
    229e:	eb c0       	rjmp	.+470    	; 0x2476 <__fp_inf>
    22a0:	51 11       	cpse	r21, r1
    22a2:	34 c1       	rjmp	.+616    	; 0x250c <__fp_szero>
    22a4:	ee c0       	rjmp	.+476    	; 0x2482 <__fp_nan>

000022a6 <__divsf3x>:
    22a6:	0f d1       	rcall	.+542    	; 0x24c6 <__fp_split3>
    22a8:	98 f3       	brcs	.-26     	; 0x2290 <__divsf3+0x4>

000022aa <__divsf3_pse>:
    22aa:	99 23       	and	r25, r25
    22ac:	c9 f3       	breq	.-14     	; 0x22a0 <__divsf3+0x14>
    22ae:	55 23       	and	r21, r21
    22b0:	b1 f3       	breq	.-20     	; 0x229e <__divsf3+0x12>
    22b2:	95 1b       	sub	r25, r21
    22b4:	55 0b       	sbc	r21, r21
    22b6:	bb 27       	eor	r27, r27
    22b8:	aa 27       	eor	r26, r26
    22ba:	62 17       	cp	r22, r18
    22bc:	73 07       	cpc	r23, r19
    22be:	84 07       	cpc	r24, r20
    22c0:	38 f0       	brcs	.+14     	; 0x22d0 <__divsf3_pse+0x26>
    22c2:	9f 5f       	subi	r25, 0xFF	; 255
    22c4:	5f 4f       	sbci	r21, 0xFF	; 255
    22c6:	22 0f       	add	r18, r18
    22c8:	33 1f       	adc	r19, r19
    22ca:	44 1f       	adc	r20, r20
    22cc:	aa 1f       	adc	r26, r26
    22ce:	a9 f3       	breq	.-22     	; 0x22ba <__divsf3_pse+0x10>
    22d0:	33 d0       	rcall	.+102    	; 0x2338 <__divsf3_pse+0x8e>
    22d2:	0e 2e       	mov	r0, r30
    22d4:	3a f0       	brmi	.+14     	; 0x22e4 <__divsf3_pse+0x3a>
    22d6:	e0 e8       	ldi	r30, 0x80	; 128
    22d8:	30 d0       	rcall	.+96     	; 0x233a <__divsf3_pse+0x90>
    22da:	91 50       	subi	r25, 0x01	; 1
    22dc:	50 40       	sbci	r21, 0x00	; 0
    22de:	e6 95       	lsr	r30
    22e0:	00 1c       	adc	r0, r0
    22e2:	ca f7       	brpl	.-14     	; 0x22d6 <__divsf3_pse+0x2c>
    22e4:	29 d0       	rcall	.+82     	; 0x2338 <__divsf3_pse+0x8e>
    22e6:	fe 2f       	mov	r31, r30
    22e8:	27 d0       	rcall	.+78     	; 0x2338 <__divsf3_pse+0x8e>
    22ea:	66 0f       	add	r22, r22
    22ec:	77 1f       	adc	r23, r23
    22ee:	88 1f       	adc	r24, r24
    22f0:	bb 1f       	adc	r27, r27
    22f2:	26 17       	cp	r18, r22
    22f4:	37 07       	cpc	r19, r23
    22f6:	48 07       	cpc	r20, r24
    22f8:	ab 07       	cpc	r26, r27
    22fa:	b0 e8       	ldi	r27, 0x80	; 128
    22fc:	09 f0       	breq	.+2      	; 0x2300 <__divsf3_pse+0x56>
    22fe:	bb 0b       	sbc	r27, r27
    2300:	80 2d       	mov	r24, r0
    2302:	bf 01       	movw	r22, r30
    2304:	ff 27       	eor	r31, r31
    2306:	93 58       	subi	r25, 0x83	; 131
    2308:	5f 4f       	sbci	r21, 0xFF	; 255
    230a:	2a f0       	brmi	.+10     	; 0x2316 <__divsf3_pse+0x6c>
    230c:	9e 3f       	cpi	r25, 0xFE	; 254
    230e:	51 05       	cpc	r21, r1
    2310:	68 f0       	brcs	.+26     	; 0x232c <__divsf3_pse+0x82>
    2312:	b1 c0       	rjmp	.+354    	; 0x2476 <__fp_inf>
    2314:	fb c0       	rjmp	.+502    	; 0x250c <__fp_szero>
    2316:	5f 3f       	cpi	r21, 0xFF	; 255
    2318:	ec f3       	brlt	.-6      	; 0x2314 <__divsf3_pse+0x6a>
    231a:	98 3e       	cpi	r25, 0xE8	; 232
    231c:	dc f3       	brlt	.-10     	; 0x2314 <__divsf3_pse+0x6a>
    231e:	86 95       	lsr	r24
    2320:	77 95       	ror	r23
    2322:	67 95       	ror	r22
    2324:	b7 95       	ror	r27
    2326:	f7 95       	ror	r31
    2328:	9f 5f       	subi	r25, 0xFF	; 255
    232a:	c9 f7       	brne	.-14     	; 0x231e <__divsf3_pse+0x74>
    232c:	88 0f       	add	r24, r24
    232e:	91 1d       	adc	r25, r1
    2330:	96 95       	lsr	r25
    2332:	87 95       	ror	r24
    2334:	97 f9       	bld	r25, 7
    2336:	08 95       	ret
    2338:	e1 e0       	ldi	r30, 0x01	; 1
    233a:	66 0f       	add	r22, r22
    233c:	77 1f       	adc	r23, r23
    233e:	88 1f       	adc	r24, r24
    2340:	bb 1f       	adc	r27, r27
    2342:	62 17       	cp	r22, r18
    2344:	73 07       	cpc	r23, r19
    2346:	84 07       	cpc	r24, r20
    2348:	ba 07       	cpc	r27, r26
    234a:	20 f0       	brcs	.+8      	; 0x2354 <__divsf3_pse+0xaa>
    234c:	62 1b       	sub	r22, r18
    234e:	73 0b       	sbc	r23, r19
    2350:	84 0b       	sbc	r24, r20
    2352:	ba 0b       	sbc	r27, r26
    2354:	ee 1f       	adc	r30, r30
    2356:	88 f7       	brcc	.-30     	; 0x233a <__divsf3_pse+0x90>
    2358:	e0 95       	com	r30
    235a:	08 95       	ret

0000235c <__fixunssfsi>:
    235c:	bc d0       	rcall	.+376    	; 0x24d6 <__fp_splitA>
    235e:	88 f0       	brcs	.+34     	; 0x2382 <__fixunssfsi+0x26>
    2360:	9f 57       	subi	r25, 0x7F	; 127
    2362:	90 f0       	brcs	.+36     	; 0x2388 <__fixunssfsi+0x2c>
    2364:	b9 2f       	mov	r27, r25
    2366:	99 27       	eor	r25, r25
    2368:	b7 51       	subi	r27, 0x17	; 23
    236a:	a0 f0       	brcs	.+40     	; 0x2394 <__fixunssfsi+0x38>
    236c:	d1 f0       	breq	.+52     	; 0x23a2 <__fixunssfsi+0x46>
    236e:	66 0f       	add	r22, r22
    2370:	77 1f       	adc	r23, r23
    2372:	88 1f       	adc	r24, r24
    2374:	99 1f       	adc	r25, r25
    2376:	1a f0       	brmi	.+6      	; 0x237e <__fixunssfsi+0x22>
    2378:	ba 95       	dec	r27
    237a:	c9 f7       	brne	.-14     	; 0x236e <__fixunssfsi+0x12>
    237c:	12 c0       	rjmp	.+36     	; 0x23a2 <__fixunssfsi+0x46>
    237e:	b1 30       	cpi	r27, 0x01	; 1
    2380:	81 f0       	breq	.+32     	; 0x23a2 <__fixunssfsi+0x46>
    2382:	c3 d0       	rcall	.+390    	; 0x250a <__fp_zero>
    2384:	b1 e0       	ldi	r27, 0x01	; 1
    2386:	08 95       	ret
    2388:	c0 c0       	rjmp	.+384    	; 0x250a <__fp_zero>
    238a:	67 2f       	mov	r22, r23
    238c:	78 2f       	mov	r23, r24
    238e:	88 27       	eor	r24, r24
    2390:	b8 5f       	subi	r27, 0xF8	; 248
    2392:	39 f0       	breq	.+14     	; 0x23a2 <__fixunssfsi+0x46>
    2394:	b9 3f       	cpi	r27, 0xF9	; 249
    2396:	cc f3       	brlt	.-14     	; 0x238a <__fixunssfsi+0x2e>
    2398:	86 95       	lsr	r24
    239a:	77 95       	ror	r23
    239c:	67 95       	ror	r22
    239e:	b3 95       	inc	r27
    23a0:	d9 f7       	brne	.-10     	; 0x2398 <__fixunssfsi+0x3c>
    23a2:	3e f4       	brtc	.+14     	; 0x23b2 <__fixunssfsi+0x56>
    23a4:	90 95       	com	r25
    23a6:	80 95       	com	r24
    23a8:	70 95       	com	r23
    23aa:	61 95       	neg	r22
    23ac:	7f 4f       	sbci	r23, 0xFF	; 255
    23ae:	8f 4f       	sbci	r24, 0xFF	; 255
    23b0:	9f 4f       	sbci	r25, 0xFF	; 255
    23b2:	08 95       	ret

000023b4 <__floatunsisf>:
    23b4:	e8 94       	clt
    23b6:	09 c0       	rjmp	.+18     	; 0x23ca <__floatsisf+0x12>

000023b8 <__floatsisf>:
    23b8:	97 fb       	bst	r25, 7
    23ba:	3e f4       	brtc	.+14     	; 0x23ca <__floatsisf+0x12>
    23bc:	90 95       	com	r25
    23be:	80 95       	com	r24
    23c0:	70 95       	com	r23
    23c2:	61 95       	neg	r22
    23c4:	7f 4f       	sbci	r23, 0xFF	; 255
    23c6:	8f 4f       	sbci	r24, 0xFF	; 255
    23c8:	9f 4f       	sbci	r25, 0xFF	; 255
    23ca:	99 23       	and	r25, r25
    23cc:	a9 f0       	breq	.+42     	; 0x23f8 <__floatsisf+0x40>
    23ce:	f9 2f       	mov	r31, r25
    23d0:	96 e9       	ldi	r25, 0x96	; 150
    23d2:	bb 27       	eor	r27, r27
    23d4:	93 95       	inc	r25
    23d6:	f6 95       	lsr	r31
    23d8:	87 95       	ror	r24
    23da:	77 95       	ror	r23
    23dc:	67 95       	ror	r22
    23de:	b7 95       	ror	r27
    23e0:	f1 11       	cpse	r31, r1
    23e2:	f8 cf       	rjmp	.-16     	; 0x23d4 <__floatsisf+0x1c>
    23e4:	fa f4       	brpl	.+62     	; 0x2424 <__floatsisf+0x6c>
    23e6:	bb 0f       	add	r27, r27
    23e8:	11 f4       	brne	.+4      	; 0x23ee <__floatsisf+0x36>
    23ea:	60 ff       	sbrs	r22, 0
    23ec:	1b c0       	rjmp	.+54     	; 0x2424 <__floatsisf+0x6c>
    23ee:	6f 5f       	subi	r22, 0xFF	; 255
    23f0:	7f 4f       	sbci	r23, 0xFF	; 255
    23f2:	8f 4f       	sbci	r24, 0xFF	; 255
    23f4:	9f 4f       	sbci	r25, 0xFF	; 255
    23f6:	16 c0       	rjmp	.+44     	; 0x2424 <__floatsisf+0x6c>
    23f8:	88 23       	and	r24, r24
    23fa:	11 f0       	breq	.+4      	; 0x2400 <__floatsisf+0x48>
    23fc:	96 e9       	ldi	r25, 0x96	; 150
    23fe:	11 c0       	rjmp	.+34     	; 0x2422 <__floatsisf+0x6a>
    2400:	77 23       	and	r23, r23
    2402:	21 f0       	breq	.+8      	; 0x240c <__floatsisf+0x54>
    2404:	9e e8       	ldi	r25, 0x8E	; 142
    2406:	87 2f       	mov	r24, r23
    2408:	76 2f       	mov	r23, r22
    240a:	05 c0       	rjmp	.+10     	; 0x2416 <__floatsisf+0x5e>
    240c:	66 23       	and	r22, r22
    240e:	71 f0       	breq	.+28     	; 0x242c <__floatsisf+0x74>
    2410:	96 e8       	ldi	r25, 0x86	; 134
    2412:	86 2f       	mov	r24, r22
    2414:	70 e0       	ldi	r23, 0x00	; 0
    2416:	60 e0       	ldi	r22, 0x00	; 0
    2418:	2a f0       	brmi	.+10     	; 0x2424 <__floatsisf+0x6c>
    241a:	9a 95       	dec	r25
    241c:	66 0f       	add	r22, r22
    241e:	77 1f       	adc	r23, r23
    2420:	88 1f       	adc	r24, r24
    2422:	da f7       	brpl	.-10     	; 0x241a <__floatsisf+0x62>
    2424:	88 0f       	add	r24, r24
    2426:	96 95       	lsr	r25
    2428:	87 95       	ror	r24
    242a:	97 f9       	bld	r25, 7
    242c:	08 95       	ret

0000242e <__fp_cmp>:
    242e:	99 0f       	add	r25, r25
    2430:	00 08       	sbc	r0, r0
    2432:	55 0f       	add	r21, r21
    2434:	aa 0b       	sbc	r26, r26
    2436:	e0 e8       	ldi	r30, 0x80	; 128
    2438:	fe ef       	ldi	r31, 0xFE	; 254
    243a:	16 16       	cp	r1, r22
    243c:	17 06       	cpc	r1, r23
    243e:	e8 07       	cpc	r30, r24
    2440:	f9 07       	cpc	r31, r25
    2442:	c0 f0       	brcs	.+48     	; 0x2474 <__fp_cmp+0x46>
    2444:	12 16       	cp	r1, r18
    2446:	13 06       	cpc	r1, r19
    2448:	e4 07       	cpc	r30, r20
    244a:	f5 07       	cpc	r31, r21
    244c:	98 f0       	brcs	.+38     	; 0x2474 <__fp_cmp+0x46>
    244e:	62 1b       	sub	r22, r18
    2450:	73 0b       	sbc	r23, r19
    2452:	84 0b       	sbc	r24, r20
    2454:	95 0b       	sbc	r25, r21
    2456:	39 f4       	brne	.+14     	; 0x2466 <__fp_cmp+0x38>
    2458:	0a 26       	eor	r0, r26
    245a:	61 f0       	breq	.+24     	; 0x2474 <__fp_cmp+0x46>
    245c:	23 2b       	or	r18, r19
    245e:	24 2b       	or	r18, r20
    2460:	25 2b       	or	r18, r21
    2462:	21 f4       	brne	.+8      	; 0x246c <__fp_cmp+0x3e>
    2464:	08 95       	ret
    2466:	0a 26       	eor	r0, r26
    2468:	09 f4       	brne	.+2      	; 0x246c <__fp_cmp+0x3e>
    246a:	a1 40       	sbci	r26, 0x01	; 1
    246c:	a6 95       	lsr	r26
    246e:	8f ef       	ldi	r24, 0xFF	; 255
    2470:	81 1d       	adc	r24, r1
    2472:	81 1d       	adc	r24, r1
    2474:	08 95       	ret

00002476 <__fp_inf>:
    2476:	97 f9       	bld	r25, 7
    2478:	9f 67       	ori	r25, 0x7F	; 127
    247a:	80 e8       	ldi	r24, 0x80	; 128
    247c:	70 e0       	ldi	r23, 0x00	; 0
    247e:	60 e0       	ldi	r22, 0x00	; 0
    2480:	08 95       	ret

00002482 <__fp_nan>:
    2482:	9f ef       	ldi	r25, 0xFF	; 255
    2484:	80 ec       	ldi	r24, 0xC0	; 192
    2486:	08 95       	ret

00002488 <__fp_pscA>:
    2488:	00 24       	eor	r0, r0
    248a:	0a 94       	dec	r0
    248c:	16 16       	cp	r1, r22
    248e:	17 06       	cpc	r1, r23
    2490:	18 06       	cpc	r1, r24
    2492:	09 06       	cpc	r0, r25
    2494:	08 95       	ret

00002496 <__fp_pscB>:
    2496:	00 24       	eor	r0, r0
    2498:	0a 94       	dec	r0
    249a:	12 16       	cp	r1, r18
    249c:	13 06       	cpc	r1, r19
    249e:	14 06       	cpc	r1, r20
    24a0:	05 06       	cpc	r0, r21
    24a2:	08 95       	ret

000024a4 <__fp_round>:
    24a4:	09 2e       	mov	r0, r25
    24a6:	03 94       	inc	r0
    24a8:	00 0c       	add	r0, r0
    24aa:	11 f4       	brne	.+4      	; 0x24b0 <__fp_round+0xc>
    24ac:	88 23       	and	r24, r24
    24ae:	52 f0       	brmi	.+20     	; 0x24c4 <__fp_round+0x20>
    24b0:	bb 0f       	add	r27, r27
    24b2:	40 f4       	brcc	.+16     	; 0x24c4 <__fp_round+0x20>
    24b4:	bf 2b       	or	r27, r31
    24b6:	11 f4       	brne	.+4      	; 0x24bc <__fp_round+0x18>
    24b8:	60 ff       	sbrs	r22, 0
    24ba:	04 c0       	rjmp	.+8      	; 0x24c4 <__fp_round+0x20>
    24bc:	6f 5f       	subi	r22, 0xFF	; 255
    24be:	7f 4f       	sbci	r23, 0xFF	; 255
    24c0:	8f 4f       	sbci	r24, 0xFF	; 255
    24c2:	9f 4f       	sbci	r25, 0xFF	; 255
    24c4:	08 95       	ret

000024c6 <__fp_split3>:
    24c6:	57 fd       	sbrc	r21, 7
    24c8:	90 58       	subi	r25, 0x80	; 128
    24ca:	44 0f       	add	r20, r20
    24cc:	55 1f       	adc	r21, r21
    24ce:	59 f0       	breq	.+22     	; 0x24e6 <__fp_splitA+0x10>
    24d0:	5f 3f       	cpi	r21, 0xFF	; 255
    24d2:	71 f0       	breq	.+28     	; 0x24f0 <__fp_splitA+0x1a>
    24d4:	47 95       	ror	r20

000024d6 <__fp_splitA>:
    24d6:	88 0f       	add	r24, r24
    24d8:	97 fb       	bst	r25, 7
    24da:	99 1f       	adc	r25, r25
    24dc:	61 f0       	breq	.+24     	; 0x24f6 <__fp_splitA+0x20>
    24de:	9f 3f       	cpi	r25, 0xFF	; 255
    24e0:	79 f0       	breq	.+30     	; 0x2500 <__fp_splitA+0x2a>
    24e2:	87 95       	ror	r24
    24e4:	08 95       	ret
    24e6:	12 16       	cp	r1, r18
    24e8:	13 06       	cpc	r1, r19
    24ea:	14 06       	cpc	r1, r20
    24ec:	55 1f       	adc	r21, r21
    24ee:	f2 cf       	rjmp	.-28     	; 0x24d4 <__fp_split3+0xe>
    24f0:	46 95       	lsr	r20
    24f2:	f1 df       	rcall	.-30     	; 0x24d6 <__fp_splitA>
    24f4:	08 c0       	rjmp	.+16     	; 0x2506 <__fp_splitA+0x30>
    24f6:	16 16       	cp	r1, r22
    24f8:	17 06       	cpc	r1, r23
    24fa:	18 06       	cpc	r1, r24
    24fc:	99 1f       	adc	r25, r25
    24fe:	f1 cf       	rjmp	.-30     	; 0x24e2 <__fp_splitA+0xc>
    2500:	86 95       	lsr	r24
    2502:	71 05       	cpc	r23, r1
    2504:	61 05       	cpc	r22, r1
    2506:	08 94       	sec
    2508:	08 95       	ret

0000250a <__fp_zero>:
    250a:	e8 94       	clt

0000250c <__fp_szero>:
    250c:	bb 27       	eor	r27, r27
    250e:	66 27       	eor	r22, r22
    2510:	77 27       	eor	r23, r23
    2512:	cb 01       	movw	r24, r22
    2514:	97 f9       	bld	r25, 7
    2516:	08 95       	ret

00002518 <__gesf2>:
    2518:	8a df       	rcall	.-236    	; 0x242e <__fp_cmp>
    251a:	08 f4       	brcc	.+2      	; 0x251e <__gesf2+0x6>
    251c:	8f ef       	ldi	r24, 0xFF	; 255
    251e:	08 95       	ret

00002520 <__mulsf3>:
    2520:	0b d0       	rcall	.+22     	; 0x2538 <__mulsf3x>
    2522:	c0 cf       	rjmp	.-128    	; 0x24a4 <__fp_round>
    2524:	b1 df       	rcall	.-158    	; 0x2488 <__fp_pscA>
    2526:	28 f0       	brcs	.+10     	; 0x2532 <__mulsf3+0x12>
    2528:	b6 df       	rcall	.-148    	; 0x2496 <__fp_pscB>
    252a:	18 f0       	brcs	.+6      	; 0x2532 <__mulsf3+0x12>
    252c:	95 23       	and	r25, r21
    252e:	09 f0       	breq	.+2      	; 0x2532 <__mulsf3+0x12>
    2530:	a2 cf       	rjmp	.-188    	; 0x2476 <__fp_inf>
    2532:	a7 cf       	rjmp	.-178    	; 0x2482 <__fp_nan>
    2534:	11 24       	eor	r1, r1
    2536:	ea cf       	rjmp	.-44     	; 0x250c <__fp_szero>

00002538 <__mulsf3x>:
    2538:	c6 df       	rcall	.-116    	; 0x24c6 <__fp_split3>
    253a:	a0 f3       	brcs	.-24     	; 0x2524 <__mulsf3+0x4>

0000253c <__mulsf3_pse>:
    253c:	95 9f       	mul	r25, r21
    253e:	d1 f3       	breq	.-12     	; 0x2534 <__mulsf3+0x14>
    2540:	95 0f       	add	r25, r21
    2542:	50 e0       	ldi	r21, 0x00	; 0
    2544:	55 1f       	adc	r21, r21
    2546:	62 9f       	mul	r22, r18
    2548:	f0 01       	movw	r30, r0
    254a:	72 9f       	mul	r23, r18
    254c:	bb 27       	eor	r27, r27
    254e:	f0 0d       	add	r31, r0
    2550:	b1 1d       	adc	r27, r1
    2552:	63 9f       	mul	r22, r19
    2554:	aa 27       	eor	r26, r26
    2556:	f0 0d       	add	r31, r0
    2558:	b1 1d       	adc	r27, r1
    255a:	aa 1f       	adc	r26, r26
    255c:	64 9f       	mul	r22, r20
    255e:	66 27       	eor	r22, r22
    2560:	b0 0d       	add	r27, r0
    2562:	a1 1d       	adc	r26, r1
    2564:	66 1f       	adc	r22, r22
    2566:	82 9f       	mul	r24, r18
    2568:	22 27       	eor	r18, r18
    256a:	b0 0d       	add	r27, r0
    256c:	a1 1d       	adc	r26, r1
    256e:	62 1f       	adc	r22, r18
    2570:	73 9f       	mul	r23, r19
    2572:	b0 0d       	add	r27, r0
    2574:	a1 1d       	adc	r26, r1
    2576:	62 1f       	adc	r22, r18
    2578:	83 9f       	mul	r24, r19
    257a:	a0 0d       	add	r26, r0
    257c:	61 1d       	adc	r22, r1
    257e:	22 1f       	adc	r18, r18
    2580:	74 9f       	mul	r23, r20
    2582:	33 27       	eor	r19, r19
    2584:	a0 0d       	add	r26, r0
    2586:	61 1d       	adc	r22, r1
    2588:	23 1f       	adc	r18, r19
    258a:	84 9f       	mul	r24, r20
    258c:	60 0d       	add	r22, r0
    258e:	21 1d       	adc	r18, r1
    2590:	82 2f       	mov	r24, r18
    2592:	76 2f       	mov	r23, r22
    2594:	6a 2f       	mov	r22, r26
    2596:	11 24       	eor	r1, r1
    2598:	9f 57       	subi	r25, 0x7F	; 127
    259a:	50 40       	sbci	r21, 0x00	; 0
    259c:	8a f0       	brmi	.+34     	; 0x25c0 <__mulsf3_pse+0x84>
    259e:	e1 f0       	breq	.+56     	; 0x25d8 <__mulsf3_pse+0x9c>
    25a0:	88 23       	and	r24, r24
    25a2:	4a f0       	brmi	.+18     	; 0x25b6 <__mulsf3_pse+0x7a>
    25a4:	ee 0f       	add	r30, r30
    25a6:	ff 1f       	adc	r31, r31
    25a8:	bb 1f       	adc	r27, r27
    25aa:	66 1f       	adc	r22, r22
    25ac:	77 1f       	adc	r23, r23
    25ae:	88 1f       	adc	r24, r24
    25b0:	91 50       	subi	r25, 0x01	; 1
    25b2:	50 40       	sbci	r21, 0x00	; 0
    25b4:	a9 f7       	brne	.-22     	; 0x25a0 <__mulsf3_pse+0x64>
    25b6:	9e 3f       	cpi	r25, 0xFE	; 254
    25b8:	51 05       	cpc	r21, r1
    25ba:	70 f0       	brcs	.+28     	; 0x25d8 <__mulsf3_pse+0x9c>
    25bc:	5c cf       	rjmp	.-328    	; 0x2476 <__fp_inf>
    25be:	a6 cf       	rjmp	.-180    	; 0x250c <__fp_szero>
    25c0:	5f 3f       	cpi	r21, 0xFF	; 255
    25c2:	ec f3       	brlt	.-6      	; 0x25be <__mulsf3_pse+0x82>
    25c4:	98 3e       	cpi	r25, 0xE8	; 232
    25c6:	dc f3       	brlt	.-10     	; 0x25be <__mulsf3_pse+0x82>
    25c8:	86 95       	lsr	r24
    25ca:	77 95       	ror	r23
    25cc:	67 95       	ror	r22
    25ce:	b7 95       	ror	r27
    25d0:	f7 95       	ror	r31
    25d2:	e7 95       	ror	r30
    25d4:	9f 5f       	subi	r25, 0xFF	; 255
    25d6:	c1 f7       	brne	.-16     	; 0x25c8 <__mulsf3_pse+0x8c>
    25d8:	fe 2b       	or	r31, r30
    25da:	88 0f       	add	r24, r24
    25dc:	91 1d       	adc	r25, r1
    25de:	96 95       	lsr	r25
    25e0:	87 95       	ror	r24
    25e2:	97 f9       	bld	r25, 7
    25e4:	08 95       	ret

000025e6 <pow>:
    25e6:	fa 01       	movw	r30, r20
    25e8:	ee 0f       	add	r30, r30
    25ea:	ff 1f       	adc	r31, r31
    25ec:	30 96       	adiw	r30, 0x00	; 0
    25ee:	21 05       	cpc	r18, r1
    25f0:	31 05       	cpc	r19, r1
    25f2:	99 f1       	breq	.+102    	; 0x265a <pow+0x74>
    25f4:	61 15       	cp	r22, r1
    25f6:	71 05       	cpc	r23, r1
    25f8:	61 f4       	brne	.+24     	; 0x2612 <pow+0x2c>
    25fa:	80 38       	cpi	r24, 0x80	; 128
    25fc:	bf e3       	ldi	r27, 0x3F	; 63
    25fe:	9b 07       	cpc	r25, r27
    2600:	49 f1       	breq	.+82     	; 0x2654 <pow+0x6e>
    2602:	68 94       	set
    2604:	90 38       	cpi	r25, 0x80	; 128
    2606:	81 05       	cpc	r24, r1
    2608:	61 f0       	breq	.+24     	; 0x2622 <pow+0x3c>
    260a:	80 38       	cpi	r24, 0x80	; 128
    260c:	bf ef       	ldi	r27, 0xFF	; 255
    260e:	9b 07       	cpc	r25, r27
    2610:	41 f0       	breq	.+16     	; 0x2622 <pow+0x3c>
    2612:	99 23       	and	r25, r25
    2614:	42 f5       	brpl	.+80     	; 0x2666 <pow+0x80>
    2616:	ff 3f       	cpi	r31, 0xFF	; 255
    2618:	e1 05       	cpc	r30, r1
    261a:	31 05       	cpc	r19, r1
    261c:	21 05       	cpc	r18, r1
    261e:	11 f1       	breq	.+68     	; 0x2664 <pow+0x7e>
    2620:	e8 94       	clt
    2622:	08 94       	sec
    2624:	e7 95       	ror	r30
    2626:	d9 01       	movw	r26, r18
    2628:	aa 23       	and	r26, r26
    262a:	29 f4       	brne	.+10     	; 0x2636 <pow+0x50>
    262c:	ab 2f       	mov	r26, r27
    262e:	be 2f       	mov	r27, r30
    2630:	f8 5f       	subi	r31, 0xF8	; 248
    2632:	d0 f3       	brcs	.-12     	; 0x2628 <pow+0x42>
    2634:	10 c0       	rjmp	.+32     	; 0x2656 <pow+0x70>
    2636:	ff 5f       	subi	r31, 0xFF	; 255
    2638:	70 f4       	brcc	.+28     	; 0x2656 <pow+0x70>
    263a:	a6 95       	lsr	r26
    263c:	e0 f7       	brcc	.-8      	; 0x2636 <pow+0x50>
    263e:	f7 39       	cpi	r31, 0x97	; 151
    2640:	50 f0       	brcs	.+20     	; 0x2656 <pow+0x70>
    2642:	19 f0       	breq	.+6      	; 0x264a <pow+0x64>
    2644:	ff 3a       	cpi	r31, 0xAF	; 175
    2646:	38 f4       	brcc	.+14     	; 0x2656 <pow+0x70>
    2648:	9f 77       	andi	r25, 0x7F	; 127
    264a:	9f 93       	push	r25
    264c:	0c d0       	rcall	.+24     	; 0x2666 <pow+0x80>
    264e:	0f 90       	pop	r0
    2650:	07 fc       	sbrc	r0, 7
    2652:	90 58       	subi	r25, 0x80	; 128
    2654:	08 95       	ret
    2656:	3e f0       	brts	.+14     	; 0x2666 <pow+0x80>
    2658:	14 cf       	rjmp	.-472    	; 0x2482 <__fp_nan>
    265a:	60 e0       	ldi	r22, 0x00	; 0
    265c:	70 e0       	ldi	r23, 0x00	; 0
    265e:	80 e8       	ldi	r24, 0x80	; 128
    2660:	9f e3       	ldi	r25, 0x3F	; 63
    2662:	08 95       	ret
    2664:	4f e7       	ldi	r20, 0x7F	; 127
    2666:	9f 77       	andi	r25, 0x7F	; 127
    2668:	5f 93       	push	r21
    266a:	4f 93       	push	r20
    266c:	3f 93       	push	r19
    266e:	2f 93       	push	r18
    2670:	9e d0       	rcall	.+316    	; 0x27ae <log>
    2672:	2f 91       	pop	r18
    2674:	3f 91       	pop	r19
    2676:	4f 91       	pop	r20
    2678:	5f 91       	pop	r21
    267a:	52 df       	rcall	.-348    	; 0x2520 <__mulsf3>
    267c:	05 c0       	rjmp	.+10     	; 0x2688 <exp>
    267e:	19 f4       	brne	.+6      	; 0x2686 <pow+0xa0>
    2680:	0e f0       	brts	.+2      	; 0x2684 <pow+0x9e>
    2682:	f9 ce       	rjmp	.-526    	; 0x2476 <__fp_inf>
    2684:	42 cf       	rjmp	.-380    	; 0x250a <__fp_zero>
    2686:	fd ce       	rjmp	.-518    	; 0x2482 <__fp_nan>

00002688 <exp>:
    2688:	26 df       	rcall	.-436    	; 0x24d6 <__fp_splitA>
    268a:	c8 f3       	brcs	.-14     	; 0x267e <pow+0x98>
    268c:	96 38       	cpi	r25, 0x86	; 134
    268e:	c0 f7       	brcc	.-16     	; 0x2680 <pow+0x9a>
    2690:	07 f8       	bld	r0, 7
    2692:	0f 92       	push	r0
    2694:	e8 94       	clt
    2696:	2b e3       	ldi	r18, 0x3B	; 59
    2698:	3a ea       	ldi	r19, 0xAA	; 170
    269a:	48 eb       	ldi	r20, 0xB8	; 184
    269c:	5f e7       	ldi	r21, 0x7F	; 127
    269e:	4e df       	rcall	.-356    	; 0x253c <__mulsf3_pse>
    26a0:	0f 92       	push	r0
    26a2:	0f 92       	push	r0
    26a4:	0f 92       	push	r0
    26a6:	4d b7       	in	r20, 0x3d	; 61
    26a8:	5e b7       	in	r21, 0x3e	; 62
    26aa:	0f 92       	push	r0
    26ac:	c0 d0       	rcall	.+384    	; 0x282e <modf>
    26ae:	e8 e6       	ldi	r30, 0x68	; 104
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	16 d0       	rcall	.+44     	; 0x26e0 <__fp_powser>
    26b4:	4f 91       	pop	r20
    26b6:	5f 91       	pop	r21
    26b8:	ef 91       	pop	r30
    26ba:	ff 91       	pop	r31
    26bc:	e5 95       	asr	r30
    26be:	ee 1f       	adc	r30, r30
    26c0:	ff 1f       	adc	r31, r31
    26c2:	49 f0       	breq	.+18     	; 0x26d6 <exp+0x4e>
    26c4:	fe 57       	subi	r31, 0x7E	; 126
    26c6:	e0 68       	ori	r30, 0x80	; 128
    26c8:	44 27       	eor	r20, r20
    26ca:	ee 0f       	add	r30, r30
    26cc:	44 1f       	adc	r20, r20
    26ce:	fa 95       	dec	r31
    26d0:	e1 f7       	brne	.-8      	; 0x26ca <exp+0x42>
    26d2:	41 95       	neg	r20
    26d4:	55 0b       	sbc	r21, r21
    26d6:	32 d0       	rcall	.+100    	; 0x273c <ldexp>
    26d8:	0f 90       	pop	r0
    26da:	07 fe       	sbrs	r0, 7
    26dc:	26 c0       	rjmp	.+76     	; 0x272a <inverse>
    26de:	08 95       	ret

000026e0 <__fp_powser>:
    26e0:	df 93       	push	r29
    26e2:	cf 93       	push	r28
    26e4:	1f 93       	push	r17
    26e6:	0f 93       	push	r16
    26e8:	ff 92       	push	r15
    26ea:	ef 92       	push	r14
    26ec:	df 92       	push	r13
    26ee:	7b 01       	movw	r14, r22
    26f0:	8c 01       	movw	r16, r24
    26f2:	68 94       	set
    26f4:	05 c0       	rjmp	.+10     	; 0x2700 <__fp_powser+0x20>
    26f6:	da 2e       	mov	r13, r26
    26f8:	ef 01       	movw	r28, r30
    26fa:	1e df       	rcall	.-452    	; 0x2538 <__mulsf3x>
    26fc:	fe 01       	movw	r30, r28
    26fe:	e8 94       	clt
    2700:	a5 91       	lpm	r26, Z+
    2702:	25 91       	lpm	r18, Z+
    2704:	35 91       	lpm	r19, Z+
    2706:	45 91       	lpm	r20, Z+
    2708:	55 91       	lpm	r21, Z+
    270a:	ae f3       	brts	.-22     	; 0x26f6 <__fp_powser+0x16>
    270c:	ef 01       	movw	r28, r30
    270e:	67 dd       	rcall	.-1330   	; 0x21de <__addsf3x>
    2710:	fe 01       	movw	r30, r28
    2712:	97 01       	movw	r18, r14
    2714:	a8 01       	movw	r20, r16
    2716:	da 94       	dec	r13
    2718:	79 f7       	brne	.-34     	; 0x26f8 <__fp_powser+0x18>
    271a:	df 90       	pop	r13
    271c:	ef 90       	pop	r14
    271e:	ff 90       	pop	r15
    2720:	0f 91       	pop	r16
    2722:	1f 91       	pop	r17
    2724:	cf 91       	pop	r28
    2726:	df 91       	pop	r29
    2728:	08 95       	ret

0000272a <inverse>:
    272a:	9b 01       	movw	r18, r22
    272c:	ac 01       	movw	r20, r24
    272e:	60 e0       	ldi	r22, 0x00	; 0
    2730:	70 e0       	ldi	r23, 0x00	; 0
    2732:	80 e8       	ldi	r24, 0x80	; 128
    2734:	9f e3       	ldi	r25, 0x3F	; 63
    2736:	aa cd       	rjmp	.-1196   	; 0x228c <__divsf3>
    2738:	9e ce       	rjmp	.-708    	; 0x2476 <__fp_inf>
    273a:	ac c0       	rjmp	.+344    	; 0x2894 <__fp_mpack>

0000273c <ldexp>:
    273c:	cc de       	rcall	.-616    	; 0x24d6 <__fp_splitA>
    273e:	e8 f3       	brcs	.-6      	; 0x273a <inverse+0x10>
    2740:	99 23       	and	r25, r25
    2742:	d9 f3       	breq	.-10     	; 0x273a <inverse+0x10>
    2744:	94 0f       	add	r25, r20
    2746:	51 1d       	adc	r21, r1
    2748:	bb f3       	brvs	.-18     	; 0x2738 <inverse+0xe>
    274a:	91 50       	subi	r25, 0x01	; 1
    274c:	50 40       	sbci	r21, 0x00	; 0
    274e:	94 f0       	brlt	.+36     	; 0x2774 <ldexp+0x38>
    2750:	59 f0       	breq	.+22     	; 0x2768 <ldexp+0x2c>
    2752:	88 23       	and	r24, r24
    2754:	32 f0       	brmi	.+12     	; 0x2762 <ldexp+0x26>
    2756:	66 0f       	add	r22, r22
    2758:	77 1f       	adc	r23, r23
    275a:	88 1f       	adc	r24, r24
    275c:	91 50       	subi	r25, 0x01	; 1
    275e:	50 40       	sbci	r21, 0x00	; 0
    2760:	c1 f7       	brne	.-16     	; 0x2752 <ldexp+0x16>
    2762:	9e 3f       	cpi	r25, 0xFE	; 254
    2764:	51 05       	cpc	r21, r1
    2766:	44 f7       	brge	.-48     	; 0x2738 <inverse+0xe>
    2768:	88 0f       	add	r24, r24
    276a:	91 1d       	adc	r25, r1
    276c:	96 95       	lsr	r25
    276e:	87 95       	ror	r24
    2770:	97 f9       	bld	r25, 7
    2772:	08 95       	ret
    2774:	5f 3f       	cpi	r21, 0xFF	; 255
    2776:	ac f0       	brlt	.+42     	; 0x27a2 <ldexp+0x66>
    2778:	98 3e       	cpi	r25, 0xE8	; 232
    277a:	9c f0       	brlt	.+38     	; 0x27a2 <ldexp+0x66>
    277c:	bb 27       	eor	r27, r27
    277e:	86 95       	lsr	r24
    2780:	77 95       	ror	r23
    2782:	67 95       	ror	r22
    2784:	b7 95       	ror	r27
    2786:	08 f4       	brcc	.+2      	; 0x278a <ldexp+0x4e>
    2788:	b1 60       	ori	r27, 0x01	; 1
    278a:	93 95       	inc	r25
    278c:	c1 f7       	brne	.-16     	; 0x277e <ldexp+0x42>
    278e:	bb 0f       	add	r27, r27
    2790:	58 f7       	brcc	.-42     	; 0x2768 <ldexp+0x2c>
    2792:	11 f4       	brne	.+4      	; 0x2798 <ldexp+0x5c>
    2794:	60 ff       	sbrs	r22, 0
    2796:	e8 cf       	rjmp	.-48     	; 0x2768 <ldexp+0x2c>
    2798:	6f 5f       	subi	r22, 0xFF	; 255
    279a:	7f 4f       	sbci	r23, 0xFF	; 255
    279c:	8f 4f       	sbci	r24, 0xFF	; 255
    279e:	9f 4f       	sbci	r25, 0xFF	; 255
    27a0:	e3 cf       	rjmp	.-58     	; 0x2768 <ldexp+0x2c>
    27a2:	b4 ce       	rjmp	.-664    	; 0x250c <__fp_szero>
    27a4:	0e f0       	brts	.+2      	; 0x27a8 <ldexp+0x6c>
    27a6:	76 c0       	rjmp	.+236    	; 0x2894 <__fp_mpack>
    27a8:	6c ce       	rjmp	.-808    	; 0x2482 <__fp_nan>
    27aa:	68 94       	set
    27ac:	64 ce       	rjmp	.-824    	; 0x2476 <__fp_inf>

000027ae <log>:
    27ae:	93 de       	rcall	.-730    	; 0x24d6 <__fp_splitA>
    27b0:	c8 f3       	brcs	.-14     	; 0x27a4 <ldexp+0x68>
    27b2:	99 23       	and	r25, r25
    27b4:	d1 f3       	breq	.-12     	; 0x27aa <ldexp+0x6e>
    27b6:	c6 f3       	brts	.-16     	; 0x27a8 <ldexp+0x6c>
    27b8:	df 93       	push	r29
    27ba:	cf 93       	push	r28
    27bc:	1f 93       	push	r17
    27be:	0f 93       	push	r16
    27c0:	ff 92       	push	r15
    27c2:	c9 2f       	mov	r28, r25
    27c4:	dd 27       	eor	r29, r29
    27c6:	88 23       	and	r24, r24
    27c8:	2a f0       	brmi	.+10     	; 0x27d4 <log+0x26>
    27ca:	21 97       	sbiw	r28, 0x01	; 1
    27cc:	66 0f       	add	r22, r22
    27ce:	77 1f       	adc	r23, r23
    27d0:	88 1f       	adc	r24, r24
    27d2:	da f7       	brpl	.-10     	; 0x27ca <log+0x1c>
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	40 e8       	ldi	r20, 0x80	; 128
    27da:	5f eb       	ldi	r21, 0xBF	; 191
    27dc:	9f e3       	ldi	r25, 0x3F	; 63
    27de:	88 39       	cpi	r24, 0x98	; 152
    27e0:	20 f0       	brcs	.+8      	; 0x27ea <log+0x3c>
    27e2:	80 3e       	cpi	r24, 0xE0	; 224
    27e4:	30 f0       	brcs	.+12     	; 0x27f2 <log+0x44>
    27e6:	21 96       	adiw	r28, 0x01	; 1
    27e8:	8f 77       	andi	r24, 0x7F	; 127
    27ea:	e8 dc       	rcall	.-1584   	; 0x21bc <__addsf3>
    27ec:	e0 e9       	ldi	r30, 0x90	; 144
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	03 c0       	rjmp	.+6      	; 0x27f8 <log+0x4a>
    27f2:	e4 dc       	rcall	.-1592   	; 0x21bc <__addsf3>
    27f4:	ed eb       	ldi	r30, 0xBD	; 189
    27f6:	f0 e0       	ldi	r31, 0x00	; 0
    27f8:	73 df       	rcall	.-282    	; 0x26e0 <__fp_powser>
    27fa:	8b 01       	movw	r16, r22
    27fc:	be 01       	movw	r22, r28
    27fe:	ec 01       	movw	r28, r24
    2800:	fb 2e       	mov	r15, r27
    2802:	6f 57       	subi	r22, 0x7F	; 127
    2804:	71 09       	sbc	r23, r1
    2806:	75 95       	asr	r23
    2808:	77 1f       	adc	r23, r23
    280a:	88 0b       	sbc	r24, r24
    280c:	99 0b       	sbc	r25, r25
    280e:	d4 dd       	rcall	.-1112   	; 0x23b8 <__floatsisf>
    2810:	28 e1       	ldi	r18, 0x18	; 24
    2812:	32 e7       	ldi	r19, 0x72	; 114
    2814:	41 e3       	ldi	r20, 0x31	; 49
    2816:	5f e3       	ldi	r21, 0x3F	; 63
    2818:	8f de       	rcall	.-738    	; 0x2538 <__mulsf3x>
    281a:	af 2d       	mov	r26, r15
    281c:	98 01       	movw	r18, r16
    281e:	ae 01       	movw	r20, r28
    2820:	ff 90       	pop	r15
    2822:	0f 91       	pop	r16
    2824:	1f 91       	pop	r17
    2826:	cf 91       	pop	r28
    2828:	df 91       	pop	r29
    282a:	d9 dc       	rcall	.-1614   	; 0x21de <__addsf3x>
    282c:	3b ce       	rjmp	.-906    	; 0x24a4 <__fp_round>

0000282e <modf>:
    282e:	fa 01       	movw	r30, r20
    2830:	dc 01       	movw	r26, r24
    2832:	aa 0f       	add	r26, r26
    2834:	bb 1f       	adc	r27, r27
    2836:	9b 01       	movw	r18, r22
    2838:	ac 01       	movw	r20, r24
    283a:	bf 57       	subi	r27, 0x7F	; 127
    283c:	28 f4       	brcc	.+10     	; 0x2848 <modf+0x1a>
    283e:	22 27       	eor	r18, r18
    2840:	33 27       	eor	r19, r19
    2842:	44 27       	eor	r20, r20
    2844:	50 78       	andi	r21, 0x80	; 128
    2846:	1f c0       	rjmp	.+62     	; 0x2886 <modf+0x58>
    2848:	b7 51       	subi	r27, 0x17	; 23
    284a:	88 f4       	brcc	.+34     	; 0x286e <modf+0x40>
    284c:	ab 2f       	mov	r26, r27
    284e:	00 24       	eor	r0, r0
    2850:	46 95       	lsr	r20
    2852:	37 95       	ror	r19
    2854:	27 95       	ror	r18
    2856:	01 1c       	adc	r0, r1
    2858:	a3 95       	inc	r26
    285a:	d2 f3       	brmi	.-12     	; 0x2850 <modf+0x22>
    285c:	00 20       	and	r0, r0
    285e:	69 f0       	breq	.+26     	; 0x287a <modf+0x4c>
    2860:	22 0f       	add	r18, r18
    2862:	33 1f       	adc	r19, r19
    2864:	44 1f       	adc	r20, r20
    2866:	b3 95       	inc	r27
    2868:	da f3       	brmi	.-10     	; 0x2860 <modf+0x32>
    286a:	0d d0       	rcall	.+26     	; 0x2886 <modf+0x58>
    286c:	a6 cc       	rjmp	.-1716   	; 0x21ba <__subsf3>
    286e:	61 30       	cpi	r22, 0x01	; 1
    2870:	71 05       	cpc	r23, r1
    2872:	a0 e8       	ldi	r26, 0x80	; 128
    2874:	8a 07       	cpc	r24, r26
    2876:	b9 46       	sbci	r27, 0x69	; 105
    2878:	30 f4       	brcc	.+12     	; 0x2886 <modf+0x58>
    287a:	9b 01       	movw	r18, r22
    287c:	ac 01       	movw	r20, r24
    287e:	66 27       	eor	r22, r22
    2880:	77 27       	eor	r23, r23
    2882:	88 27       	eor	r24, r24
    2884:	90 78       	andi	r25, 0x80	; 128
    2886:	30 96       	adiw	r30, 0x00	; 0
    2888:	21 f0       	breq	.+8      	; 0x2892 <modf+0x64>
    288a:	20 83       	st	Z, r18
    288c:	31 83       	std	Z+1, r19	; 0x01
    288e:	42 83       	std	Z+2, r20	; 0x02
    2890:	53 83       	std	Z+3, r21	; 0x03
    2892:	08 95       	ret

00002894 <__fp_mpack>:
    2894:	9f 3f       	cpi	r25, 0xFF	; 255
    2896:	31 f0       	breq	.+12     	; 0x28a4 <__fp_mpack_finite+0xc>

00002898 <__fp_mpack_finite>:
    2898:	91 50       	subi	r25, 0x01	; 1
    289a:	20 f4       	brcc	.+8      	; 0x28a4 <__fp_mpack_finite+0xc>
    289c:	87 95       	ror	r24
    289e:	77 95       	ror	r23
    28a0:	67 95       	ror	r22
    28a2:	b7 95       	ror	r27
    28a4:	88 0f       	add	r24, r24
    28a6:	91 1d       	adc	r25, r1
    28a8:	96 95       	lsr	r25
    28aa:	87 95       	ror	r24
    28ac:	97 f9       	bld	r25, 7
    28ae:	08 95       	ret

000028b0 <__udivmodsi4>:
    28b0:	a1 e2       	ldi	r26, 0x21	; 33
    28b2:	1a 2e       	mov	r1, r26
    28b4:	aa 1b       	sub	r26, r26
    28b6:	bb 1b       	sub	r27, r27
    28b8:	fd 01       	movw	r30, r26
    28ba:	0d c0       	rjmp	.+26     	; 0x28d6 <__udivmodsi4_ep>

000028bc <__udivmodsi4_loop>:
    28bc:	aa 1f       	adc	r26, r26
    28be:	bb 1f       	adc	r27, r27
    28c0:	ee 1f       	adc	r30, r30
    28c2:	ff 1f       	adc	r31, r31
    28c4:	a2 17       	cp	r26, r18
    28c6:	b3 07       	cpc	r27, r19
    28c8:	e4 07       	cpc	r30, r20
    28ca:	f5 07       	cpc	r31, r21
    28cc:	20 f0       	brcs	.+8      	; 0x28d6 <__udivmodsi4_ep>
    28ce:	a2 1b       	sub	r26, r18
    28d0:	b3 0b       	sbc	r27, r19
    28d2:	e4 0b       	sbc	r30, r20
    28d4:	f5 0b       	sbc	r31, r21

000028d6 <__udivmodsi4_ep>:
    28d6:	66 1f       	adc	r22, r22
    28d8:	77 1f       	adc	r23, r23
    28da:	88 1f       	adc	r24, r24
    28dc:	99 1f       	adc	r25, r25
    28de:	1a 94       	dec	r1
    28e0:	69 f7       	brne	.-38     	; 0x28bc <__udivmodsi4_loop>
    28e2:	60 95       	com	r22
    28e4:	70 95       	com	r23
    28e6:	80 95       	com	r24
    28e8:	90 95       	com	r25
    28ea:	9b 01       	movw	r18, r22
    28ec:	ac 01       	movw	r20, r24
    28ee:	bd 01       	movw	r22, r26
    28f0:	cf 01       	movw	r24, r30
    28f2:	08 95       	ret

000028f4 <dtostrf>:
    28f4:	ef 92       	push	r14
    28f6:	0f 93       	push	r16
    28f8:	1f 93       	push	r17
    28fa:	cf 93       	push	r28
    28fc:	c0 2f       	mov	r28, r16
    28fe:	47 ff       	sbrs	r20, 7
    2900:	02 c0       	rjmp	.+4      	; 0x2906 <dtostrf+0x12>
    2902:	34 e1       	ldi	r19, 0x14	; 20
    2904:	01 c0       	rjmp	.+2      	; 0x2908 <dtostrf+0x14>
    2906:	34 e0       	ldi	r19, 0x04	; 4
    2908:	e4 2f       	mov	r30, r20
    290a:	ff 27       	eor	r31, r31
    290c:	e7 fd       	sbrc	r30, 7
    290e:	f0 95       	com	r31
    2910:	f7 ff       	sbrs	r31, 7
    2912:	03 c0       	rjmp	.+6      	; 0x291a <dtostrf+0x26>
    2914:	f1 95       	neg	r31
    2916:	e1 95       	neg	r30
    2918:	f1 09       	sbc	r31, r1
    291a:	e3 2e       	mov	r14, r19
    291c:	02 2f       	mov	r16, r18
    291e:	2e 2f       	mov	r18, r30
    2920:	4c 2f       	mov	r20, r28
    2922:	51 2f       	mov	r21, r17
    2924:	0e 94 a7 14 	call	0x294e	; 0x294e <dtoa_prf>
    2928:	8c 2f       	mov	r24, r28
    292a:	91 2f       	mov	r25, r17
    292c:	cf 91       	pop	r28
    292e:	1f 91       	pop	r17
    2930:	0f 91       	pop	r16
    2932:	ef 90       	pop	r14
    2934:	08 95       	ret

00002936 <__eerd_word_m328p>:
    2936:	a8 e1       	ldi	r26, 0x18	; 24
    2938:	b0 e0       	ldi	r27, 0x00	; 0
    293a:	42 e0       	ldi	r20, 0x02	; 2
    293c:	50 e0       	ldi	r21, 0x00	; 0
    293e:	0c 94 fe 16 	jmp	0x2dfc	; 0x2dfc <__eerd_blraw_m328p>

00002942 <__eeupd_word_m328p>:
    2942:	01 96       	adiw	r24, 0x01	; 1
    2944:	27 2f       	mov	r18, r23
    2946:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <__eeupd_r18_m328p>
    294a:	0c 94 0c 17 	jmp	0x2e18	; 0x2e18 <__eeupd_byte_m328p>

0000294e <dtoa_prf>:
    294e:	6f 92       	push	r6
    2950:	7f 92       	push	r7
    2952:	9f 92       	push	r9
    2954:	af 92       	push	r10
    2956:	bf 92       	push	r11
    2958:	cf 92       	push	r12
    295a:	df 92       	push	r13
    295c:	ef 92       	push	r14
    295e:	ff 92       	push	r15
    2960:	0f 93       	push	r16
    2962:	1f 93       	push	r17
    2964:	cf 93       	push	r28
    2966:	df 93       	push	r29
    2968:	cd b7       	in	r28, 0x3d	; 61
    296a:	de b7       	in	r29, 0x3e	; 62
    296c:	29 97       	sbiw	r28, 0x09	; 9
    296e:	0f b6       	in	r0, 0x3f	; 63
    2970:	f8 94       	cli
    2972:	de bf       	out	0x3e, r29	; 62
    2974:	0f be       	out	0x3f, r0	; 63
    2976:	cd bf       	out	0x3d, r28	; 61
    2978:	6a 01       	movw	r12, r20
    297a:	b2 2e       	mov	r11, r18
    297c:	10 2f       	mov	r17, r16
    297e:	0c 33       	cpi	r16, 0x3C	; 60
    2980:	18 f4       	brcc	.+6      	; 0x2988 <dtoa_prf+0x3a>
    2982:	f0 2e       	mov	r15, r16
    2984:	f3 94       	inc	r15
    2986:	02 c0       	rjmp	.+4      	; 0x298c <dtoa_prf+0x3e>
    2988:	5c e3       	ldi	r21, 0x3C	; 60
    298a:	f5 2e       	mov	r15, r21
    298c:	0f 2d       	mov	r16, r15
    298e:	27 e0       	ldi	r18, 0x07	; 7
    2990:	ae 01       	movw	r20, r28
    2992:	4f 5f       	subi	r20, 0xFF	; 255
    2994:	5f 4f       	sbci	r21, 0xFF	; 255
    2996:	0e 94 24 16 	call	0x2c48	; 0x2c48 <__ftoa_engine>
    299a:	79 81       	ldd	r23, Y+1	; 0x01
    299c:	27 2f       	mov	r18, r23
    299e:	29 70       	andi	r18, 0x09	; 9
    29a0:	21 30       	cpi	r18, 0x01	; 1
    29a2:	31 f0       	breq	.+12     	; 0x29b0 <dtoa_prf+0x62>
    29a4:	e1 fc       	sbrc	r14, 1
    29a6:	06 c0       	rjmp	.+12     	; 0x29b4 <dtoa_prf+0x66>
    29a8:	e0 fe       	sbrs	r14, 0
    29aa:	06 c0       	rjmp	.+12     	; 0x29b8 <dtoa_prf+0x6a>
    29ac:	60 e2       	ldi	r22, 0x20	; 32
    29ae:	05 c0       	rjmp	.+10     	; 0x29ba <dtoa_prf+0x6c>
    29b0:	6d e2       	ldi	r22, 0x2D	; 45
    29b2:	03 c0       	rjmp	.+6      	; 0x29ba <dtoa_prf+0x6c>
    29b4:	6b e2       	ldi	r22, 0x2B	; 43
    29b6:	01 c0       	rjmp	.+2      	; 0x29ba <dtoa_prf+0x6c>
    29b8:	60 e0       	ldi	r22, 0x00	; 0
    29ba:	73 ff       	sbrs	r23, 3
    29bc:	3d c0       	rjmp	.+122    	; 0x2a38 <dtoa_prf+0xea>
    29be:	66 23       	and	r22, r22
    29c0:	11 f0       	breq	.+4      	; 0x29c6 <dtoa_prf+0x78>
    29c2:	84 e0       	ldi	r24, 0x04	; 4
    29c4:	01 c0       	rjmp	.+2      	; 0x29c8 <dtoa_prf+0x7a>
    29c6:	83 e0       	ldi	r24, 0x03	; 3
    29c8:	8b 15       	cp	r24, r11
    29ca:	10 f4       	brcc	.+4      	; 0x29d0 <dtoa_prf+0x82>
    29cc:	b8 1a       	sub	r11, r24
    29ce:	01 c0       	rjmp	.+2      	; 0x29d2 <dtoa_prf+0x84>
    29d0:	b1 2c       	mov	r11, r1
    29d2:	e4 fc       	sbrc	r14, 4
    29d4:	0b c0       	rjmp	.+22     	; 0x29ec <dtoa_prf+0x9e>
    29d6:	8b 2d       	mov	r24, r11
    29d8:	f6 01       	movw	r30, r12
    29da:	90 e2       	ldi	r25, 0x20	; 32
    29dc:	02 c0       	rjmp	.+4      	; 0x29e2 <dtoa_prf+0x94>
    29de:	91 93       	st	Z+, r25
    29e0:	81 50       	subi	r24, 0x01	; 1
    29e2:	81 11       	cpse	r24, r1
    29e4:	fc cf       	rjmp	.-8      	; 0x29de <dtoa_prf+0x90>
    29e6:	cb 0c       	add	r12, r11
    29e8:	d1 1c       	adc	r13, r1
    29ea:	b1 2c       	mov	r11, r1
    29ec:	66 23       	and	r22, r22
    29ee:	19 f0       	breq	.+6      	; 0x29f6 <dtoa_prf+0xa8>
    29f0:	d6 01       	movw	r26, r12
    29f2:	6d 93       	st	X+, r22
    29f4:	6d 01       	movw	r12, r26
    29f6:	e2 fe       	sbrs	r14, 2
    29f8:	0a c0       	rjmp	.+20     	; 0x2a0e <dtoa_prf+0xc0>
    29fa:	8e e4       	ldi	r24, 0x4E	; 78
    29fc:	f6 01       	movw	r30, r12
    29fe:	80 83       	st	Z, r24
    2a00:	91 e4       	ldi	r25, 0x41	; 65
    2a02:	91 83       	std	Z+1, r25	; 0x01
    2a04:	82 83       	std	Z+2, r24	; 0x02
    2a06:	f3 e0       	ldi	r31, 0x03	; 3
    2a08:	cf 0e       	add	r12, r31
    2a0a:	d1 1c       	adc	r13, r1
    2a0c:	0c c0       	rjmp	.+24     	; 0x2a26 <dtoa_prf+0xd8>
    2a0e:	8e e6       	ldi	r24, 0x6E	; 110
    2a10:	d6 01       	movw	r26, r12
    2a12:	8c 93       	st	X, r24
    2a14:	91 e6       	ldi	r25, 0x61	; 97
    2a16:	11 96       	adiw	r26, 0x01	; 1
    2a18:	9c 93       	st	X, r25
    2a1a:	11 97       	sbiw	r26, 0x01	; 1
    2a1c:	12 96       	adiw	r26, 0x02	; 2
    2a1e:	8c 93       	st	X, r24
    2a20:	b3 e0       	ldi	r27, 0x03	; 3
    2a22:	cb 0e       	add	r12, r27
    2a24:	d1 1c       	adc	r13, r1
    2a26:	8b 2d       	mov	r24, r11
    2a28:	f6 01       	movw	r30, r12
    2a2a:	90 e2       	ldi	r25, 0x20	; 32
    2a2c:	02 c0       	rjmp	.+4      	; 0x2a32 <dtoa_prf+0xe4>
    2a2e:	91 93       	st	Z+, r25
    2a30:	81 50       	subi	r24, 0x01	; 1
    2a32:	81 11       	cpse	r24, r1
    2a34:	fc cf       	rjmp	.-8      	; 0x2a2e <dtoa_prf+0xe0>
    2a36:	40 c0       	rjmp	.+128    	; 0x2ab8 <dtoa_prf+0x16a>
    2a38:	72 ff       	sbrs	r23, 2
    2a3a:	45 c0       	rjmp	.+138    	; 0x2ac6 <dtoa_prf+0x178>
    2a3c:	66 23       	and	r22, r22
    2a3e:	11 f0       	breq	.+4      	; 0x2a44 <dtoa_prf+0xf6>
    2a40:	84 e0       	ldi	r24, 0x04	; 4
    2a42:	01 c0       	rjmp	.+2      	; 0x2a46 <dtoa_prf+0xf8>
    2a44:	83 e0       	ldi	r24, 0x03	; 3
    2a46:	8b 15       	cp	r24, r11
    2a48:	10 f4       	brcc	.+4      	; 0x2a4e <dtoa_prf+0x100>
    2a4a:	b8 1a       	sub	r11, r24
    2a4c:	01 c0       	rjmp	.+2      	; 0x2a50 <dtoa_prf+0x102>
    2a4e:	b1 2c       	mov	r11, r1
    2a50:	e4 fc       	sbrc	r14, 4
    2a52:	0b c0       	rjmp	.+22     	; 0x2a6a <dtoa_prf+0x11c>
    2a54:	8b 2d       	mov	r24, r11
    2a56:	f6 01       	movw	r30, r12
    2a58:	90 e2       	ldi	r25, 0x20	; 32
    2a5a:	02 c0       	rjmp	.+4      	; 0x2a60 <dtoa_prf+0x112>
    2a5c:	91 93       	st	Z+, r25
    2a5e:	81 50       	subi	r24, 0x01	; 1
    2a60:	81 11       	cpse	r24, r1
    2a62:	fc cf       	rjmp	.-8      	; 0x2a5c <dtoa_prf+0x10e>
    2a64:	cb 0c       	add	r12, r11
    2a66:	d1 1c       	adc	r13, r1
    2a68:	b1 2c       	mov	r11, r1
    2a6a:	66 23       	and	r22, r22
    2a6c:	19 f0       	breq	.+6      	; 0x2a74 <dtoa_prf+0x126>
    2a6e:	f6 01       	movw	r30, r12
    2a70:	61 93       	st	Z+, r22
    2a72:	6f 01       	movw	r12, r30
    2a74:	e2 fe       	sbrs	r14, 2
    2a76:	0e c0       	rjmp	.+28     	; 0x2a94 <dtoa_prf+0x146>
    2a78:	89 e4       	ldi	r24, 0x49	; 73
    2a7a:	d6 01       	movw	r26, r12
    2a7c:	8c 93       	st	X, r24
    2a7e:	8e e4       	ldi	r24, 0x4E	; 78
    2a80:	11 96       	adiw	r26, 0x01	; 1
    2a82:	8c 93       	st	X, r24
    2a84:	11 97       	sbiw	r26, 0x01	; 1
    2a86:	86 e4       	ldi	r24, 0x46	; 70
    2a88:	12 96       	adiw	r26, 0x02	; 2
    2a8a:	8c 93       	st	X, r24
    2a8c:	b3 e0       	ldi	r27, 0x03	; 3
    2a8e:	cb 0e       	add	r12, r27
    2a90:	d1 1c       	adc	r13, r1
    2a92:	0a c0       	rjmp	.+20     	; 0x2aa8 <dtoa_prf+0x15a>
    2a94:	89 e6       	ldi	r24, 0x69	; 105
    2a96:	f6 01       	movw	r30, r12
    2a98:	80 83       	st	Z, r24
    2a9a:	8e e6       	ldi	r24, 0x6E	; 110
    2a9c:	81 83       	std	Z+1, r24	; 0x01
    2a9e:	86 e6       	ldi	r24, 0x66	; 102
    2aa0:	82 83       	std	Z+2, r24	; 0x02
    2aa2:	f3 e0       	ldi	r31, 0x03	; 3
    2aa4:	cf 0e       	add	r12, r31
    2aa6:	d1 1c       	adc	r13, r1
    2aa8:	8b 2d       	mov	r24, r11
    2aaa:	f6 01       	movw	r30, r12
    2aac:	90 e2       	ldi	r25, 0x20	; 32
    2aae:	02 c0       	rjmp	.+4      	; 0x2ab4 <dtoa_prf+0x166>
    2ab0:	91 93       	st	Z+, r25
    2ab2:	81 50       	subi	r24, 0x01	; 1
    2ab4:	81 11       	cpse	r24, r1
    2ab6:	fc cf       	rjmp	.-8      	; 0x2ab0 <dtoa_prf+0x162>
    2ab8:	f6 01       	movw	r30, r12
    2aba:	eb 0d       	add	r30, r11
    2abc:	f1 1d       	adc	r31, r1
    2abe:	10 82       	st	Z, r1
    2ac0:	2e ef       	ldi	r18, 0xFE	; 254
    2ac2:	3f ef       	ldi	r19, 0xFF	; 255
    2ac4:	ac c0       	rjmp	.+344    	; 0x2c1e <dtoa_prf+0x2d0>
    2ac6:	a1 e0       	ldi	r26, 0x01	; 1
    2ac8:	61 11       	cpse	r22, r1
    2aca:	01 c0       	rjmp	.+2      	; 0x2ace <dtoa_prf+0x180>
    2acc:	a0 e0       	ldi	r26, 0x00	; 0
    2ace:	4a 2f       	mov	r20, r26
    2ad0:	50 e0       	ldi	r21, 0x00	; 0
    2ad2:	18 16       	cp	r1, r24
    2ad4:	19 06       	cpc	r1, r25
    2ad6:	24 f4       	brge	.+8      	; 0x2ae0 <dtoa_prf+0x192>
    2ad8:	9c 01       	movw	r18, r24
    2ada:	2f 5f       	subi	r18, 0xFF	; 255
    2adc:	3f 4f       	sbci	r19, 0xFF	; 255
    2ade:	02 c0       	rjmp	.+4      	; 0x2ae4 <dtoa_prf+0x196>
    2ae0:	21 e0       	ldi	r18, 0x01	; 1
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	24 0f       	add	r18, r20
    2ae6:	35 1f       	adc	r19, r21
    2ae8:	11 23       	and	r17, r17
    2aea:	29 f0       	breq	.+10     	; 0x2af6 <dtoa_prf+0x1a8>
    2aec:	41 2f       	mov	r20, r17
    2aee:	50 e0       	ldi	r21, 0x00	; 0
    2af0:	4f 5f       	subi	r20, 0xFF	; 255
    2af2:	5f 4f       	sbci	r21, 0xFF	; 255
    2af4:	02 c0       	rjmp	.+4      	; 0x2afa <dtoa_prf+0x1ac>
    2af6:	40 e0       	ldi	r20, 0x00	; 0
    2af8:	50 e0       	ldi	r21, 0x00	; 0
    2afa:	42 0f       	add	r20, r18
    2afc:	53 1f       	adc	r21, r19
    2afe:	2b 2d       	mov	r18, r11
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	42 17       	cp	r20, r18
    2b04:	53 07       	cpc	r21, r19
    2b06:	14 f4       	brge	.+4      	; 0x2b0c <dtoa_prf+0x1be>
    2b08:	b4 1a       	sub	r11, r20
    2b0a:	01 c0       	rjmp	.+2      	; 0x2b0e <dtoa_prf+0x1c0>
    2b0c:	b1 2c       	mov	r11, r1
    2b0e:	3e 2d       	mov	r19, r14
    2b10:	30 71       	andi	r19, 0x10	; 16
    2b12:	e4 fc       	sbrc	r14, 4
    2b14:	0d c0       	rjmp	.+26     	; 0x2b30 <dtoa_prf+0x1e2>
    2b16:	e3 fc       	sbrc	r14, 3
    2b18:	0b c0       	rjmp	.+22     	; 0x2b30 <dtoa_prf+0x1e2>
    2b1a:	2b 2d       	mov	r18, r11
    2b1c:	f6 01       	movw	r30, r12
    2b1e:	40 e2       	ldi	r20, 0x20	; 32
    2b20:	02 c0       	rjmp	.+4      	; 0x2b26 <dtoa_prf+0x1d8>
    2b22:	41 93       	st	Z+, r20
    2b24:	21 50       	subi	r18, 0x01	; 1
    2b26:	21 11       	cpse	r18, r1
    2b28:	fc cf       	rjmp	.-8      	; 0x2b22 <dtoa_prf+0x1d4>
    2b2a:	cb 0c       	add	r12, r11
    2b2c:	d1 1c       	adc	r13, r1
    2b2e:	b1 2c       	mov	r11, r1
    2b30:	aa 23       	and	r26, r26
    2b32:	19 f0       	breq	.+6      	; 0x2b3a <dtoa_prf+0x1ec>
    2b34:	d6 01       	movw	r26, r12
    2b36:	6d 93       	st	X+, r22
    2b38:	6d 01       	movw	r12, r26
    2b3a:	31 11       	cpse	r19, r1
    2b3c:	0b c0       	rjmp	.+22     	; 0x2b54 <dtoa_prf+0x206>
    2b3e:	2b 2d       	mov	r18, r11
    2b40:	f6 01       	movw	r30, r12
    2b42:	30 e3       	ldi	r19, 0x30	; 48
    2b44:	02 c0       	rjmp	.+4      	; 0x2b4a <dtoa_prf+0x1fc>
    2b46:	31 93       	st	Z+, r19
    2b48:	21 50       	subi	r18, 0x01	; 1
    2b4a:	21 11       	cpse	r18, r1
    2b4c:	fc cf       	rjmp	.-8      	; 0x2b46 <dtoa_prf+0x1f8>
    2b4e:	cb 0c       	add	r12, r11
    2b50:	d1 1c       	adc	r13, r1
    2b52:	b1 2c       	mov	r11, r1
    2b54:	f8 0e       	add	r15, r24
    2b56:	0a 81       	ldd	r16, Y+2	; 0x02
    2b58:	40 e1       	ldi	r20, 0x10	; 16
    2b5a:	a4 2e       	mov	r10, r20
    2b5c:	a7 22       	and	r10, r23
    2b5e:	74 ff       	sbrs	r23, 4
    2b60:	03 c0       	rjmp	.+6      	; 0x2b68 <dtoa_prf+0x21a>
    2b62:	01 33       	cpi	r16, 0x31	; 49
    2b64:	09 f4       	brne	.+2      	; 0x2b68 <dtoa_prf+0x21a>
    2b66:	fa 94       	dec	r15
    2b68:	1f 14       	cp	r1, r15
    2b6a:	2c f4       	brge	.+10     	; 0x2b76 <dtoa_prf+0x228>
    2b6c:	2f 2d       	mov	r18, r15
    2b6e:	29 30       	cpi	r18, 0x09	; 9
    2b70:	18 f0       	brcs	.+6      	; 0x2b78 <dtoa_prf+0x22a>
    2b72:	28 e0       	ldi	r18, 0x08	; 8
    2b74:	01 c0       	rjmp	.+2      	; 0x2b78 <dtoa_prf+0x22a>
    2b76:	21 e0       	ldi	r18, 0x01	; 1
    2b78:	ac 01       	movw	r20, r24
    2b7a:	97 ff       	sbrs	r25, 7
    2b7c:	02 c0       	rjmp	.+4      	; 0x2b82 <dtoa_prf+0x234>
    2b7e:	40 e0       	ldi	r20, 0x00	; 0
    2b80:	50 e0       	ldi	r21, 0x00	; 0
    2b82:	60 e0       	ldi	r22, 0x00	; 0
    2b84:	70 e0       	ldi	r23, 0x00	; 0
    2b86:	3e e2       	ldi	r19, 0x2E	; 46
    2b88:	93 2e       	mov	r9, r19
    2b8a:	fc 01       	movw	r30, r24
    2b8c:	e2 1b       	sub	r30, r18
    2b8e:	f1 09       	sbc	r31, r1
    2b90:	9f 01       	movw	r18, r30
    2b92:	dc 01       	movw	r26, r24
    2b94:	a4 1b       	sub	r26, r20
    2b96:	b5 0b       	sbc	r27, r21
    2b98:	fe 01       	movw	r30, r28
    2b9a:	31 96       	adiw	r30, 0x01	; 1
    2b9c:	ea 0f       	add	r30, r26
    2b9e:	fb 1f       	adc	r31, r27
    2ba0:	a1 2f       	mov	r26, r17
    2ba2:	b0 e0       	ldi	r27, 0x00	; 0
    2ba4:	66 24       	eor	r6, r6
    2ba6:	77 24       	eor	r7, r7
    2ba8:	6a 1a       	sub	r6, r26
    2baa:	7b 0a       	sbc	r7, r27
    2bac:	4f 3f       	cpi	r20, 0xFF	; 255
    2bae:	1f ef       	ldi	r17, 0xFF	; 255
    2bb0:	51 07       	cpc	r21, r17
    2bb2:	19 f4       	brne	.+6      	; 0x2bba <dtoa_prf+0x26c>
    2bb4:	d6 01       	movw	r26, r12
    2bb6:	9d 92       	st	X+, r9
    2bb8:	6d 01       	movw	r12, r26
    2bba:	84 17       	cp	r24, r20
    2bbc:	95 07       	cpc	r25, r21
    2bbe:	54 f0       	brlt	.+20     	; 0x2bd4 <dtoa_prf+0x286>
    2bc0:	24 17       	cp	r18, r20
    2bc2:	35 07       	cpc	r19, r21
    2bc4:	3c f4       	brge	.+14     	; 0x2bd4 <dtoa_prf+0x286>
    2bc6:	7f 01       	movw	r14, r30
    2bc8:	e6 0e       	add	r14, r22
    2bca:	f7 1e       	adc	r15, r23
    2bcc:	d7 01       	movw	r26, r14
    2bce:	11 96       	adiw	r26, 0x01	; 1
    2bd0:	1c 91       	ld	r17, X
    2bd2:	01 c0       	rjmp	.+2      	; 0x2bd6 <dtoa_prf+0x288>
    2bd4:	10 e3       	ldi	r17, 0x30	; 48
    2bd6:	41 50       	subi	r20, 0x01	; 1
    2bd8:	51 09       	sbc	r21, r1
    2bda:	6f 5f       	subi	r22, 0xFF	; 255
    2bdc:	7f 4f       	sbci	r23, 0xFF	; 255
    2bde:	46 15       	cp	r20, r6
    2be0:	57 05       	cpc	r21, r7
    2be2:	24 f0       	brlt	.+8      	; 0x2bec <dtoa_prf+0x29e>
    2be4:	d6 01       	movw	r26, r12
    2be6:	1d 93       	st	X+, r17
    2be8:	6d 01       	movw	r12, r26
    2bea:	e0 cf       	rjmp	.-64     	; 0x2bac <dtoa_prf+0x25e>
    2bec:	48 17       	cp	r20, r24
    2bee:	59 07       	cpc	r21, r25
    2bf0:	39 f4       	brne	.+14     	; 0x2c00 <dtoa_prf+0x2b2>
    2bf2:	06 33       	cpi	r16, 0x36	; 54
    2bf4:	20 f4       	brcc	.+8      	; 0x2bfe <dtoa_prf+0x2b0>
    2bf6:	05 33       	cpi	r16, 0x35	; 53
    2bf8:	19 f4       	brne	.+6      	; 0x2c00 <dtoa_prf+0x2b2>
    2bfa:	a1 10       	cpse	r10, r1
    2bfc:	01 c0       	rjmp	.+2      	; 0x2c00 <dtoa_prf+0x2b2>
    2bfe:	11 e3       	ldi	r17, 0x31	; 49
    2c00:	f6 01       	movw	r30, r12
    2c02:	11 93       	st	Z+, r17
    2c04:	8b 2d       	mov	r24, r11
    2c06:	df 01       	movw	r26, r30
    2c08:	90 e2       	ldi	r25, 0x20	; 32
    2c0a:	02 c0       	rjmp	.+4      	; 0x2c10 <dtoa_prf+0x2c2>
    2c0c:	9d 93       	st	X+, r25
    2c0e:	81 50       	subi	r24, 0x01	; 1
    2c10:	81 11       	cpse	r24, r1
    2c12:	fc cf       	rjmp	.-8      	; 0x2c0c <dtoa_prf+0x2be>
    2c14:	eb 0d       	add	r30, r11
    2c16:	f1 1d       	adc	r31, r1
    2c18:	10 82       	st	Z, r1
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	c9 01       	movw	r24, r18
    2c20:	29 96       	adiw	r28, 0x09	; 9
    2c22:	0f b6       	in	r0, 0x3f	; 63
    2c24:	f8 94       	cli
    2c26:	de bf       	out	0x3e, r29	; 62
    2c28:	0f be       	out	0x3f, r0	; 63
    2c2a:	cd bf       	out	0x3d, r28	; 61
    2c2c:	df 91       	pop	r29
    2c2e:	cf 91       	pop	r28
    2c30:	1f 91       	pop	r17
    2c32:	0f 91       	pop	r16
    2c34:	ff 90       	pop	r15
    2c36:	ef 90       	pop	r14
    2c38:	df 90       	pop	r13
    2c3a:	cf 90       	pop	r12
    2c3c:	bf 90       	pop	r11
    2c3e:	af 90       	pop	r10
    2c40:	9f 90       	pop	r9
    2c42:	7f 90       	pop	r7
    2c44:	6f 90       	pop	r6
    2c46:	08 95       	ret

00002c48 <__ftoa_engine>:
    2c48:	28 30       	cpi	r18, 0x08	; 8
    2c4a:	08 f0       	brcs	.+2      	; 0x2c4e <__ftoa_engine+0x6>
    2c4c:	27 e0       	ldi	r18, 0x07	; 7
    2c4e:	33 27       	eor	r19, r19
    2c50:	da 01       	movw	r26, r20
    2c52:	99 0f       	add	r25, r25
    2c54:	31 1d       	adc	r19, r1
    2c56:	87 fd       	sbrc	r24, 7
    2c58:	91 60       	ori	r25, 0x01	; 1
    2c5a:	00 96       	adiw	r24, 0x00	; 0
    2c5c:	61 05       	cpc	r22, r1
    2c5e:	71 05       	cpc	r23, r1
    2c60:	39 f4       	brne	.+14     	; 0x2c70 <__ftoa_engine+0x28>
    2c62:	32 60       	ori	r19, 0x02	; 2
    2c64:	2e 5f       	subi	r18, 0xFE	; 254
    2c66:	3d 93       	st	X+, r19
    2c68:	30 e3       	ldi	r19, 0x30	; 48
    2c6a:	2a 95       	dec	r18
    2c6c:	e1 f7       	brne	.-8      	; 0x2c66 <__ftoa_engine+0x1e>
    2c6e:	08 95       	ret
    2c70:	9f 3f       	cpi	r25, 0xFF	; 255
    2c72:	30 f0       	brcs	.+12     	; 0x2c80 <__ftoa_engine+0x38>
    2c74:	80 38       	cpi	r24, 0x80	; 128
    2c76:	71 05       	cpc	r23, r1
    2c78:	61 05       	cpc	r22, r1
    2c7a:	09 f0       	breq	.+2      	; 0x2c7e <__ftoa_engine+0x36>
    2c7c:	3c 5f       	subi	r19, 0xFC	; 252
    2c7e:	3c 5f       	subi	r19, 0xFC	; 252
    2c80:	3d 93       	st	X+, r19
    2c82:	91 30       	cpi	r25, 0x01	; 1
    2c84:	08 f0       	brcs	.+2      	; 0x2c88 <__ftoa_engine+0x40>
    2c86:	80 68       	ori	r24, 0x80	; 128
    2c88:	91 1d       	adc	r25, r1
    2c8a:	df 93       	push	r29
    2c8c:	cf 93       	push	r28
    2c8e:	1f 93       	push	r17
    2c90:	0f 93       	push	r16
    2c92:	ff 92       	push	r15
    2c94:	ef 92       	push	r14
    2c96:	19 2f       	mov	r17, r25
    2c98:	98 7f       	andi	r25, 0xF8	; 248
    2c9a:	96 95       	lsr	r25
    2c9c:	e9 2f       	mov	r30, r25
    2c9e:	96 95       	lsr	r25
    2ca0:	96 95       	lsr	r25
    2ca2:	e9 0f       	add	r30, r25
    2ca4:	ff 27       	eor	r31, r31
    2ca6:	ee 55       	subi	r30, 0x5E	; 94
    2ca8:	f6 4f       	sbci	r31, 0xF6	; 246
    2caa:	99 27       	eor	r25, r25
    2cac:	33 27       	eor	r19, r19
    2cae:	ee 24       	eor	r14, r14
    2cb0:	ff 24       	eor	r15, r15
    2cb2:	a7 01       	movw	r20, r14
    2cb4:	e7 01       	movw	r28, r14
    2cb6:	05 90       	lpm	r0, Z+
    2cb8:	08 94       	sec
    2cba:	07 94       	ror	r0
    2cbc:	28 f4       	brcc	.+10     	; 0x2cc8 <__ftoa_engine+0x80>
    2cbe:	36 0f       	add	r19, r22
    2cc0:	e7 1e       	adc	r14, r23
    2cc2:	f8 1e       	adc	r15, r24
    2cc4:	49 1f       	adc	r20, r25
    2cc6:	51 1d       	adc	r21, r1
    2cc8:	66 0f       	add	r22, r22
    2cca:	77 1f       	adc	r23, r23
    2ccc:	88 1f       	adc	r24, r24
    2cce:	99 1f       	adc	r25, r25
    2cd0:	06 94       	lsr	r0
    2cd2:	a1 f7       	brne	.-24     	; 0x2cbc <__ftoa_engine+0x74>
    2cd4:	05 90       	lpm	r0, Z+
    2cd6:	07 94       	ror	r0
    2cd8:	28 f4       	brcc	.+10     	; 0x2ce4 <__ftoa_engine+0x9c>
    2cda:	e7 0e       	add	r14, r23
    2cdc:	f8 1e       	adc	r15, r24
    2cde:	49 1f       	adc	r20, r25
    2ce0:	56 1f       	adc	r21, r22
    2ce2:	c1 1d       	adc	r28, r1
    2ce4:	77 0f       	add	r23, r23
    2ce6:	88 1f       	adc	r24, r24
    2ce8:	99 1f       	adc	r25, r25
    2cea:	66 1f       	adc	r22, r22
    2cec:	06 94       	lsr	r0
    2cee:	a1 f7       	brne	.-24     	; 0x2cd8 <__ftoa_engine+0x90>
    2cf0:	05 90       	lpm	r0, Z+
    2cf2:	07 94       	ror	r0
    2cf4:	28 f4       	brcc	.+10     	; 0x2d00 <__ftoa_engine+0xb8>
    2cf6:	f8 0e       	add	r15, r24
    2cf8:	49 1f       	adc	r20, r25
    2cfa:	56 1f       	adc	r21, r22
    2cfc:	c7 1f       	adc	r28, r23
    2cfe:	d1 1d       	adc	r29, r1
    2d00:	88 0f       	add	r24, r24
    2d02:	99 1f       	adc	r25, r25
    2d04:	66 1f       	adc	r22, r22
    2d06:	77 1f       	adc	r23, r23
    2d08:	06 94       	lsr	r0
    2d0a:	a1 f7       	brne	.-24     	; 0x2cf4 <__ftoa_engine+0xac>
    2d0c:	05 90       	lpm	r0, Z+
    2d0e:	07 94       	ror	r0
    2d10:	20 f4       	brcc	.+8      	; 0x2d1a <__ftoa_engine+0xd2>
    2d12:	49 0f       	add	r20, r25
    2d14:	56 1f       	adc	r21, r22
    2d16:	c7 1f       	adc	r28, r23
    2d18:	d8 1f       	adc	r29, r24
    2d1a:	99 0f       	add	r25, r25
    2d1c:	66 1f       	adc	r22, r22
    2d1e:	77 1f       	adc	r23, r23
    2d20:	88 1f       	adc	r24, r24
    2d22:	06 94       	lsr	r0
    2d24:	a9 f7       	brne	.-22     	; 0x2d10 <__ftoa_engine+0xc8>
    2d26:	84 91       	lpm	r24, Z
    2d28:	10 95       	com	r17
    2d2a:	17 70       	andi	r17, 0x07	; 7
    2d2c:	41 f0       	breq	.+16     	; 0x2d3e <__ftoa_engine+0xf6>
    2d2e:	d6 95       	lsr	r29
    2d30:	c7 95       	ror	r28
    2d32:	57 95       	ror	r21
    2d34:	47 95       	ror	r20
    2d36:	f7 94       	ror	r15
    2d38:	e7 94       	ror	r14
    2d3a:	1a 95       	dec	r17
    2d3c:	c1 f7       	brne	.-16     	; 0x2d2e <__ftoa_engine+0xe6>
    2d3e:	e8 e4       	ldi	r30, 0x48	; 72
    2d40:	f9 e0       	ldi	r31, 0x09	; 9
    2d42:	68 94       	set
    2d44:	15 90       	lpm	r1, Z+
    2d46:	15 91       	lpm	r17, Z+
    2d48:	35 91       	lpm	r19, Z+
    2d4a:	65 91       	lpm	r22, Z+
    2d4c:	95 91       	lpm	r25, Z+
    2d4e:	05 90       	lpm	r0, Z+
    2d50:	7f e2       	ldi	r23, 0x2F	; 47
    2d52:	73 95       	inc	r23
    2d54:	e1 18       	sub	r14, r1
    2d56:	f1 0a       	sbc	r15, r17
    2d58:	43 0b       	sbc	r20, r19
    2d5a:	56 0b       	sbc	r21, r22
    2d5c:	c9 0b       	sbc	r28, r25
    2d5e:	d0 09       	sbc	r29, r0
    2d60:	c0 f7       	brcc	.-16     	; 0x2d52 <__ftoa_engine+0x10a>
    2d62:	e1 0c       	add	r14, r1
    2d64:	f1 1e       	adc	r15, r17
    2d66:	43 1f       	adc	r20, r19
    2d68:	56 1f       	adc	r21, r22
    2d6a:	c9 1f       	adc	r28, r25
    2d6c:	d0 1d       	adc	r29, r0
    2d6e:	7e f4       	brtc	.+30     	; 0x2d8e <__ftoa_engine+0x146>
    2d70:	70 33       	cpi	r23, 0x30	; 48
    2d72:	11 f4       	brne	.+4      	; 0x2d78 <__ftoa_engine+0x130>
    2d74:	8a 95       	dec	r24
    2d76:	e6 cf       	rjmp	.-52     	; 0x2d44 <__ftoa_engine+0xfc>
    2d78:	e8 94       	clt
    2d7a:	01 50       	subi	r16, 0x01	; 1
    2d7c:	30 f0       	brcs	.+12     	; 0x2d8a <__ftoa_engine+0x142>
    2d7e:	08 0f       	add	r16, r24
    2d80:	0a f4       	brpl	.+2      	; 0x2d84 <__ftoa_engine+0x13c>
    2d82:	00 27       	eor	r16, r16
    2d84:	02 17       	cp	r16, r18
    2d86:	08 f4       	brcc	.+2      	; 0x2d8a <__ftoa_engine+0x142>
    2d88:	20 2f       	mov	r18, r16
    2d8a:	23 95       	inc	r18
    2d8c:	02 2f       	mov	r16, r18
    2d8e:	7a 33       	cpi	r23, 0x3A	; 58
    2d90:	28 f0       	brcs	.+10     	; 0x2d9c <__ftoa_engine+0x154>
    2d92:	79 e3       	ldi	r23, 0x39	; 57
    2d94:	7d 93       	st	X+, r23
    2d96:	2a 95       	dec	r18
    2d98:	e9 f7       	brne	.-6      	; 0x2d94 <__ftoa_engine+0x14c>
    2d9a:	10 c0       	rjmp	.+32     	; 0x2dbc <__ftoa_engine+0x174>
    2d9c:	7d 93       	st	X+, r23
    2d9e:	2a 95       	dec	r18
    2da0:	89 f6       	brne	.-94     	; 0x2d44 <__ftoa_engine+0xfc>
    2da2:	06 94       	lsr	r0
    2da4:	97 95       	ror	r25
    2da6:	67 95       	ror	r22
    2da8:	37 95       	ror	r19
    2daa:	17 95       	ror	r17
    2dac:	17 94       	ror	r1
    2dae:	e1 18       	sub	r14, r1
    2db0:	f1 0a       	sbc	r15, r17
    2db2:	43 0b       	sbc	r20, r19
    2db4:	56 0b       	sbc	r21, r22
    2db6:	c9 0b       	sbc	r28, r25
    2db8:	d0 09       	sbc	r29, r0
    2dba:	98 f0       	brcs	.+38     	; 0x2de2 <__ftoa_engine+0x19a>
    2dbc:	23 95       	inc	r18
    2dbe:	7e 91       	ld	r23, -X
    2dc0:	73 95       	inc	r23
    2dc2:	7a 33       	cpi	r23, 0x3A	; 58
    2dc4:	08 f0       	brcs	.+2      	; 0x2dc8 <__ftoa_engine+0x180>
    2dc6:	70 e3       	ldi	r23, 0x30	; 48
    2dc8:	7c 93       	st	X, r23
    2dca:	20 13       	cpse	r18, r16
    2dcc:	b8 f7       	brcc	.-18     	; 0x2dbc <__ftoa_engine+0x174>
    2dce:	7e 91       	ld	r23, -X
    2dd0:	70 61       	ori	r23, 0x10	; 16
    2dd2:	7d 93       	st	X+, r23
    2dd4:	30 f0       	brcs	.+12     	; 0x2de2 <__ftoa_engine+0x19a>
    2dd6:	83 95       	inc	r24
    2dd8:	71 e3       	ldi	r23, 0x31	; 49
    2dda:	7d 93       	st	X+, r23
    2ddc:	70 e3       	ldi	r23, 0x30	; 48
    2dde:	2a 95       	dec	r18
    2de0:	e1 f7       	brne	.-8      	; 0x2dda <__ftoa_engine+0x192>
    2de2:	11 24       	eor	r1, r1
    2de4:	ef 90       	pop	r14
    2de6:	ff 90       	pop	r15
    2de8:	0f 91       	pop	r16
    2dea:	1f 91       	pop	r17
    2dec:	cf 91       	pop	r28
    2dee:	df 91       	pop	r29
    2df0:	99 27       	eor	r25, r25
    2df2:	87 fd       	sbrc	r24, 7
    2df4:	90 95       	com	r25
    2df6:	08 95       	ret

00002df8 <__eerd_block_m328p>:
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22

00002dfc <__eerd_blraw_m328p>:
    2dfc:	fc 01       	movw	r30, r24
    2dfe:	f9 99       	sbic	0x1f, 1	; 31
    2e00:	fe cf       	rjmp	.-4      	; 0x2dfe <__eerd_blraw_m328p+0x2>
    2e02:	06 c0       	rjmp	.+12     	; 0x2e10 <__eerd_blraw_m328p+0x14>
    2e04:	f2 bd       	out	0x22, r31	; 34
    2e06:	e1 bd       	out	0x21, r30	; 33
    2e08:	f8 9a       	sbi	0x1f, 0	; 31
    2e0a:	31 96       	adiw	r30, 0x01	; 1
    2e0c:	00 b4       	in	r0, 0x20	; 32
    2e0e:	0d 92       	st	X+, r0
    2e10:	41 50       	subi	r20, 0x01	; 1
    2e12:	50 40       	sbci	r21, 0x00	; 0
    2e14:	b8 f7       	brcc	.-18     	; 0x2e04 <__eerd_blraw_m328p+0x8>
    2e16:	08 95       	ret

00002e18 <__eeupd_byte_m328p>:
    2e18:	26 2f       	mov	r18, r22

00002e1a <__eeupd_r18_m328p>:
    2e1a:	f9 99       	sbic	0x1f, 1	; 31
    2e1c:	fe cf       	rjmp	.-4      	; 0x2e1a <__eeupd_r18_m328p>
    2e1e:	92 bd       	out	0x22, r25	; 34
    2e20:	81 bd       	out	0x21, r24	; 33
    2e22:	f8 9a       	sbi	0x1f, 0	; 31
    2e24:	01 97       	sbiw	r24, 0x01	; 1
    2e26:	00 b4       	in	r0, 0x20	; 32
    2e28:	02 16       	cp	r0, r18
    2e2a:	39 f0       	breq	.+14     	; 0x2e3a <__eeupd_r18_m328p+0x20>
    2e2c:	1f ba       	out	0x1f, r1	; 31
    2e2e:	20 bd       	out	0x20, r18	; 32
    2e30:	0f b6       	in	r0, 0x3f	; 63
    2e32:	f8 94       	cli
    2e34:	fa 9a       	sbi	0x1f, 2	; 31
    2e36:	f9 9a       	sbi	0x1f, 1	; 31
    2e38:	0f be       	out	0x3f, r0	; 63
    2e3a:	08 95       	ret

00002e3c <_exit>:
    2e3c:	f8 94       	cli

00002e3e <__stop_program>:
    2e3e:	ff cf       	rjmp	.-2      	; 0x2e3e <__stop_program>
